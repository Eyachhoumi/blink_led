
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003064  08003064  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      000000a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cae1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002384  00000000  00000000  0002cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000940  00000000  00000000  0002ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008a0  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020a78  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008aa8  00000000  00000000  00050ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c52c9  00000000  00000000  00059648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000214c  00000000  00000000  0011e914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000128d  00000000  00000000  00120a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	2000000c 	.word	0x2000000c
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	00000000 	.word	0x00000000
 80001ec:	0800302c 	.word	0x0800302c

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	0800302c 	.word	0x0800302c

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	3401      	adds	r4, #1
 8000220:	f855 3b04 	ldr.w	r3, [r5], #4
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f002 fefc 	bl	800302c <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	3401      	adds	r4, #1
 800023c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	08003064 	.word	0x08003064
 800024c:	08003064 	.word	0x08003064
 8000250:	08003068 	.word	0x08003068
 8000254:	08003064 	.word	0x08003064

08000258 <memset>:
 8000258:	b4f0      	push	{r4, r5, r6, r7}
 800025a:	0786      	lsls	r6, r0, #30
 800025c:	d046      	beq.n	80002ec <memset+0x94>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03c      	beq.n	80002de <memset+0x86>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e002      	b.n	8000270 <memset+0x18>
 800026a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800026e:	d336      	bcc.n	80002de <memset+0x86>
 8000270:	f803 2b01 	strb.w	r2, [r3], #1
 8000274:	079d      	lsls	r5, r3, #30
 8000276:	d1f8      	bne.n	800026a <memset+0x12>
 8000278:	2c03      	cmp	r4, #3
 800027a:	d929      	bls.n	80002d0 <memset+0x78>
 800027c:	b2cd      	uxtb	r5, r1
 800027e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000282:	2c0f      	cmp	r4, #15
 8000284:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000288:	d933      	bls.n	80002f2 <memset+0x9a>
 800028a:	f1a4 0610 	sub.w	r6, r4, #16
 800028e:	0936      	lsrs	r6, r6, #4
 8000290:	f103 0720 	add.w	r7, r3, #32
 8000294:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000298:	f103 0210 	add.w	r2, r3, #16
 800029c:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a4:	3210      	adds	r2, #16
 80002a6:	42ba      	cmp	r2, r7
 80002a8:	d1f8      	bne.n	800029c <memset+0x44>
 80002aa:	1c72      	adds	r2, r6, #1
 80002ac:	f014 0f0c 	tst.w	r4, #12
 80002b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b4:	f004 060f 	and.w	r6, r4, #15
 80002b8:	d013      	beq.n	80002e2 <memset+0x8a>
 80002ba:	1f33      	subs	r3, r6, #4
 80002bc:	f023 0303 	bic.w	r3, r3, #3
 80002c0:	3304      	adds	r3, #4
 80002c2:	4413      	add	r3, r2
 80002c4:	f842 5b04 	str.w	r5, [r2], #4
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d1fb      	bne.n	80002c4 <memset+0x6c>
 80002cc:	f006 0403 	and.w	r4, r6, #3
 80002d0:	b12c      	cbz	r4, 80002de <memset+0x86>
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	441c      	add	r4, r3
 80002d6:	f803 1b01 	strb.w	r1, [r3], #1
 80002da:	429c      	cmp	r4, r3
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x7e>
 80002de:	bcf0      	pop	{r4, r5, r6, r7}
 80002e0:	4770      	bx	lr
 80002e2:	4634      	mov	r4, r6
 80002e4:	4613      	mov	r3, r2
 80002e6:	2c00      	cmp	r4, #0
 80002e8:	d1f3      	bne.n	80002d2 <memset+0x7a>
 80002ea:	e7f8      	b.n	80002de <memset+0x86>
 80002ec:	4614      	mov	r4, r2
 80002ee:	4603      	mov	r3, r0
 80002f0:	e7c2      	b.n	8000278 <memset+0x20>
 80002f2:	461a      	mov	r2, r3
 80002f4:	4626      	mov	r6, r4
 80002f6:	e7e0      	b.n	80002ba <memset+0x62>

080002f8 <__aeabi_uldivmod>:
 80002f8:	b953      	cbnz	r3, 8000310 <__aeabi_uldivmod+0x18>
 80002fa:	b94a      	cbnz	r2, 8000310 <__aeabi_uldivmod+0x18>
 80002fc:	2900      	cmp	r1, #0
 80002fe:	bf08      	it	eq
 8000300:	2800      	cmpeq	r0, #0
 8000302:	bf1c      	itt	ne
 8000304:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000308:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 b96e 	b.w	80005ec <__aeabi_idiv0>
 8000310:	f1ad 0c08 	sub.w	ip, sp, #8
 8000314:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000318:	f000 f806 	bl	8000328 <__udivmoddi4>
 800031c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000324:	b004      	add	sp, #16
 8000326:	4770      	bx	lr

08000328 <__udivmoddi4>:
 8000328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800032c:	9d08      	ldr	r5, [sp, #32]
 800032e:	4604      	mov	r4, r0
 8000330:	468c      	mov	ip, r1
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8083 	bne.w	800043e <__udivmoddi4+0x116>
 8000338:	428a      	cmp	r2, r1
 800033a:	4617      	mov	r7, r2
 800033c:	d947      	bls.n	80003ce <__udivmoddi4+0xa6>
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	b142      	cbz	r2, 8000356 <__udivmoddi4+0x2e>
 8000344:	f1c2 0020 	rsb	r0, r2, #32
 8000348:	fa24 f000 	lsr.w	r0, r4, r0
 800034c:	4091      	lsls	r1, r2
 800034e:	4097      	lsls	r7, r2
 8000350:	ea40 0c01 	orr.w	ip, r0, r1
 8000354:	4094      	lsls	r4, r2
 8000356:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fbbc f6f8 	udiv	r6, ip, r8
 8000360:	fa1f fe87 	uxth.w	lr, r7
 8000364:	fb08 c116 	mls	r1, r8, r6, ip
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb06 f10e 	mul.w	r1, r6, lr
 8000370:	4299      	cmp	r1, r3
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x60>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800037a:	f080 8119 	bcs.w	80005b0 <__udivmoddi4+0x288>
 800037e:	4299      	cmp	r1, r3
 8000380:	f240 8116 	bls.w	80005b0 <__udivmoddi4+0x288>
 8000384:	3e02      	subs	r6, #2
 8000386:	443b      	add	r3, r7
 8000388:	1a5b      	subs	r3, r3, r1
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000390:	fb08 3310 	mls	r3, r8, r0, r3
 8000394:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000398:	fb00 fe0e 	mul.w	lr, r0, lr
 800039c:	45a6      	cmp	lr, r4
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x8c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a6:	f080 8105 	bcs.w	80005b4 <__udivmoddi4+0x28c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8102 	bls.w	80005b4 <__udivmoddi4+0x28c>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	2600      	movs	r6, #0
 80003be:	b11d      	cbz	r5, 80003c8 <__udivmoddi4+0xa0>
 80003c0:	40d4      	lsrs	r4, r2
 80003c2:	2300      	movs	r3, #0
 80003c4:	e9c5 4300 	strd	r4, r3, [r5]
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	b902      	cbnz	r2, 80003d2 <__udivmoddi4+0xaa>
 80003d0:	deff      	udf	#255	; 0xff
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d150      	bne.n	800047c <__udivmoddi4+0x154>
 80003da:	1bcb      	subs	r3, r1, r7
 80003dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	2601      	movs	r6, #1
 80003e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ea:	0c21      	lsrs	r1, r4, #16
 80003ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb08 f30c 	mul.w	r3, r8, ip
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0xe4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0xe2>
 8000404:	428b      	cmp	r3, r1
 8000406:	f200 80e9 	bhi.w	80005dc <__udivmoddi4+0x2b4>
 800040a:	4684      	mov	ip, r0
 800040c:	1ac9      	subs	r1, r1, r3
 800040e:	b2a3      	uxth	r3, r4
 8000410:	fbb1 f0fe 	udiv	r0, r1, lr
 8000414:	fb0e 1110 	mls	r1, lr, r0, r1
 8000418:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800041c:	fb08 f800 	mul.w	r8, r8, r0
 8000420:	45a0      	cmp	r8, r4
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x10c>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x10a>
 800042c:	45a0      	cmp	r8, r4
 800042e:	f200 80d9 	bhi.w	80005e4 <__udivmoddi4+0x2bc>
 8000432:	4618      	mov	r0, r3
 8000434:	eba4 0408 	sub.w	r4, r4, r8
 8000438:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800043c:	e7bf      	b.n	80003be <__udivmoddi4+0x96>
 800043e:	428b      	cmp	r3, r1
 8000440:	d909      	bls.n	8000456 <__udivmoddi4+0x12e>
 8000442:	2d00      	cmp	r5, #0
 8000444:	f000 80b1 	beq.w	80005aa <__udivmoddi4+0x282>
 8000448:	2600      	movs	r6, #0
 800044a:	e9c5 0100 	strd	r0, r1, [r5]
 800044e:	4630      	mov	r0, r6
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	fab3 f683 	clz	r6, r3
 800045a:	2e00      	cmp	r6, #0
 800045c:	d14a      	bne.n	80004f4 <__udivmoddi4+0x1cc>
 800045e:	428b      	cmp	r3, r1
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x140>
 8000462:	4282      	cmp	r2, r0
 8000464:	f200 80b8 	bhi.w	80005d8 <__udivmoddi4+0x2b0>
 8000468:	1a84      	subs	r4, r0, r2
 800046a:	eb61 0103 	sbc.w	r1, r1, r3
 800046e:	2001      	movs	r0, #1
 8000470:	468c      	mov	ip, r1
 8000472:	2d00      	cmp	r5, #0
 8000474:	d0a8      	beq.n	80003c8 <__udivmoddi4+0xa0>
 8000476:	e9c5 4c00 	strd	r4, ip, [r5]
 800047a:	e7a5      	b.n	80003c8 <__udivmoddi4+0xa0>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f603 	lsr.w	r6, r0, r3
 8000484:	4097      	lsls	r7, r2
 8000486:	fa01 f002 	lsl.w	r0, r1, r2
 800048a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048e:	40d9      	lsrs	r1, r3
 8000490:	4330      	orrs	r0, r6
 8000492:	0c03      	lsrs	r3, r0, #16
 8000494:	fbb1 f6fe 	udiv	r6, r1, lr
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	fb0e 1116 	mls	r1, lr, r6, r1
 80004a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a4:	fb06 f108 	mul.w	r1, r6, r8
 80004a8:	4299      	cmp	r1, r3
 80004aa:	fa04 f402 	lsl.w	r4, r4, r2
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x19c>
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004b6:	f080 808d 	bcs.w	80005d4 <__udivmoddi4+0x2ac>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 808a 	bls.w	80005d4 <__udivmoddi4+0x2ac>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	443b      	add	r3, r7
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b281      	uxth	r1, r0
 80004c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d4:	fb00 f308 	mul.w	r3, r0, r8
 80004d8:	428b      	cmp	r3, r1
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x1c4>
 80004dc:	1879      	adds	r1, r7, r1
 80004de:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004e2:	d273      	bcs.n	80005cc <__udivmoddi4+0x2a4>
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d971      	bls.n	80005cc <__udivmoddi4+0x2a4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4439      	add	r1, r7
 80004ec:	1acb      	subs	r3, r1, r3
 80004ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004f2:	e778      	b.n	80003e6 <__udivmoddi4+0xbe>
 80004f4:	f1c6 0c20 	rsb	ip, r6, #32
 80004f8:	fa03 f406 	lsl.w	r4, r3, r6
 80004fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000500:	431c      	orrs	r4, r3
 8000502:	fa20 f70c 	lsr.w	r7, r0, ip
 8000506:	fa01 f306 	lsl.w	r3, r1, r6
 800050a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800050e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000512:	431f      	orrs	r7, r3
 8000514:	0c3b      	lsrs	r3, r7, #16
 8000516:	fbb1 f9fe 	udiv	r9, r1, lr
 800051a:	fa1f f884 	uxth.w	r8, r4
 800051e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000522:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000526:	fb09 fa08 	mul.w	sl, r9, r8
 800052a:	458a      	cmp	sl, r1
 800052c:	fa02 f206 	lsl.w	r2, r2, r6
 8000530:	fa00 f306 	lsl.w	r3, r0, r6
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x220>
 8000536:	1861      	adds	r1, r4, r1
 8000538:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800053c:	d248      	bcs.n	80005d0 <__udivmoddi4+0x2a8>
 800053e:	458a      	cmp	sl, r1
 8000540:	d946      	bls.n	80005d0 <__udivmoddi4+0x2a8>
 8000542:	f1a9 0902 	sub.w	r9, r9, #2
 8000546:	4421      	add	r1, r4
 8000548:	eba1 010a 	sub.w	r1, r1, sl
 800054c:	b2bf      	uxth	r7, r7
 800054e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000552:	fb0e 1110 	mls	r1, lr, r0, r1
 8000556:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800055a:	fb00 f808 	mul.w	r8, r0, r8
 800055e:	45b8      	cmp	r8, r7
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x24a>
 8000562:	19e7      	adds	r7, r4, r7
 8000564:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000568:	d22e      	bcs.n	80005c8 <__udivmoddi4+0x2a0>
 800056a:	45b8      	cmp	r8, r7
 800056c:	d92c      	bls.n	80005c8 <__udivmoddi4+0x2a0>
 800056e:	3802      	subs	r0, #2
 8000570:	4427      	add	r7, r4
 8000572:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000576:	eba7 0708 	sub.w	r7, r7, r8
 800057a:	fba0 8902 	umull	r8, r9, r0, r2
 800057e:	454f      	cmp	r7, r9
 8000580:	46c6      	mov	lr, r8
 8000582:	4649      	mov	r1, r9
 8000584:	d31a      	bcc.n	80005bc <__udivmoddi4+0x294>
 8000586:	d017      	beq.n	80005b8 <__udivmoddi4+0x290>
 8000588:	b15d      	cbz	r5, 80005a2 <__udivmoddi4+0x27a>
 800058a:	ebb3 020e 	subs.w	r2, r3, lr
 800058e:	eb67 0701 	sbc.w	r7, r7, r1
 8000592:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000596:	40f2      	lsrs	r2, r6
 8000598:	ea4c 0202 	orr.w	r2, ip, r2
 800059c:	40f7      	lsrs	r7, r6
 800059e:	e9c5 2700 	strd	r2, r7, [r5]
 80005a2:	2600      	movs	r6, #0
 80005a4:	4631      	mov	r1, r6
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e70b      	b.n	80003c8 <__udivmoddi4+0xa0>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e9      	b.n	8000388 <__udivmoddi4+0x60>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6fd      	b.n	80003b4 <__udivmoddi4+0x8c>
 80005b8:	4543      	cmp	r3, r8
 80005ba:	d2e5      	bcs.n	8000588 <__udivmoddi4+0x260>
 80005bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c0:	eb69 0104 	sbc.w	r1, r9, r4
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7df      	b.n	8000588 <__udivmoddi4+0x260>
 80005c8:	4608      	mov	r0, r1
 80005ca:	e7d2      	b.n	8000572 <__udivmoddi4+0x24a>
 80005cc:	4660      	mov	r0, ip
 80005ce:	e78d      	b.n	80004ec <__udivmoddi4+0x1c4>
 80005d0:	4681      	mov	r9, r0
 80005d2:	e7b9      	b.n	8000548 <__udivmoddi4+0x220>
 80005d4:	4666      	mov	r6, ip
 80005d6:	e775      	b.n	80004c4 <__udivmoddi4+0x19c>
 80005d8:	4630      	mov	r0, r6
 80005da:	e74a      	b.n	8000472 <__udivmoddi4+0x14a>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	4439      	add	r1, r7
 80005e2:	e713      	b.n	800040c <__udivmoddi4+0xe4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e724      	b.n	8000434 <__udivmoddi4+0x10c>
 80005ea:	bf00      	nop

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <BL_UART_Fetch_Host_Command>:
static uint8_t BL_Host_Buffer[BL_HOST_BUFFER_RX_LENGTH];
static uint8_t appExists = 0;

/************************************ Software Interfaces Implementations ************************************/
BL_Status BL_UART_Fetch_Host_Command(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 8000602:	2264      	movs	r2, #100	; 0x64
 8000604:	2100      	movs	r1, #0
 8000606:	482d      	ldr	r0, [pc, #180]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 8000608:	f7ff fe26 	bl	8000258 <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000610:	2201      	movs	r2, #1
 8000612:	492a      	ldr	r1, [pc, #168]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 8000614:	482a      	ldr	r0, [pc, #168]	; (80006c0 <BL_UART_Fetch_Host_Command+0xd0>)
 8000616:	f002 f9ee 	bl	80029f6 <HAL_UART_Receive>
 800061a:	4603      	mov	r3, r0
 800061c:	71bb      	strb	r3, [r7, #6]

	if(HAL_Status != HAL_OK)
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <BL_UART_Fetch_Host_Command+0x3a>
	{
		Status = BL_NACK;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	e042      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	b29a      	uxth	r2, r3
 8000634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <BL_UART_Fetch_Host_Command+0xd4>)
 800063a:	4821      	ldr	r0, [pc, #132]	; (80006c0 <BL_UART_Fetch_Host_Command+0xd0>)
 800063c:	f002 f9db 	bl	80029f6 <HAL_UART_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK)
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <BL_UART_Fetch_Host_Command+0x60>
		{
			Status = BL_NACK;
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e02f      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
		}
		else
		{
			switch(BL_Host_Buffer[1]){
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	3b10      	subs	r3, #16
 8000656:	2b04      	cmp	r3, #4
 8000658:	d82a      	bhi.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <BL_UART_Fetch_Host_Command+0x70>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000675 	.word	0x08000675
 8000664:	08000681 	.word	0x08000681
 8000668:	0800068d 	.word	0x0800068d
 800066c:	08000699 	.word	0x08000699
 8000670:	080006a5 	.word	0x080006a5
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 8000676:	f000 f827 	bl	80006c8 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800067a:	2301      	movs	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
					break;
 800067e:	e017      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 8000682:	f000 f864 	bl	800074e <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
					break;
 800068a:	e011      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 800068e:	f000 f899 	bl	80007c4 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
					break;
 8000696:	e00b      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 800069a:	f000 f94a 	bl	8000932 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
					break;
 80006a2:	e005      	b.n	80006b0 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <BL_UART_Fetch_Host_Command+0xcc>)
 80006a6:	f000 f9d2 	bl	8000a4e <Bootloader_Memory_Write>
					Status = BL_OK;
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
					break;
 80006ae:	bf00      	nop
			}
		}
	}

	return Status;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	20000029 	.word	0x20000029

080006c8 <Bootloader_Get_Chip_Identification_Number>:

/************************************    Static Functions Implementations  ************************************/
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	81fb      	strh	r3, [r7, #14]
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	3301      	adds	r3, #1
 80006e4:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80006e6:	8afb      	ldrh	r3, [r7, #22]
 80006e8:	3b04      	subs	r3, #4
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80006f2:	8afb      	ldrh	r3, [r7, #22]
 80006f4:	3b04      	subs	r3, #4
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa2e 	bl	8000b5c <Bootloader_CRC_Verify>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10d      	bne.n	8000722 <Bootloader_Get_Chip_Identification_Number+0x5a>
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <Bootloader_Get_Chip_Identification_Number+0x68>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000710:	b29b      	uxth	r3, r3
 8000712:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 8000714:	f107 030e 	add.w	r3, r7, #14
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fa6e 	bl	8000bfc <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000720:	e001      	b.n	8000726 <Bootloader_Get_Chip_Identification_Number+0x5e>
		Bootloader_Send_NACK();
 8000722:	f000 fa59 	bl	8000bd8 <Bootloader_Send_NACK>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0042000 	.word	0xe0042000

08000734 <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f84b 	bl	80017d8 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	b2db      	uxtb	r3, r3
}
 8000746:	4618      	mov	r0, r3
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	3301      	adds	r3, #1
 800076a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800076c:	8afb      	ldrh	r3, [r7, #22]
 800076e:	3b04      	subs	r3, #4
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000778:	8afb      	ldrh	r3, [r7, #22]
 800077a:	3b04      	subs	r3, #4
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f9eb 	bl	8000b5c <Bootloader_CRC_Verify>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d115      	bne.n	80007b8 <Bootloader_Read_Protection_Level+0x6a>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401_Get_RDP_Level();
 800078c:	f7ff ffd2 	bl	8000734 <CBL_STM32F401_Get_RDP_Level>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
		if(0xAA == RDP_Level)		 RDP_Level = 0x00;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2baa      	cmp	r3, #170	; 0xaa
 8000798:	d102      	bne.n	80007a0 <Bootloader_Read_Protection_Level+0x52>
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e004      	b.n	80007aa <Bootloader_Read_Protection_Level+0x5c>
		else if(0x55 == RDP_Level)   RDP_Level = 0x01;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b55      	cmp	r3, #85	; 0x55
 80007a4:	d101      	bne.n	80007aa <Bootloader_Read_Protection_Level+0x5c>
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 80007aa:	f107 030f 	add.w	r3, r7, #15
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fa23 	bl	8000bfc <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 80007b6:	e001      	b.n	80007bc <Bootloader_Read_Protection_Level+0x6e>
		Bootloader_Send_NACK();
 80007b8:	f000 fa0e 	bl	8000bd8 <Bootloader_Send_NACK>
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	3301      	adds	r3, #1
 80007dc:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	3b04      	subs	r3, #4
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	61bb      	str	r3, [r7, #24]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 80007ea:	8bfb      	ldrh	r3, [r7, #30]
 80007ec:	3b04      	subs	r3, #4
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4619      	mov	r1, r3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f9b2 	bl	8000b5c <Bootloader_CRC_Verify>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d126      	bne.n	800084c <Bootloader_Jump_To_User_App+0x88>
	{
		if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS))
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <Bootloader_Jump_To_User_App+0x94>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000806:	d019      	beq.n	800083c <Bootloader_Jump_To_User_App+0x78>
		{
			appExists = 1;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <Bootloader_Jump_To_User_App+0x98>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 800080e:	2101      	movs	r1, #1
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <Bootloader_Jump_To_User_App+0x98>)
 8000812:	f000 f9f3 	bl	8000bfc <Bootloader_Send_Data_To_Host>
			/* Value of the main stack pointer of our main application */
			uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <Bootloader_Jump_To_User_App+0x94>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	617b      	str	r3, [r7, #20]

			/* Reset Handler definition function of our main application */
			uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <Bootloader_Jump_To_User_App+0x9c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	613b      	str	r3, [r7, #16]

			/* Fetch the reset handler address of the user application */
			pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f383 8808 	msr	MSP, r3
}
 8000830:	bf00      	nop

			/* Set Main Stack Pointer */
			__set_MSP(MSP_Value);

			/* DeInitialize / Disable of modules */
			HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 8000832:	f001 ff37 	bl	80026a4 <HAL_RCC_DeInit>
			                  /* Disable Maskable Interrupt */
			/* Jump to Application Reset Handler */
			ResetHandler_Address();
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4798      	blx	r3
		}
	}
	else{
		Bootloader_Send_NACK();
	}
}
 800083a:	e009      	b.n	8000850 <Bootloader_Jump_To_User_App+0x8c>
			appExists = 0;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <Bootloader_Jump_To_User_App+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 8000842:	2101      	movs	r1, #1
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <Bootloader_Jump_To_User_App+0x98>)
 8000846:	f000 f9d9 	bl	8000bfc <Bootloader_Send_Data_To_Host>
}
 800084a:	e001      	b.n	8000850 <Bootloader_Jump_To_User_App+0x8c>
		Bootloader_Send_NACK();
 800084c:	f000 f9c4 	bl	8000bd8 <Bootloader_Send_NACK>
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08008000 	.word	0x08008000
 800085c:	2000008c 	.word	0x2000008c
 8000860:	08008004 	.word	0x08008004

08000864 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	2b06      	cmp	r3, #6
 800088e:	d903      	bls.n	8000898 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000896:	e046      	b.n	8000926 <Perform_Flash_Erase+0xc2>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr))
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b05      	cmp	r3, #5
 800089c:	d902      	bls.n	80008a4 <Perform_Flash_Erase+0x40>
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d13d      	bne.n	8000920 <Perform_Flash_Erase+0xbc>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	d102      	bne.n	80008b0 <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	e012      	b.n	80008d6 <Perform_Flash_Erase+0x72>
			}
			else
			{
				/* User needs Sector erase */
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f1c3 0306 	rsb	r3, r3, #6
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors)
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d902      	bls.n	80008ca <Perform_Flash_Erase+0x66>
				{
					Number_Of_Sectors = Remaining_Sectors;
 80008c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008c8:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 80008de:	f000 fda9 	bl	8001434 <HAL_FLASH_Unlock>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008e8:	f107 020c 	add.w	r2, r7, #12
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 ff00 	bl	80016f8 <HAL_FLASHEx_Erase>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000904:	d103      	bne.n	800090e <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000906:	2303      	movs	r3, #3
 8000908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090c:	e002      	b.n	8000914 <Perform_Flash_Erase+0xb0>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 800090e:	2302      	movs	r3, #2
 8000910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000914:	f000 fdb0 	bl	8001478 <HAL_FLASH_Lock>
 8000918:	4603      	mov	r3, r0
 800091a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800091e:	e002      	b.n	8000926 <Perform_Flash_Erase+0xc2>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000920:	2302      	movs	r3, #2
 8000922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800092a:	4618      	mov	r0, r3
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b29b      	uxth	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	3b04      	subs	r3, #4
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 800095c:	8afb      	ldrh	r3, [r7, #22]
 800095e:	3b04      	subs	r3, #4
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4619      	mov	r1, r3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f8f9 	bl	8000b5c <Bootloader_CRC_Verify>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d116      	bne.n	800099e <Bootloader_Erase_Flash+0x6c>
	{
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(2, 4);
 8000970:	2104      	movs	r1, #4
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff ff76 	bl	8000864 <Perform_Flash_Erase>
 8000978:	4603      	mov	r3, r0
 800097a:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d106      	bne.n	8000990 <Bootloader_Erase_Flash+0x5e>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000982:	f107 030f 	add.w	r3, r7, #15
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f937 	bl	8000bfc <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 800098e:	e008      	b.n	80009a2 <Bootloader_Erase_Flash+0x70>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000990:	f107 030f 	add.w	r3, r7, #15
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f930 	bl	8000bfc <Bootloader_Send_Data_To_Host>
}
 800099c:	e001      	b.n	80009a2 <Bootloader_Erase_Flash+0x70>
		Bootloader_Send_NACK();
 800099e:	f000 f91b 	bl	8000bd8 <Bootloader_Send_NACK>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	4613      	mov	r3, r2
 80009b6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009bc:	2300      	movs	r3, #0
 80009be:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 80009c4:	f000 fd36 	bl	8001434 <HAL_FLASH_Unlock>
 80009c8:	4603      	mov	r3, r0
 80009ca:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75bb      	strb	r3, [r7, #22]
 80009d6:	e020      	b.n	8000a1a <Flash_Memory_Write_Payload+0x70>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80009d8:	2300      	movs	r3, #0
 80009da:	82bb      	strh	r3, [r7, #20]
 80009dc:	e019      	b.n	8000a12 <Flash_Memory_Write_Payload+0x68>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 80009de:	8aba      	ldrh	r2, [r7, #20]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	18d1      	adds	r1, r2, r3
 80009e4:	8abb      	ldrh	r3, [r7, #20]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	f04f 0300 	mov.w	r3, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fcca 	bl	800138c <HAL_FLASH_Program>
 80009f8:	4603      	mov	r3, r0
 80009fa:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <Flash_Memory_Write_Payload+0x5e>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a02:	2300      	movs	r3, #0
 8000a04:	75bb      	strb	r3, [r7, #22]
				break;
 8000a06:	e008      	b.n	8000a1a <Flash_Memory_Write_Payload+0x70>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000a0c:	8abb      	ldrh	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	82bb      	strh	r3, [r7, #20]
 8000a12:	8aba      	ldrh	r2, [r7, #20]
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3e1      	bcc.n	80009de <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000a1a:	7dbb      	ldrb	r3, [r7, #22]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10f      	bne.n	8000a40 <Flash_Memory_Write_Payload+0x96>
 8000a20:	7dfb      	ldrb	r3, [r7, #23]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10c      	bne.n	8000a40 <Flash_Memory_Write_Payload+0x96>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000a26:	f000 fd27 	bl	8001478 <HAL_FLASH_Lock>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <Flash_Memory_Write_Payload+0x90>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000a38:	e004      	b.n	8000a44 <Flash_Memory_Write_Payload+0x9a>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000a3e:	e001      	b.n	8000a44 <Flash_Memory_Write_Payload+0x9a>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a40:	2300      	movs	r3, #0
 8000a42:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000a44:	7dbb      	ldrb	r3, [r7, #22]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	727b      	strb	r3, [r7, #9]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000a84:	8afb      	ldrh	r3, [r7, #22]
 8000a86:	3b04      	subs	r3, #4
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f865 	bl	8000b5c <Bootloader_CRC_Verify>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d132      	bne.n	8000afe <Bootloader_Memory_Write+0xb0>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a9e:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	799b      	ldrb	r3, [r3, #6]
 8000aa4:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f000 f830 	bl	8000b0c <Host_Address_Verification>
 8000aac:	4603      	mov	r3, r0
 8000aae:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000ab0:	7abb      	ldrb	r3, [r7, #10]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d11a      	bne.n	8000aec <Bootloader_Memory_Write+0x9e>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3307      	adds	r3, #7
 8000aba:	7afa      	ldrb	r2, [r7, #11]
 8000abc:	b292      	uxth	r2, r2
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff72 	bl	80009aa <Flash_Memory_Write_Payload>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000aca:	7a7b      	ldrb	r3, [r7, #9]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d106      	bne.n	8000ade <Bootloader_Memory_Write+0x90>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000ad0:	f107 0309 	add.w	r3, r7, #9
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f890 	bl	8000bfc <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000adc:	e011      	b.n	8000b02 <Bootloader_Memory_Write+0xb4>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000ade:	f107 0309 	add.w	r3, r7, #9
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f889 	bl	8000bfc <Bootloader_Send_Data_To_Host>
}
 8000aea:	e00a      	b.n	8000b02 <Bootloader_Memory_Write+0xb4>
			Address_Verification = ADDRESS_IS_INVALID;
 8000aec:	2300      	movs	r3, #0
 8000aee:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000af0:	f107 030a 	add.w	r3, r7, #10
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f880 	bl	8000bfc <Bootloader_Send_Data_To_Host>
}
 8000afc:	e001      	b.n	8000b02 <Bootloader_Memory_Write+0xb4>
		Bootloader_Send_NACK();
 8000afe:	f000 f86b 	bl	8000bd8 <Bootloader_Send_NACK>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b1e:	d306      	bcc.n	8000b2e <Host_Address_Verification+0x22>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <Host_Address_Verification+0x4c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d802      	bhi.n	8000b2e <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e00c      	b.n	8000b48 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b34:	d306      	bcc.n	8000b44 <Host_Address_Verification+0x38>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000b3c:	d802      	bhi.n	8000b44 <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e001      	b.n	8000b48 <Host_Address_Verification+0x3c>
	}
	else
	{
		Address_Verification = ADDRESS_IS_INVALID;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20010000 	.word	0x20010000

08000b5c <Bootloader_CRC_Verify>:

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75fb      	strb	r3, [r7, #23]
 8000b7c:	e00f      	b.n	8000b9e <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <Bootloader_CRC_Verify+0x78>)
 8000b92:	f000 fbd0 	bl	8001336 <HAL_CRC_Accumulate>
 8000b96:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8eb      	bhi.n	8000b7e <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <Bootloader_CRC_Verify+0x78>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <Bootloader_CRC_Verify+0x78>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d102      	bne.n	8000bc4 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	77fb      	strb	r3, [r7, #31]
 8000bc2:	e001      	b.n	8000bc8 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000d8 	.word	0x200000d8

08000bd8 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 8000bde:	23ab      	movs	r3, #171	; 0xab
 8000be0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 8000be2:	1df9      	adds	r1, r7, #7
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be8:	2201      	movs	r2, #1
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <Bootloader_Send_NACK+0x20>)
 8000bec:	f001 fe78 	bl	80028e0 <HAL_UART_Transmit>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000e0 	.word	0x200000e0

08000bfc <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <Bootloader_Send_Data_To_Host+0x24>)
 8000c12:	f001 fe65 	bl	80028e0 <HAL_UART_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000e0 	.word	0x200000e0

08000c24 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_CRC_MspInit+0x3c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10d      	bne.n	8000c52 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_CRC_MspInit+0x40>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_CRC_MspInit+0x40>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_CRC_MspInit+0x40>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023000 	.word	0x40023000
 8000c64:	40023800 	.word	0x40023800

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 f9c4 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f814 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f8ba 	bl	8000dec <MX_GPIO_Init>
  MX_CRC_Init();
 8000c78:	f000 f87a 	bl	8000d70 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000c7c:	f000 f88c 	bl	8000d98 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BL_UART_Fetch_Host_Command();
 8000c80:	f7ff fcb6 	bl	80005f0 <BL_UART_Fetch_Host_Command>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <main+0x30>)
 8000c8a:	f001 f87c 	bl	8001d86 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f000 fa2b 	bl	80010ec <HAL_Delay>
	  BL_UART_Fetch_Host_Command();
 8000c96:	e7f3      	b.n	8000c80 <main+0x18>
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	; 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fad4 	bl	8000258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <SystemClock_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <SystemClock_Config+0xd0>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <SystemClock_Config+0xd0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d10:	23b4      	movs	r3, #180	; 0xb4
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f84b 	bl	8001dbc <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d2c:	f000 f8b0 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	230f      	movs	r3, #15
 8000d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 faac 	bl	80022ac <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d5a:	f000 f899 	bl	8000e90 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3750      	adds	r7, #80	; 0x50
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_CRC_Init+0x20>)
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <MX_CRC_Init+0x24>)
 8000d78:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_CRC_Init+0x20>)
 8000d7c:	f000 fabf 	bl	80012fe <HAL_CRC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d86:	f000 f883 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000d8 	.word	0x200000d8
 8000d94:	40023000 	.word	0x40023000

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_USART1_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f001 fd36 	bl	8002840 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f859 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000090 	.word	0x20000090
 8000de8:	40011000 	.word	0x40011000

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_GPIO_Init+0x9c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0xa0>)
 8000e5e:	f000 ff79 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_GPIO_Init+0xa0>)
 8000e7c:	f000 fdce 	bl	8001a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020c00 	.word	0x40020c00

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>

08000e9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9e:	e7fe      	b.n	8000e9e <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f8e1 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12c      	bne.n	8000f90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f8c:	f000 fd46 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f7ff f91d 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fe47 	bl	8000c68 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	2000014c 	.word	0x2000014c

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f939 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f810 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f000 f806 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f93b 	bl	80012e6 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f000 f911 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000128 	.word	0x20000128

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000128 	.word	0x20000128

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff5c 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffb0 	bl	8001254 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00e      	b.n	800132e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fc7f 	bl	8000c24 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001336:	b480      	push	{r7}
 8001338:	b087      	sub	sp, #28
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2202      	movs	r2, #2
 800134a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	441a      	add	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3f0      	bcc.n	8001352 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2201      	movs	r2, #1
 800137c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800137e:	693b      	ldr	r3, [r7, #16]
}
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_FLASH_Program+0xa0>)
 80013a0:	7e1b      	ldrb	r3, [r3, #24]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_FLASH_Program+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e03b      	b.n	8001422 <HAL_FLASH_Program+0x96>
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_FLASH_Program+0xa0>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b4:	f000 f870 	bl	8001498 <FLASH_WaitForLastOperation>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d12b      	bne.n	800141a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80013c8:	783b      	ldrb	r3, [r7, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f000 f91b 	bl	8001608 <FLASH_Program_Byte>
 80013d2:	e016      	b.n	8001402 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80013da:	883b      	ldrh	r3, [r7, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	68b8      	ldr	r0, [r7, #8]
 80013e0:	f000 f8ee 	bl	80015c0 <FLASH_Program_HalfWord>
 80013e4:	e00d      	b.n	8001402 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d105      	bne.n	80013f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f000 f8c3 	bl	800157c <FLASH_Program_Word>
 80013f6:	e004      	b.n	8001402 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80013f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f000 f88b 	bl	8001518 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001406:	f000 f847 	bl	8001498 <FLASH_WaitForLastOperation>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_FLASH_Program+0xa4>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_FLASH_Program+0xa4>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_FLASH_Program+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000012c 	.word	0x2000012c
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_FLASH_Unlock+0x38>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da0b      	bge.n	800145e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_FLASH_Unlock+0x38>)
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_FLASH_Unlock+0x3c>)
 800144a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_FLASH_Unlock+0x38>)
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_FLASH_Unlock+0x40>)
 8001450:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_FLASH_Unlock+0x38>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da01      	bge.n	800145e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800145e:	79fb      	ldrb	r3, [r7, #7]
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023c00 	.word	0x40023c00
 8001470:	45670123 	.word	0x45670123
 8001474:	cdef89ab 	.word	0xcdef89ab

08001478 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_FLASH_Lock+0x1c>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_FLASH_Lock+0x1c>)
 8001482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001486:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023c00 	.word	0x40023c00

08001498 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <FLASH_WaitForLastOperation+0x78>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80014aa:	f7ff fe13 	bl	80010d4 <HAL_GetTick>
 80014ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014b0:	e010      	b.n	80014d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b8:	d00c      	beq.n	80014d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <FLASH_WaitForLastOperation+0x38>
 80014c0:	f7ff fe08 	bl	80010d4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d201      	bcs.n	80014d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e019      	b.n	8001508 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <FLASH_WaitForLastOperation+0x7c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e8      	bne.n	80014b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <FLASH_WaitForLastOperation+0x7c>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <FLASH_WaitForLastOperation+0x7c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <FLASH_WaitForLastOperation+0x7c>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014fe:	f000 f8a5 	bl	800164c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
  
}  
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000012c 	.word	0x2000012c
 8001514:	40023c00 	.word	0x40023c00

08001518 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 800152a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800152e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 8001536:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800153a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <FLASH_Program_DoubleWord+0x60>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800154e:	f3bf 8f6f 	isb	sy
}
 8001552:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	000a      	movs	r2, r1
 8001562:	2300      	movs	r3, #0
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	3104      	adds	r1, #4
 8001568:	4613      	mov	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40023c00 	.word	0x40023c00

0800157c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <FLASH_Program_Word+0x40>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <FLASH_Program_Word+0x40>)
 800158c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001590:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <FLASH_Program_Word+0x40>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <FLASH_Program_Word+0x40>)
 8001598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <FLASH_Program_Word+0x40>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <FLASH_Program_Word+0x40>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <FLASH_Program_HalfWord+0x44>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	801a      	strh	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <FLASH_Program_Byte+0x40>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <FLASH_Program_Byte+0x40>)
 800161a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800161e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <FLASH_Program_Byte+0x40>)
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <FLASH_Program_Byte+0x40>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <FLASH_Program_Byte+0x40>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <FLASH_Program_Byte+0x40>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 8001666:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 800166a:	2210      	movs	r2, #16
 800166c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 8001684:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 8001688:	2220      	movs	r2, #32
 800168a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 80016a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 80016a6:	2240      	movs	r2, #64	; 0x40
 80016a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 80016c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <FLASH_SetErrorCode+0xa8>)
 80016de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <FLASH_SetErrorCode+0xa4>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	60da      	str	r2, [r3, #12]
  }
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40023c00 	.word	0x40023c00
 80016f4:	2000012c 	.word	0x2000012c

080016f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_FLASHEx_Erase+0xd8>)
 800170c:	7e1b      	ldrb	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_FLASHEx_Erase+0x1e>
 8001712:	2302      	movs	r3, #2
 8001714:	e058      	b.n	80017c8 <HAL_FLASHEx_Erase+0xd0>
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_FLASHEx_Erase+0xd8>)
 8001718:	2201      	movs	r2, #1
 800171a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800171c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001720:	f7ff feba 	bl	8001498 <FLASH_WaitForLastOperation>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d148      	bne.n	80017c0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001734:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d115      	bne.n	800176a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f000 f868 	bl	8001820 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001750:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001754:	f7ff fea0 	bl	8001498 <FLASH_WaitForLastOperation>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_FLASHEx_Erase+0xdc>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_FLASHEx_Erase+0xdc>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6113      	str	r3, [r2, #16]
 8001768:	e028      	b.n	80017bc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	e01c      	b.n	80017ac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	68b8      	ldr	r0, [r7, #8]
 800177c:	f000 f874 	bl	8001868 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001780:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001784:	f7ff fe88 	bl	8001498 <FLASH_WaitForLastOperation>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_FLASHEx_Erase+0xdc>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_FLASHEx_Erase+0xdc>)
 8001792:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001796:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	601a      	str	r2, [r3, #0]
          break;
 80017a4:	e00a      	b.n	80017bc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3da      	bcc.n	8001772 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017bc:	f000 f8e8 	bl	8001990 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_FLASHEx_Erase+0xd8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	761a      	strb	r2, [r3, #24]

  return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000012c 	.word	0x2000012c
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	220f      	movs	r2, #15
 80017e4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80017e6:	f000 f897 	bl	8001918 <FLASH_OB_GetWRP>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80017f2:	f000 f89d 	bl	8001930 <FLASH_OB_GetRDP>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80017fe:	f000 f87b 	bl	80018f8 <FLASH_OB_GetUser>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800180a:	f000 f8b1 	bl	8001970 <FLASH_OB_GetBOR>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	615a      	str	r2, [r3, #20]
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <FLASH_MassErase+0x44>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <FLASH_MassErase+0x44>)
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001836:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <FLASH_MassErase+0x44>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a09      	ldr	r2, [pc, #36]	; (8001864 <FLASH_MassErase+0x44>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <FLASH_MassErase+0x44>)
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	4313      	orrs	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <FLASH_MassErase+0x44>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6113      	str	r3, [r2, #16]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e010      	b.n	80018a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d103      	bne.n	8001892 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800188a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e009      	b.n	80018a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d103      	bne.n	80018a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e002      	b.n	80018a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	490f      	ldr	r1, [pc, #60]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <FLASH_Erase_Sector+0x8c>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6113      	str	r3, [r2, #16]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40023c00 	.word	0x40023c00

080018f8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <FLASH_OB_GetUser+0x1c>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f023 031f 	bic.w	r3, r3, #31
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <FLASH_OB_GetWRP+0x14>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40023c16 	.word	0x40023c16

08001930 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001936:	23aa      	movs	r3, #170	; 0xaa
 8001938:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <FLASH_OB_GetRDP+0x3c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2bcc      	cmp	r3, #204	; 0xcc
 8001942:	d102      	bne.n	800194a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001944:	23cc      	movs	r3, #204	; 0xcc
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	e009      	b.n	800195e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <FLASH_OB_GetRDP+0x3c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2baa      	cmp	r3, #170	; 0xaa
 8001952:	d102      	bne.n	800195a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001954:	23aa      	movs	r3, #170	; 0xaa
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	e001      	b.n	800195e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800195a:	2355      	movs	r3, #85	; 0x55
 800195c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800195e:	79fb      	ldrb	r3, [r7, #7]
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40023c15 	.word	0x40023c15

08001970 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <FLASH_OB_GetBOR+0x1c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	b2db      	uxtb	r3, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023c14 	.word	0x40023c14

08001990 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <FLASH_FlushCaches+0x88>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d017      	beq.n	80019d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <FLASH_FlushCaches+0x88>)
 80019fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <FLASH_FlushCaches+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <FLASH_FlushCaches+0x88>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e16b      	b.n	8001d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 815a 	bne.w	8001d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80b4 	beq.w	8001d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a5f      	ldr	r2, [pc, #380]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x314>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x318>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x320>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x216>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x20a>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00e      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae90 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40021c00 	.word	0x40021c00
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d70:	e003      	b.n	8001d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	400b      	ands	r3, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e264      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	4ba3      	ldr	r3, [pc, #652]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d00c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d112      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b9d      	ldr	r3, [pc, #628]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b99      	ldr	r3, [pc, #612]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d157      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e23f      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x74>
 8001e22:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a90      	ldr	r2, [pc, #576]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a87      	ldr	r2, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a83      	ldr	r2, [pc, #524]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b81      	ldr	r3, [pc, #516]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a80      	ldr	r2, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff f92e 	bl	80010d4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f92a 	bl	80010d4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e204      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f91a 	bl	80010d4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f916 	bl	80010d4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1f0      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1c4      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b56      	ldr	r3, [pc, #344]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4952      	ldr	r1, [pc, #328]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_RCC_OscConfig+0x2b0>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f8cf 	bl	80010d4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f8cb 	bl	80010d4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1a5      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4940      	ldr	r1, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_OscConfig+0x2b0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f8ae 	bl	80010d4 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7ff f8aa 	bl	80010d4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e184      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d030      	beq.n	8002008 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x2b4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f88e 	bl	80010d4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f88a 	bl	80010d4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e164      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x200>
 8001fda:	e015      	b.n	8002008 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x2b4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f877 	bl	80010d4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f873 	bl	80010d4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e14d      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a0 	beq.w	8002156 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d121      	bne.n	8002096 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f839 	bl	80010d4 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e011      	b.n	800208a <HAL_RCC_OscConfig+0x2ce>
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
 8002074:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002078:	f7ff f82c 	bl	80010d4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e106      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4e4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x2f0>
 800209e:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e01c      	b.n	80020e6 <HAL_RCC_OscConfig+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020b4:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x32a>
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	; 0x70
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a71      	ldr	r2, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7fe fff1 	bl	80010d4 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe ffed 	bl	80010d4 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0c5      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCC_OscConfig+0x33a>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe ffdb 	bl	80010d4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe ffd7 	bl	80010d4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0af      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 809b 	beq.w	8002296 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d05c      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d141      	bne.n	80021f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe ffab 	bl	80010d4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe ffa7 	bl	80010d4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e081      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff80 	bl	80010d4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe ff7c 	bl	80010d4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e056      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x41c>
 80021f6:	e04e      	b.n	8002296 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe ff69 	bl	80010d4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe ff65 	bl	80010d4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e03f      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x44a>
 8002224:	e037      	b.n	8002296 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e032      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d028      	beq.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d121      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d11a      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002268:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40007000 	.word	0x40007000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470060 	.word	0x42470060

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe fe9a 	bl	80010d4 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fe96 	bl	80010d4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fdfa 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08003044 	.word	0x08003044
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002490:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d00d      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x40>
 800249c:	2b08      	cmp	r3, #8
 800249e:	f200 80bd 	bhi.w	800261c <HAL_RCC_GetSysClockFreq+0x1a4>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x34>
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024aa:	e0b7      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024ae:	60bb      	str	r3, [r7, #8]
       break;
 80024b0:	e0b7      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80024b4:	60bb      	str	r3, [r7, #8]
      break;
 80024b6:	e0b4      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d04d      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b58      	ldr	r3, [pc, #352]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	461a      	mov	r2, r3
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	ea02 0800 	and.w	r8, r2, r0
 80024e6:	ea03 0901 	and.w	r9, r3, r1
 80024ea:	4640      	mov	r0, r8
 80024ec:	4649      	mov	r1, r9
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	014b      	lsls	r3, r1, #5
 80024f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024fc:	0142      	lsls	r2, r0, #5
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	ebb0 0008 	subs.w	r0, r0, r8
 8002506:	eb61 0109 	sbc.w	r1, r1, r9
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	018b      	lsls	r3, r1, #6
 8002514:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002518:	0182      	lsls	r2, r0, #6
 800251a:	1a12      	subs	r2, r2, r0
 800251c:	eb63 0301 	sbc.w	r3, r3, r1
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	00d9      	lsls	r1, r3, #3
 800252a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800252e:	00d0      	lsls	r0, r2, #3
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	eb12 0208 	adds.w	r2, r2, r8
 8002538:	eb43 0309 	adc.w	r3, r3, r9
 800253c:	f04f 0000 	mov.w	r0, #0
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	0259      	lsls	r1, r3, #9
 8002546:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800254a:	0250      	lsls	r0, r2, #9
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f7fd fecc 	bl	80002f8 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e04a      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	461a      	mov	r2, r3
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	ea02 0400 	and.w	r4, r2, r0
 8002582:	ea03 0501 	and.w	r5, r3, r1
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	014b      	lsls	r3, r1, #5
 8002594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002598:	0142      	lsls	r2, r0, #5
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	1b00      	subs	r0, r0, r4
 80025a0:	eb61 0105 	sbc.w	r1, r1, r5
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	018b      	lsls	r3, r1, #6
 80025ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025b2:	0182      	lsls	r2, r0, #6
 80025b4:	1a12      	subs	r2, r2, r0
 80025b6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	00d9      	lsls	r1, r3, #3
 80025c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025c8:	00d0      	lsls	r0, r2, #3
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	1912      	adds	r2, r2, r4
 80025d0:	eb45 0303 	adc.w	r3, r5, r3
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	0299      	lsls	r1, r3, #10
 80025de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025e2:	0290      	lsls	r0, r2, #10
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f7fd fe80 	bl	80002f8 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	3301      	adds	r3, #1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	60bb      	str	r3, [r7, #8]
      break;
 800261a:	e002      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800261e:	60bb      	str	r3, [r7, #8]
      break;
 8002620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002622:	68bb      	ldr	r3, [r7, #8]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_RCC_GetHCLKFreq+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff0 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08003054 	.word	0x08003054

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002680:	f7ff ffdc 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0b5b      	lsrs	r3, r3, #13
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08003054 	.word	0x08003054

080026a4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026aa:	f7fe fd13 	bl	80010d4 <HAL_GetTick>
 80026ae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026b0:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5c      	ldr	r2, [pc, #368]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026be:	f7fe fd09 	bl	80010d4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0a7      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80026d0:	4b55      	ldr	r3, [pc, #340]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80026dc:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026e8:	f7fe fcf4 	bl	80010d4 <HAL_GetTick>
 80026ec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80026ee:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe fced 	bl	80010d4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e089      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_RCC_DeInit+0x184>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002718:	f7fe fcdc 	bl	80010d4 <HAL_GetTick>
 800271c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800271e:	4b42      	ldr	r3, [pc, #264]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a41      	ldr	r2, [pc, #260]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002724:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002728:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe fcd2 	bl	80010d4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e070      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800273e:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800274a:	f7fe fcc3 	bl	80010d4 <HAL_GetTick>
 800274e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002750:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fcb9 	bl	80010d4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e057      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800277c:	f7fe fcaa 	bl	80010d4 <HAL_GetTick>
 8002780:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_RCC_DeInit+0x184>)
 8002788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800278c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002790:	f7fe fca0 	bl	80010d4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e03e      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_RCC_DeInit+0x188>)
 80027b2:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80027b4:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_RCC_DeInit+0x18c>)
 80027b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80027c6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027da:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80027de:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ea:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_DeInit+0x184>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_DeInit+0x190>)
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <HAL_RCC_DeInit+0x194>)
 8002808:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_DeInit+0x198>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fc1c 	bl	800104c <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800281e:	2300      	movs	r3, #0
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	04003010 	.word	0x04003010
 8002830:	20003000 	.word	0x20003000
 8002834:	20000000 	.word	0x20000000
 8002838:	00f42400 	.word	0x00f42400
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e042      	b.n	80028d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fb54 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa09 	bl	8002c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d175      	bne.n	80029ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Transmit+0x2c>
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e06e      	b.n	80029ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2221      	movs	r2, #33	; 0x21
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800291e:	f7fe fbd9 	bl	80010d4 <HAL_GetTick>
 8002922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002938:	d108      	bne.n	800294c <HAL_UART_Transmit+0x6c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e003      	b.n	8002954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002954:	e02e      	b.n	80029b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f8df 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e03a      	b.n	80029ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10b      	bne.n	8002996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	3302      	adds	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e007      	b.n	80029a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	3301      	adds	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1cb      	bne.n	8002956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2140      	movs	r1, #64	; 0x40
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f8ab 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e006      	b.n	80029ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b08a      	sub	sp, #40	; 0x28
 80029fa:	af02      	add	r7, sp, #8
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 8081 	bne.w	8002b1a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Receive+0x2e>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e079      	b.n	8002b1c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	; 0x22
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fb4a 	bl	80010d4 <HAL_GetTick>
 8002a40:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	d108      	bne.n	8002a6a <HAL_UART_Receive+0x74>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e003      	b.n	8002a72 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a72:	e047      	b.n	8002b04 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f850 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e042      	b.n	8002b1c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e01f      	b.n	8002af6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d007      	beq.n	8002ad0 <HAL_UART_Receive+0xda>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_UART_Receive+0xe8>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1b2      	bne.n	8002a74 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b34:	e03b      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d037      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fac9 	bl	80010d4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e03a      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d023      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d020      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d01d      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d116      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f81d 	bl	8002bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d0b4      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b095      	sub	sp, #84	; 0x54
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bfe:	643a      	str	r2, [r7, #64]	; 0x40
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e5      	bne.n	8002bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e5      	bne.n	8002c12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d119      	bne.n	8002c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f023 0310 	bic.w	r3, r3, #16
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c6e:	61ba      	str	r2, [r7, #24]
 8002c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c90:	bf00      	nop
 8002c92:	3754      	adds	r7, #84	; 0x54
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca0:	b09f      	sub	sp, #124	; 0x7c
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb2:	68d9      	ldr	r1, [r3, #12]
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	ea40 0301 	orr.w	r3, r0, r1
 8002cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ce0:	f021 010c 	bic.w	r1, r1, #12
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cea:	430b      	orrs	r3, r1
 8002cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfa:	6999      	ldr	r1, [r3, #24]
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	ea40 0301 	orr.w	r3, r0, r1
 8002d04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4bc5      	ldr	r3, [pc, #788]	; (8003020 <UART_SetConfig+0x384>)
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d004      	beq.n	8002d1a <UART_SetConfig+0x7e>
 8002d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4bc3      	ldr	r3, [pc, #780]	; (8003024 <UART_SetConfig+0x388>)
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d103      	bne.n	8002d22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d1a:	f7ff fcaf 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002d1e:	6778      	str	r0, [r7, #116]	; 0x74
 8002d20:	e002      	b.n	8002d28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d22:	f7ff fc97 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002d26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	f040 80b6 	bne.w	8002ea0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d36:	461c      	mov	r4, r3
 8002d38:	f04f 0500 	mov.w	r5, #0
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	462b      	mov	r3, r5
 8002d40:	1891      	adds	r1, r2, r2
 8002d42:	6439      	str	r1, [r7, #64]	; 0x40
 8002d44:	415b      	adcs	r3, r3
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d4c:	1912      	adds	r2, r2, r4
 8002d4e:	eb45 0303 	adc.w	r3, r5, r3
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	00d9      	lsls	r1, r3, #3
 8002d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d60:	00d0      	lsls	r0, r2, #3
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	1911      	adds	r1, r2, r4
 8002d68:	6639      	str	r1, [r7, #96]	; 0x60
 8002d6a:	416b      	adcs	r3, r5
 8002d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d88:	f7fd fab6 	bl	80002f8 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4ba5      	ldr	r3, [pc, #660]	; (8003028 <UART_SetConfig+0x38c>)
 8002d92:	fba3 2302 	umull	r2, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	011e      	lsls	r6, r3, #4
 8002d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	f04f 0500 	mov.w	r5, #0
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	1891      	adds	r1, r2, r2
 8002da8:	6339      	str	r1, [r7, #48]	; 0x30
 8002daa:	415b      	adcs	r3, r3
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
 8002dae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002db2:	1912      	adds	r2, r2, r4
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	00d9      	lsls	r1, r3, #3
 8002dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dc6:	00d0      	lsls	r0, r2, #3
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	1911      	adds	r1, r2, r4
 8002dce:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd0:	416b      	adcs	r3, r5
 8002dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002de2:	415b      	adcs	r3, r3
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dee:	f7fd fa83 	bl	80002f8 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <UART_SetConfig+0x38c>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a87      	ldr	r2, [pc, #540]	; (8003028 <UART_SetConfig+0x38c>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e18:	441e      	add	r6, r3
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	1894      	adds	r4, r2, r2
 8002e28:	623c      	str	r4, [r7, #32]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e32:	1812      	adds	r2, r2, r0
 8002e34:	eb41 0303 	adc.w	r3, r1, r3
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	f04f 0500 	mov.w	r5, #0
 8002e40:	00dd      	lsls	r5, r3, #3
 8002e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e46:	00d4      	lsls	r4, r2, #3
 8002e48:	4622      	mov	r2, r4
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	1814      	adds	r4, r2, r0
 8002e4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002e50:	414b      	adcs	r3, r1
 8002e52:	657b      	str	r3, [r7, #84]	; 0x54
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	1891      	adds	r1, r2, r2
 8002e60:	61b9      	str	r1, [r7, #24]
 8002e62:	415b      	adcs	r3, r3
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e6e:	f7fd fa43 	bl	80002f8 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <UART_SetConfig+0x38c>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a67      	ldr	r2, [pc, #412]	; (8003028 <UART_SetConfig+0x38c>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4432      	add	r2, r6
 8002e9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e9e:	e0b9      	b.n	8003014 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea2:	461c      	mov	r4, r3
 8002ea4:	f04f 0500 	mov.w	r5, #0
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	462b      	mov	r3, r5
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	6139      	str	r1, [r7, #16]
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eb8:	1912      	adds	r2, r2, r4
 8002eba:	eb45 0303 	adc.w	r3, r5, r3
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	00d9      	lsls	r1, r3, #3
 8002ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ecc:	00d0      	lsls	r0, r2, #3
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	eb12 0804 	adds.w	r8, r2, r4
 8002ed6:	eb43 0905 	adc.w	r9, r3, r5
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef2:	0082      	lsls	r2, r0, #2
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	f7fd f9fe 	bl	80002f8 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4b49      	ldr	r3, [pc, #292]	; (8003028 <UART_SetConfig+0x38c>)
 8002f02:	fba3 2302 	umull	r2, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	011e      	lsls	r6, r3, #4
 8002f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	1894      	adds	r4, r2, r2
 8002f18:	60bc      	str	r4, [r7, #8]
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f22:	1812      	adds	r2, r2, r0
 8002f24:	eb41 0303 	adc.w	r3, r1, r3
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	f04f 0500 	mov.w	r5, #0
 8002f30:	00dd      	lsls	r5, r3, #3
 8002f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f36:	00d4      	lsls	r4, r2, #3
 8002f38:	4622      	mov	r2, r4
 8002f3a:	462b      	mov	r3, r5
 8002f3c:	1814      	adds	r4, r2, r0
 8002f3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f40:	414b      	adcs	r3, r1
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	008b      	lsls	r3, r1, #2
 8002f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f5c:	0082      	lsls	r2, r0, #2
 8002f5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f62:	f7fd f9c9 	bl	80002f8 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <UART_SetConfig+0x38c>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	3332      	adds	r3, #50	; 0x32
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <UART_SetConfig+0x38c>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8a:	441e      	add	r6, r3
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	1894      	adds	r4, r2, r2
 8002f9a:	603c      	str	r4, [r7, #0]
 8002f9c:	415b      	adcs	r3, r3
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fa4:	1812      	adds	r2, r2, r0
 8002fa6:	eb41 0303 	adc.w	r3, r1, r3
 8002faa:	f04f 0400 	mov.w	r4, #0
 8002fae:	f04f 0500 	mov.w	r5, #0
 8002fb2:	00dd      	lsls	r5, r3, #3
 8002fb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fb8:	00d4      	lsls	r4, r2, #3
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	eb12 0a00 	adds.w	sl, r2, r0
 8002fc2:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fde:	0082      	lsls	r2, r0, #2
 8002fe0:	4650      	mov	r0, sl
 8002fe2:	4659      	mov	r1, fp
 8002fe4:	f7fd f988 	bl	80002f8 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <UART_SetConfig+0x38c>)
 8002fee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2164      	movs	r1, #100	; 0x64
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	3332      	adds	r3, #50	; 0x32
 8003000:	4a09      	ldr	r2, [pc, #36]	; (8003028 <UART_SetConfig+0x38c>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4432      	add	r2, r6
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	377c      	adds	r7, #124	; 0x7c
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	51eb851f 	.word	0x51eb851f

0800302c <_init>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr

08003038 <_fini>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr
