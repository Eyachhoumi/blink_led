
Blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800b31c  0800b31c  0000b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b584  0800b584  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b584  0800b584  0000b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b58c  0800b58c  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b58c  0800b58c  0000b58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b590  0800b590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b594  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          000002bc  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000080d4  00000000  00000000  000100db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001876  00000000  00000000  000181af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007a8  00000000  00000000  00019a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005bc  00000000  00000000  0001a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002166e  00000000  00000000  0001a78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000094a2  00000000  00000000  0003bdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4681  00000000  00000000  0004529c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002584  00000000  00000000  00109920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0010bea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000068 	.word	0x20000068
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800b304 	.word	0x0800b304

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	2000006c 	.word	0x2000006c
 80081cc:	0800b304 	.word	0x0800b304

080081d0 <strlen>:
 80081d0:	4603      	mov	r3, r0
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1fb      	bne.n	80081d2 <strlen+0x2>
 80081da:	1a18      	subs	r0, r3, r0
 80081dc:	3801      	subs	r0, #1
 80081de:	4770      	bx	lr

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008294:	f000 b970 	b.w	8008578 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9e08      	ldr	r6, [sp, #32]
 80082b6:	460d      	mov	r5, r1
 80082b8:	4604      	mov	r4, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d14a      	bne.n	8008356 <__udivmoddi4+0xa6>
 80082c0:	428a      	cmp	r2, r1
 80082c2:	4694      	mov	ip, r2
 80082c4:	d965      	bls.n	8008392 <__udivmoddi4+0xe2>
 80082c6:	fab2 f382 	clz	r3, r2
 80082ca:	b143      	cbz	r3, 80082de <__udivmoddi4+0x2e>
 80082cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80082d0:	f1c3 0220 	rsb	r2, r3, #32
 80082d4:	409f      	lsls	r7, r3
 80082d6:	fa20 f202 	lsr.w	r2, r0, r2
 80082da:	4317      	orrs	r7, r2
 80082dc:	409c      	lsls	r4, r3
 80082de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80082e2:	fa1f f58c 	uxth.w	r5, ip
 80082e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80082ea:	0c22      	lsrs	r2, r4, #16
 80082ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80082f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80082f4:	fb01 f005 	mul.w	r0, r1, r5
 80082f8:	4290      	cmp	r0, r2
 80082fa:	d90a      	bls.n	8008312 <__udivmoddi4+0x62>
 80082fc:	eb1c 0202 	adds.w	r2, ip, r2
 8008300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8008304:	f080 811c 	bcs.w	8008540 <__udivmoddi4+0x290>
 8008308:	4290      	cmp	r0, r2
 800830a:	f240 8119 	bls.w	8008540 <__udivmoddi4+0x290>
 800830e:	3902      	subs	r1, #2
 8008310:	4462      	add	r2, ip
 8008312:	1a12      	subs	r2, r2, r0
 8008314:	b2a4      	uxth	r4, r4
 8008316:	fbb2 f0fe 	udiv	r0, r2, lr
 800831a:	fb0e 2210 	mls	r2, lr, r0, r2
 800831e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008322:	fb00 f505 	mul.w	r5, r0, r5
 8008326:	42a5      	cmp	r5, r4
 8008328:	d90a      	bls.n	8008340 <__udivmoddi4+0x90>
 800832a:	eb1c 0404 	adds.w	r4, ip, r4
 800832e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008332:	f080 8107 	bcs.w	8008544 <__udivmoddi4+0x294>
 8008336:	42a5      	cmp	r5, r4
 8008338:	f240 8104 	bls.w	8008544 <__udivmoddi4+0x294>
 800833c:	4464      	add	r4, ip
 800833e:	3802      	subs	r0, #2
 8008340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008344:	1b64      	subs	r4, r4, r5
 8008346:	2100      	movs	r1, #0
 8008348:	b11e      	cbz	r6, 8008352 <__udivmoddi4+0xa2>
 800834a:	40dc      	lsrs	r4, r3
 800834c:	2300      	movs	r3, #0
 800834e:	e9c6 4300 	strd	r4, r3, [r6]
 8008352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008356:	428b      	cmp	r3, r1
 8008358:	d908      	bls.n	800836c <__udivmoddi4+0xbc>
 800835a:	2e00      	cmp	r6, #0
 800835c:	f000 80ed 	beq.w	800853a <__udivmoddi4+0x28a>
 8008360:	2100      	movs	r1, #0
 8008362:	e9c6 0500 	strd	r0, r5, [r6]
 8008366:	4608      	mov	r0, r1
 8008368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836c:	fab3 f183 	clz	r1, r3
 8008370:	2900      	cmp	r1, #0
 8008372:	d149      	bne.n	8008408 <__udivmoddi4+0x158>
 8008374:	42ab      	cmp	r3, r5
 8008376:	d302      	bcc.n	800837e <__udivmoddi4+0xce>
 8008378:	4282      	cmp	r2, r0
 800837a:	f200 80f8 	bhi.w	800856e <__udivmoddi4+0x2be>
 800837e:	1a84      	subs	r4, r0, r2
 8008380:	eb65 0203 	sbc.w	r2, r5, r3
 8008384:	2001      	movs	r0, #1
 8008386:	4617      	mov	r7, r2
 8008388:	2e00      	cmp	r6, #0
 800838a:	d0e2      	beq.n	8008352 <__udivmoddi4+0xa2>
 800838c:	e9c6 4700 	strd	r4, r7, [r6]
 8008390:	e7df      	b.n	8008352 <__udivmoddi4+0xa2>
 8008392:	b902      	cbnz	r2, 8008396 <__udivmoddi4+0xe6>
 8008394:	deff      	udf	#255	; 0xff
 8008396:	fab2 f382 	clz	r3, r2
 800839a:	2b00      	cmp	r3, #0
 800839c:	f040 8090 	bne.w	80084c0 <__udivmoddi4+0x210>
 80083a0:	1a8a      	subs	r2, r1, r2
 80083a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083a6:	fa1f fe8c 	uxth.w	lr, ip
 80083aa:	2101      	movs	r1, #1
 80083ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80083b0:	fb07 2015 	mls	r0, r7, r5, r2
 80083b4:	0c22      	lsrs	r2, r4, #16
 80083b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80083ba:	fb0e f005 	mul.w	r0, lr, r5
 80083be:	4290      	cmp	r0, r2
 80083c0:	d908      	bls.n	80083d4 <__udivmoddi4+0x124>
 80083c2:	eb1c 0202 	adds.w	r2, ip, r2
 80083c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80083ca:	d202      	bcs.n	80083d2 <__udivmoddi4+0x122>
 80083cc:	4290      	cmp	r0, r2
 80083ce:	f200 80cb 	bhi.w	8008568 <__udivmoddi4+0x2b8>
 80083d2:	4645      	mov	r5, r8
 80083d4:	1a12      	subs	r2, r2, r0
 80083d6:	b2a4      	uxth	r4, r4
 80083d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80083dc:	fb07 2210 	mls	r2, r7, r0, r2
 80083e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80083e4:	fb0e fe00 	mul.w	lr, lr, r0
 80083e8:	45a6      	cmp	lr, r4
 80083ea:	d908      	bls.n	80083fe <__udivmoddi4+0x14e>
 80083ec:	eb1c 0404 	adds.w	r4, ip, r4
 80083f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80083f4:	d202      	bcs.n	80083fc <__udivmoddi4+0x14c>
 80083f6:	45a6      	cmp	lr, r4
 80083f8:	f200 80bb 	bhi.w	8008572 <__udivmoddi4+0x2c2>
 80083fc:	4610      	mov	r0, r2
 80083fe:	eba4 040e 	sub.w	r4, r4, lr
 8008402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8008406:	e79f      	b.n	8008348 <__udivmoddi4+0x98>
 8008408:	f1c1 0720 	rsb	r7, r1, #32
 800840c:	408b      	lsls	r3, r1
 800840e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008412:	ea4c 0c03 	orr.w	ip, ip, r3
 8008416:	fa05 f401 	lsl.w	r4, r5, r1
 800841a:	fa20 f307 	lsr.w	r3, r0, r7
 800841e:	40fd      	lsrs	r5, r7
 8008420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008424:	4323      	orrs	r3, r4
 8008426:	fbb5 f8f9 	udiv	r8, r5, r9
 800842a:	fa1f fe8c 	uxth.w	lr, ip
 800842e:	fb09 5518 	mls	r5, r9, r8, r5
 8008432:	0c1c      	lsrs	r4, r3, #16
 8008434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008438:	fb08 f50e 	mul.w	r5, r8, lr
 800843c:	42a5      	cmp	r5, r4
 800843e:	fa02 f201 	lsl.w	r2, r2, r1
 8008442:	fa00 f001 	lsl.w	r0, r0, r1
 8008446:	d90b      	bls.n	8008460 <__udivmoddi4+0x1b0>
 8008448:	eb1c 0404 	adds.w	r4, ip, r4
 800844c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008450:	f080 8088 	bcs.w	8008564 <__udivmoddi4+0x2b4>
 8008454:	42a5      	cmp	r5, r4
 8008456:	f240 8085 	bls.w	8008564 <__udivmoddi4+0x2b4>
 800845a:	f1a8 0802 	sub.w	r8, r8, #2
 800845e:	4464      	add	r4, ip
 8008460:	1b64      	subs	r4, r4, r5
 8008462:	b29d      	uxth	r5, r3
 8008464:	fbb4 f3f9 	udiv	r3, r4, r9
 8008468:	fb09 4413 	mls	r4, r9, r3, r4
 800846c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008470:	fb03 fe0e 	mul.w	lr, r3, lr
 8008474:	45a6      	cmp	lr, r4
 8008476:	d908      	bls.n	800848a <__udivmoddi4+0x1da>
 8008478:	eb1c 0404 	adds.w	r4, ip, r4
 800847c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008480:	d26c      	bcs.n	800855c <__udivmoddi4+0x2ac>
 8008482:	45a6      	cmp	lr, r4
 8008484:	d96a      	bls.n	800855c <__udivmoddi4+0x2ac>
 8008486:	3b02      	subs	r3, #2
 8008488:	4464      	add	r4, ip
 800848a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800848e:	fba3 9502 	umull	r9, r5, r3, r2
 8008492:	eba4 040e 	sub.w	r4, r4, lr
 8008496:	42ac      	cmp	r4, r5
 8008498:	46c8      	mov	r8, r9
 800849a:	46ae      	mov	lr, r5
 800849c:	d356      	bcc.n	800854c <__udivmoddi4+0x29c>
 800849e:	d053      	beq.n	8008548 <__udivmoddi4+0x298>
 80084a0:	b156      	cbz	r6, 80084b8 <__udivmoddi4+0x208>
 80084a2:	ebb0 0208 	subs.w	r2, r0, r8
 80084a6:	eb64 040e 	sbc.w	r4, r4, lr
 80084aa:	fa04 f707 	lsl.w	r7, r4, r7
 80084ae:	40ca      	lsrs	r2, r1
 80084b0:	40cc      	lsrs	r4, r1
 80084b2:	4317      	orrs	r7, r2
 80084b4:	e9c6 7400 	strd	r7, r4, [r6]
 80084b8:	4618      	mov	r0, r3
 80084ba:	2100      	movs	r1, #0
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c0:	f1c3 0120 	rsb	r1, r3, #32
 80084c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80084c8:	fa20 f201 	lsr.w	r2, r0, r1
 80084cc:	fa25 f101 	lsr.w	r1, r5, r1
 80084d0:	409d      	lsls	r5, r3
 80084d2:	432a      	orrs	r2, r5
 80084d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084d8:	fa1f fe8c 	uxth.w	lr, ip
 80084dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80084e0:	fb07 1510 	mls	r5, r7, r0, r1
 80084e4:	0c11      	lsrs	r1, r2, #16
 80084e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80084ea:	fb00 f50e 	mul.w	r5, r0, lr
 80084ee:	428d      	cmp	r5, r1
 80084f0:	fa04 f403 	lsl.w	r4, r4, r3
 80084f4:	d908      	bls.n	8008508 <__udivmoddi4+0x258>
 80084f6:	eb1c 0101 	adds.w	r1, ip, r1
 80084fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80084fe:	d22f      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008500:	428d      	cmp	r5, r1
 8008502:	d92d      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008504:	3802      	subs	r0, #2
 8008506:	4461      	add	r1, ip
 8008508:	1b49      	subs	r1, r1, r5
 800850a:	b292      	uxth	r2, r2
 800850c:	fbb1 f5f7 	udiv	r5, r1, r7
 8008510:	fb07 1115 	mls	r1, r7, r5, r1
 8008514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008518:	fb05 f10e 	mul.w	r1, r5, lr
 800851c:	4291      	cmp	r1, r2
 800851e:	d908      	bls.n	8008532 <__udivmoddi4+0x282>
 8008520:	eb1c 0202 	adds.w	r2, ip, r2
 8008524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008528:	d216      	bcs.n	8008558 <__udivmoddi4+0x2a8>
 800852a:	4291      	cmp	r1, r2
 800852c:	d914      	bls.n	8008558 <__udivmoddi4+0x2a8>
 800852e:	3d02      	subs	r5, #2
 8008530:	4462      	add	r2, ip
 8008532:	1a52      	subs	r2, r2, r1
 8008534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008538:	e738      	b.n	80083ac <__udivmoddi4+0xfc>
 800853a:	4631      	mov	r1, r6
 800853c:	4630      	mov	r0, r6
 800853e:	e708      	b.n	8008352 <__udivmoddi4+0xa2>
 8008540:	4639      	mov	r1, r7
 8008542:	e6e6      	b.n	8008312 <__udivmoddi4+0x62>
 8008544:	4610      	mov	r0, r2
 8008546:	e6fb      	b.n	8008340 <__udivmoddi4+0x90>
 8008548:	4548      	cmp	r0, r9
 800854a:	d2a9      	bcs.n	80084a0 <__udivmoddi4+0x1f0>
 800854c:	ebb9 0802 	subs.w	r8, r9, r2
 8008550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008554:	3b01      	subs	r3, #1
 8008556:	e7a3      	b.n	80084a0 <__udivmoddi4+0x1f0>
 8008558:	4645      	mov	r5, r8
 800855a:	e7ea      	b.n	8008532 <__udivmoddi4+0x282>
 800855c:	462b      	mov	r3, r5
 800855e:	e794      	b.n	800848a <__udivmoddi4+0x1da>
 8008560:	4640      	mov	r0, r8
 8008562:	e7d1      	b.n	8008508 <__udivmoddi4+0x258>
 8008564:	46d0      	mov	r8, sl
 8008566:	e77b      	b.n	8008460 <__udivmoddi4+0x1b0>
 8008568:	3d02      	subs	r5, #2
 800856a:	4462      	add	r2, ip
 800856c:	e732      	b.n	80083d4 <__udivmoddi4+0x124>
 800856e:	4608      	mov	r0, r1
 8008570:	e70a      	b.n	8008388 <__udivmoddi4+0xd8>
 8008572:	4464      	add	r4, ip
 8008574:	3802      	subs	r0, #2
 8008576:	e742      	b.n	80083fe <__udivmoddi4+0x14e>

08008578 <__aeabi_idiv0>:
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop

0800857c <base64_decoded_size>:
#include <stdlib.h>

static const char base64_chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

// Calcule la taille de sortie pour le décodage base64
size_t base64_decoded_size(size_t input_length) {
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
    // Chaque 4 caractères base64 encode 3 octets de données binaires
    return (input_length / 4) * 3;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	089a      	lsrs	r2, r3, #2
 8008588:	4613      	mov	r3, r2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	4413      	add	r3, r2
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <base64_index>:

// Recherche l'index d'un caractère base64 dans base64_chars
static int base64_index(char c) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	71fb      	strb	r3, [r7, #7]
    const char *ptr = strchr(base64_chars, c);
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	4619      	mov	r1, r3
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <base64_index+0x30>)
 80085ac:	f002 f9b4 	bl	800a918 <strchr>
 80085b0:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) return -1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <base64_index+0x22>
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085bc:	e002      	b.n	80085c4 <base64_index+0x28>
    return ptr - base64_chars;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	4a02      	ldr	r2, [pc, #8]	; (80085cc <base64_index+0x30>)
 80085c2:	1a9b      	subs	r3, r3, r2
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	0800b4f4 	.word	0x0800b4f4

080085d0 <base64_decode>:

// Décode les données base64 en binaire
int base64_decode(uint8_t *output, const char *input) {
 80085d0:	b590      	push	{r4, r7, lr}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
    size_t input_length = strlen(input);
 80085da:	6838      	ldr	r0, [r7, #0]
 80085dc:	f7ff fdf8 	bl	80081d0 <strlen>
 80085e0:	6178      	str	r0, [r7, #20]
    size_t output_length = base64_decoded_size(input_length);
 80085e2:	6978      	ldr	r0, [r7, #20]
 80085e4:	f7ff ffca 	bl	800857c <base64_decoded_size>
 80085e8:	6138      	str	r0, [r7, #16]

    int i, j;
    int v;
    uint32_t t;

    for (i = 0, j = 0; i < input_length; i += 4, j += 3) {
 80085ea:	2300      	movs	r3, #0
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	e053      	b.n	800869c <base64_decode+0xcc>
        t = (base64_index(input[i]) << 18) | (base64_index(input[i + 1]) << 12) |
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	4413      	add	r3, r2
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ffcd 	bl	800859c <base64_index>
 8008602:	4603      	mov	r3, r0
 8008604:	049c      	lsls	r4, r3, #18
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ffc3 	bl	800859c <base64_index>
 8008616:	4603      	mov	r3, r0
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	431c      	orrs	r4, r3
            (base64_index(input[i + 2]) << 6) | base64_index(input[i + 3]);
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3302      	adds	r3, #2
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	4413      	add	r3, r2
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff ffb8 	bl	800859c <base64_index>
 800862c:	4603      	mov	r3, r0
 800862e:	019b      	lsls	r3, r3, #6
        t = (base64_index(input[i]) << 18) | (base64_index(input[i + 1]) << 12) |
 8008630:	431c      	orrs	r4, r3
            (base64_index(input[i + 2]) << 6) | base64_index(input[i + 3]);
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	3303      	adds	r3, #3
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4413      	add	r3, r2
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff ffad 	bl	800859c <base64_index>
 8008642:	4603      	mov	r3, r0
 8008644:	4323      	orrs	r3, r4
        t = (base64_index(input[i]) << 18) | (base64_index(input[i + 1]) << 12) |
 8008646:	60fb      	str	r3, [r7, #12]
        output[j] = (t >> 16) & 0xFF;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0c19      	lsrs	r1, r3, #16
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	4413      	add	r3, r2
 8008652:	b2ca      	uxtb	r2, r1
 8008654:	701a      	strb	r2, [r3, #0]
        if (input[i + 2] != '=')
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3302      	adds	r3, #2
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	4413      	add	r3, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b3d      	cmp	r3, #61	; 0x3d
 8008662:	d007      	beq.n	8008674 <base64_decode+0xa4>
            output[j + 1] = (t >> 8) & 0xFF;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	0a19      	lsrs	r1, r3, #8
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	3301      	adds	r3, #1
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4413      	add	r3, r2
 8008670:	b2ca      	uxtb	r2, r1
 8008672:	701a      	strb	r2, [r3, #0]
        if (input[i + 3] != '=')
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	3303      	adds	r3, #3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	4413      	add	r3, r2
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b3d      	cmp	r3, #61	; 0x3d
 8008680:	d006      	beq.n	8008690 <base64_decode+0xc0>
            output[j + 2] = t & 0xFF;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	3302      	adds	r3, #2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < input_length; i += 4, j += 3) {
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	3304      	adds	r3, #4
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	3303      	adds	r3, #3
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d8a7      	bhi.n	80085f4 <base64_decode+0x24>
    }

    return output_length;
 80086a4:	693b      	ldr	r3, [r7, #16]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3724      	adds	r7, #36	; 0x24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
	...

080086b0 <wifi_setup>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static MQTTClient mqtt_client;

void wifi_setup() {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
    // Initialisation et connexion au WiFi
    wifi_init(WIFI_SSID, WIFI_PASSWORD);
 80086b4:	4903      	ldr	r1, [pc, #12]	; (80086c4 <wifi_setup+0x14>)
 80086b6:	4804      	ldr	r0, [pc, #16]	; (80086c8 <wifi_setup+0x18>)
 80086b8:	f000 fb5e 	bl	8008d78 <wifi_init>
    wifi_connect();
 80086bc:	f000 fb7c 	bl	8008db8 <wifi_connect>
}
 80086c0:	bf00      	nop
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	0800b31c 	.word	0x0800b31c
 80086c8:	0800b328 	.word	0x0800b328

080086cc <mqtt_setup>:

void mqtt_setup() {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
    // Initialisation du client MQTT
    mqtt_init(&mqtt_client, MQTT_BROKER, MQTT_PORT);
 80086d0:	f240 725b 	movw	r2, #1883	; 0x75b
 80086d4:	4906      	ldr	r1, [pc, #24]	; (80086f0 <mqtt_setup+0x24>)
 80086d6:	4807      	ldr	r0, [pc, #28]	; (80086f4 <mqtt_setup+0x28>)
 80086d8:	f000 f9b2 	bl	8008a40 <mqtt_init>
    mqtt_connect(&mqtt_client);
 80086dc:	4805      	ldr	r0, [pc, #20]	; (80086f4 <mqtt_setup+0x28>)
 80086de:	f000 f9d3 	bl	8008a88 <mqtt_connect>

    // Abonnement à un sujet MQTT pour recevoir des messages
    mqtt_subscribe(&mqtt_client, MQTT_TOPIC, mqtt_message_callback);
 80086e2:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <mqtt_setup+0x2c>)
 80086e4:	4905      	ldr	r1, [pc, #20]	; (80086fc <mqtt_setup+0x30>)
 80086e6:	4803      	ldr	r0, [pc, #12]	; (80086f4 <mqtt_setup+0x28>)
 80086e8:	f000 f9e6 	bl	8008ab8 <mqtt_subscribe>
}
 80086ec:	bf00      	nop
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	0800b330 	.word	0x0800b330
 80086f4:	200000cc 	.word	0x200000cc
 80086f8:	08008701 	.word	0x08008701
 80086fc:	0800b344 	.word	0x0800b344

08008700 <mqtt_message_callback>:

void mqtt_message_callback(char *topic, uint8_t *payload, uint32_t length) {
 8008700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008704:	b089      	sub	sp, #36	; 0x24
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	466b      	mov	r3, sp
 8008710:	461e      	mov	r6, r3
    // Callback appelée lorsqu'un message MQTT est reçu
    // Vous pouvez implémenter ici votre logique de traitement des messages reçus
    printf("Received MQTT message on topic '%s': %.*s\n", topic, (int)length, (char *)payload);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	4818      	ldr	r0, [pc, #96]	; (800877c <mqtt_message_callback+0x7c>)
 800871a:	f001 ffaf 	bl	800a67c <iprintf>
    // Exemple : décodage base64 si nécessaire
    uint8_t bin_data[length];
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	3b01      	subs	r3, #1
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	2300      	movs	r3, #0
 8008728:	4688      	mov	r8, r1
 800872a:	4699      	mov	r9, r3
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800873c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008740:	2300      	movs	r3, #0
 8008742:	460c      	mov	r4, r1
 8008744:	461d      	mov	r5, r3
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	00eb      	lsls	r3, r5, #3
 8008750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008754:	00e2      	lsls	r2, r4, #3
 8008756:	1dcb      	adds	r3, r1, #7
 8008758:	08db      	lsrs	r3, r3, #3
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	ebad 0d03 	sub.w	sp, sp, r3
 8008760:	466b      	mov	r3, sp
 8008762:	3300      	adds	r3, #0
 8008764:	61bb      	str	r3, [r7, #24]
    int bin_size = base64_decode(bin_data, (char *) payload);
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	69b8      	ldr	r0, [r7, #24]
 800876a:	f7ff ff31 	bl	80085d0 <base64_decode>
 800876e:	6178      	str	r0, [r7, #20]
 8008770:	46b5      	mov	sp, r6
    // Utilisez les données binaires ici
}
 8008772:	bf00      	nop
 8008774:	3724      	adds	r7, #36	; 0x24
 8008776:	46bd      	mov	sp, r7
 8008778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877c:	0800b35c 	.word	0x0800b35c

08008780 <decode_base64_data>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void decode_base64_data(char *base64_data) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    // Allouer de la mémoire pour les données décodées
    size_t base64_len = strlen(base64_data);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff fd21 	bl	80081d0 <strlen>
 800878e:	6178      	str	r0, [r7, #20]
    size_t bin_size = base64_decoded_size(base64_len);
 8008790:	6978      	ldr	r0, [r7, #20]
 8008792:	f7ff fef3 	bl	800857c <base64_decoded_size>
 8008796:	6138      	str	r0, [r7, #16]
    uint8_t *bin_data = malloc(bin_size);
 8008798:	6938      	ldr	r0, [r7, #16]
 800879a:	f001 fdf1 	bl	800a380 <malloc>
 800879e:	4603      	mov	r3, r0
 80087a0:	60fb      	str	r3, [r7, #12]
    if (bin_data == NULL) {
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00f      	beq.n	80087c8 <decode_base64_data+0x48>
        // Gestion des erreurs de mémoire
        return;
    }

    // Décodez les données base64 en binaire
    int result = base64_decode(bin_data, base64_data);
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff ff10 	bl	80085d0 <base64_decode>
 80087b0:	60b8      	str	r0, [r7, #8]
    if (result < 0) {
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da03      	bge.n	80087c0 <decode_base64_data+0x40>
        // Gestion des erreurs de décodage
        free(bin_data);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f001 fde9 	bl	800a390 <free>
        return;
 80087be:	e004      	b.n	80087ca <decode_base64_data+0x4a>
    }

    // Utilisez les données binaires décodées ici

    // Libérez la mémoire allouée
    free(bin_data);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fde5 	bl	800a390 <free>
 80087c6:	e000      	b.n	80087ca <decode_base64_data+0x4a>
        return;
 80087c8:	bf00      	nop
}
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <receive_base64_data>:

// Exemple de réception de données base64 (simulation)
void receive_base64_data(char *base64_data) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
    // Supposons que base64_data est reçu via MQTT
    decode_base64_data(base64_data);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ffd1 	bl	8008780 <decode_base64_data>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80087f0:	f000 fb1e 	bl	8008e30 <HAL_Init>
  wifi_setup();
 80087f4:	f7ff ff5c 	bl	80086b0 <wifi_setup>
    mqtt_setup();
 80087f8:	f7ff ff68 	bl	80086cc <mqtt_setup>
  // Simulation de réception de données base64

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80087fc:	f000 f832 	bl	8008864 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008800:	f000 f8c4 	bl	800898c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008804:	f000 f898 	bl	8008938 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
     	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8008808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800880c:	4813      	ldr	r0, [pc, #76]	; (800885c <main+0x74>)
 800880e:	f000 fe40 	bl	8009492 <HAL_GPIO_TogglePin>

     	    	      	HAL_Delay(5000);
 8008812:	f241 3088 	movw	r0, #5000	; 0x1388
 8008816:	f000 fb7d 	bl	8008f14 <HAL_Delay>
     	  char received_base64[MAX_BASE64_SIZE] = "SGVsbG8gV29ybGQ=";
 800881a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800881e:	f5a3 6680 	sub.w	r6, r3, #1024	; 0x400
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <main+0x78>)
 8008824:	4634      	mov	r4, r6
 8008826:	461d      	mov	r5, r3
 8008828:	6828      	ldr	r0, [r5, #0]
 800882a:	6869      	ldr	r1, [r5, #4]
 800882c:	68aa      	ldr	r2, [r5, #8]
 800882e:	68eb      	ldr	r3, [r5, #12]
 8008830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008832:	7c2b      	ldrb	r3, [r5, #16]
 8008834:	7023      	strb	r3, [r4, #0]
 8008836:	f106 0311 	add.w	r3, r6, #17
 800883a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f002 f861 	bl	800a908 <memset>
     	      receive_base64_data(received_base64);
 8008846:	463b      	mov	r3, r7
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ffc1 	bl	80087d0 <receive_base64_data>

     	      return 0;
 800884e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
}
 8008850:	4618      	mov	r0, r3
 8008852:	f207 4704 	addw	r7, r7, #1028	; 0x404
 8008856:	46bd      	mov	sp, r7
 8008858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885a:	bf00      	nop
 800885c:	40020c00 	.word	0x40020c00
 8008860:	0800b388 	.word	0x0800b388

08008864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b094      	sub	sp, #80	; 0x50
 8008868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800886a:	f107 0320 	add.w	r3, r7, #32
 800886e:	2230      	movs	r2, #48	; 0x30
 8008870:	2100      	movs	r1, #0
 8008872:	4618      	mov	r0, r3
 8008874:	f002 f848 	bl	800a908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008878:	f107 030c 	add.w	r3, r7, #12
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	609a      	str	r2, [r3, #8]
 8008884:	60da      	str	r2, [r3, #12]
 8008886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008888:	2300      	movs	r3, #0
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <SystemClock_Config+0xcc>)
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	4a27      	ldr	r2, [pc, #156]	; (8008930 <SystemClock_Config+0xcc>)
 8008892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008896:	6413      	str	r3, [r2, #64]	; 0x40
 8008898:	4b25      	ldr	r3, [pc, #148]	; (8008930 <SystemClock_Config+0xcc>)
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80088a4:	2300      	movs	r3, #0
 80088a6:	607b      	str	r3, [r7, #4]
 80088a8:	4b22      	ldr	r3, [pc, #136]	; (8008934 <SystemClock_Config+0xd0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a21      	ldr	r2, [pc, #132]	; (8008934 <SystemClock_Config+0xd0>)
 80088ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <SystemClock_Config+0xd0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088ca:	2302      	movs	r3, #2
 80088cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80088d4:	2308      	movs	r3, #8
 80088d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80088d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80088dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80088de:	2302      	movs	r3, #2
 80088e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80088e2:	2307      	movs	r3, #7
 80088e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088e6:	f107 0320 	add.w	r3, r7, #32
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fdec 	bl	80094c8 <HAL_RCC_OscConfig>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80088f6:	f000 f89b 	bl	8008a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088fa:	230f      	movs	r3, #15
 80088fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088fe:	2302      	movs	r3, #2
 8008900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800890a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800890c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	2105      	movs	r1, #5
 8008918:	4618      	mov	r0, r3
 800891a:	f001 f84d 	bl	80099b8 <HAL_RCC_ClockConfig>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008924:	f000 f884 	bl	8008a30 <Error_Handler>
  }
}
 8008928:	bf00      	nop
 800892a:	3750      	adds	r7, #80	; 0x50
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40023800 	.word	0x40023800
 8008934:	40007000 	.word	0x40007000

08008938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800893c:	4b11      	ldr	r3, [pc, #68]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 800893e:	4a12      	ldr	r2, [pc, #72]	; (8008988 <MX_USART2_UART_Init+0x50>)
 8008940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008942:	4b10      	ldr	r3, [pc, #64]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 8008944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 800894c:	2200      	movs	r2, #0
 800894e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 8008952:	2200      	movs	r2, #0
 8008954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 8008958:	2200      	movs	r2, #0
 800895a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 800895e:	220c      	movs	r2, #12
 8008960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 8008964:	2200      	movs	r2, #0
 8008966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 800896a:	2200      	movs	r2, #0
 800896c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800896e:	4805      	ldr	r0, [pc, #20]	; (8008984 <MX_USART2_UART_Init+0x4c>)
 8008970:	f001 fa42 	bl	8009df8 <HAL_UART_Init>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800897a:	f000 f859 	bl	8008a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800897e:	bf00      	nop
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000084 	.word	0x20000084
 8008988:	40004400 	.word	0x40004400

0800898c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008992:	f107 030c 	add.w	r3, r7, #12
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	605a      	str	r2, [r3, #4]
 800899c:	609a      	str	r2, [r3, #8]
 800899e:	60da      	str	r2, [r3, #12]
 80089a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80089a2:	2300      	movs	r3, #0
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b0:	6313      	str	r3, [r2, #48]	; 0x30
 80089b2:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	6313      	str	r3, [r2, #48]	; 0x30
 80089ce:	4b16      	ldr	r3, [pc, #88]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	607b      	str	r3, [r7, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80089da:	2300      	movs	r3, #0
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	4a11      	ldr	r2, [pc, #68]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089e4:	f043 0308 	orr.w	r3, r3, #8
 80089e8:	6313      	str	r3, [r2, #48]	; 0x30
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <MX_GPIO_Init+0x9c>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80089f6:	2200      	movs	r2, #0
 80089f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80089fc:	480b      	ldr	r0, [pc, #44]	; (8008a2c <MX_GPIO_Init+0xa0>)
 80089fe:	f000 fd2f 	bl	8009460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008a02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a14:	f107 030c 	add.w	r3, r7, #12
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4804      	ldr	r0, [pc, #16]	; (8008a2c <MX_GPIO_Init+0xa0>)
 8008a1c:	f000 fb84 	bl	8009128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008a20:	bf00      	nop
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40023800 	.word	0x40023800
 8008a2c:	40020c00 	.word	0x40020c00

08008a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <mqtt_init>:
#include <stdio.h>
#include <string.h>
#include "stm32f4xx_hal.h" // Assurez-vous d'inclure les bons headers STM32 HAL ici


void mqtt_init(MQTTClient *client, const char *broker_address, uint16_t port) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
    strncpy(client->broker_address, broker_address, sizeof(client->broker_address) - 1);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	227f      	movs	r2, #127	; 0x7f
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 ff6c 	bl	800a932 <strncpy>
    client->broker_address[sizeof(client->broker_address) - 1] = '\0';
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    client->port = port;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

    // Initialisation du client MQTT (hypothétique, à adapter)
    printf("Initializing MQTT client for broker: %s:%d\n", client->broker_address, client->port);
 8008a6a:	68f9      	ldr	r1, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008a72:	461a      	mov	r2, r3
 8008a74:	4803      	ldr	r0, [pc, #12]	; (8008a84 <mqtt_init+0x44>)
 8008a76:	f001 fe01 	bl	800a67c <iprintf>
    // Code de configuration MQTT réel ici
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	0800b39c 	.word	0x0800b39c

08008a88 <mqtt_connect>:

void mqtt_connect(MQTTClient *client) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    // Connexion au broker MQTT (hypothétique, à adapter)
    printf("Connecting to MQTT broker: %s:%d ...\n", client->broker_address, client->port);
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <mqtt_connect+0x28>)
 8008a9c:	f001 fdee 	bl	800a67c <iprintf>
    // Code de connexion MQTT réel ici
    printf("Connected to MQTT broker!\n");
 8008aa0:	4804      	ldr	r0, [pc, #16]	; (8008ab4 <mqtt_connect+0x2c>)
 8008aa2:	f001 fe51 	bl	800a748 <puts>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	0800b3c8 	.word	0x0800b3c8
 8008ab4:	0800b3f0 	.word	0x0800b3f0

08008ab8 <mqtt_subscribe>:
    printf("Disconnecting from MQTT broker...\n");
    // Code de déconnexion MQTT réel ici
    printf("Disconnected from MQTT broker!\n");
}

void mqtt_subscribe(MQTTClient *client, const char *topic, void (*callback)(char *, uint8_t *, uint32_t)) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
    // Abonnement à un sujet MQTT (hypothétique, à adapter)
    printf("Subscribing to topic: %s\n", topic);
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <mqtt_subscribe+0x1c>)
 8008ac8:	f001 fdd8 	bl	800a67c <iprintf>
    // Code d'abonnement MQTT réel ici avec gestion du callback
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	0800b450 	.word	0x0800b450

08008ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ade:	2300      	movs	r3, #0
 8008ae0:	607b      	str	r3, [r7, #4]
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <HAL_MspInit+0x4c>)
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae6:	4a0f      	ldr	r2, [pc, #60]	; (8008b24 <HAL_MspInit+0x4c>)
 8008ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aec:	6453      	str	r3, [r2, #68]	; 0x44
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <HAL_MspInit+0x4c>)
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af6:	607b      	str	r3, [r7, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008afa:	2300      	movs	r3, #0
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <HAL_MspInit+0x4c>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <HAL_MspInit+0x4c>)
 8008b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b08:	6413      	str	r3, [r2, #64]	; 0x40
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <HAL_MspInit+0x4c>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008b16:	2007      	movs	r0, #7
 8008b18:	f000 fad2 	bl	80090c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	40023800 	.word	0x40023800

08008b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <HAL_UART_MspInit+0x84>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d12b      	bne.n	8008ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	4b18      	ldr	r3, [pc, #96]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b58:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5a:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b70:	f043 0301 	orr.w	r3, r3, #1
 8008b74:	6313      	str	r3, [r2, #48]	; 0x30
 8008b76:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <HAL_UART_MspInit+0x88>)
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008b82:	230c      	movs	r3, #12
 8008b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b86:	2302      	movs	r3, #2
 8008b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b92:	2307      	movs	r3, #7
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b96:	f107 0314 	add.w	r3, r7, #20
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4805      	ldr	r0, [pc, #20]	; (8008bb4 <HAL_UART_MspInit+0x8c>)
 8008b9e:	f000 fac3 	bl	8009128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008ba2:	bf00      	nop
 8008ba4:	3728      	adds	r7, #40	; 0x28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40004400 	.word	0x40004400
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	40020000 	.word	0x40020000

08008bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008bbc:	e7fe      	b.n	8008bbc <NMI_Handler+0x4>

08008bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bc2:	e7fe      	b.n	8008bc2 <HardFault_Handler+0x4>

08008bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bc8:	e7fe      	b.n	8008bc8 <MemManage_Handler+0x4>

08008bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bce:	e7fe      	b.n	8008bce <BusFault_Handler+0x4>

08008bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bd4:	e7fe      	b.n	8008bd4 <UsageFault_Handler+0x4>

08008bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bda:	bf00      	nop
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008be8:	bf00      	nop
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c04:	f000 f966 	bl	8008ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c08:	bf00      	nop
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e00a      	b.n	8008c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c1e:	f3af 8000 	nop.w
 8008c22:	4601      	mov	r1, r0
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	60ba      	str	r2, [r7, #8]
 8008c2a:	b2ca      	uxtb	r2, r1
 8008c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	dbf0      	blt.n	8008c1e <_read+0x12>
  }

  return len;
 8008c3c:	687b      	ldr	r3, [r7, #4]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e009      	b.n	8008c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	60ba      	str	r2, [r7, #8]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	dbf1      	blt.n	8008c58 <_write+0x12>
  }
  return len;
 8008c74:	687b      	ldr	r3, [r7, #4]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <_close>:

int _close(int file)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <_isatty>:

int _isatty(int file)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cbe:	2301      	movs	r3, #1
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cf0:	4a14      	ldr	r2, [pc, #80]	; (8008d44 <_sbrk+0x5c>)
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <_sbrk+0x60>)
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cfc:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <_sbrk+0x64>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d04:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <_sbrk+0x64>)
 8008d06:	4a12      	ldr	r2, [pc, #72]	; (8008d50 <_sbrk+0x68>)
 8008d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <_sbrk+0x64>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d207      	bcs.n	8008d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d18:	f001 fe74 	bl	800aa04 <__errno>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	220c      	movs	r2, #12
 8008d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d26:	e009      	b.n	8008d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <_sbrk+0x64>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <_sbrk+0x64>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	4a05      	ldr	r2, [pc, #20]	; (8008d4c <_sbrk+0x64>)
 8008d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20020000 	.word	0x20020000
 8008d48:	00000400 	.word	0x00000400
 8008d4c:	20000150 	.word	0x20000150
 8008d50:	20000328 	.word	0x20000328

08008d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <SystemInit+0x20>)
 8008d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5e:	4a05      	ldr	r2, [pc, #20]	; (8008d74 <SystemInit+0x20>)
 8008d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	e000ed00 	.word	0xe000ed00

08008d78 <wifi_init>:
#include "stm32f4xx_hal.h" // Assurez-vous d'inclure les bons headers STM32 HAL ici

static char wifi_ssid[64];
static char wifi_password[64];

void wifi_init(const char *ssid, const char *password) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
    strncpy(wifi_ssid, ssid, sizeof(wifi_ssid) - 1);
 8008d82:	223f      	movs	r2, #63	; 0x3f
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	480a      	ldr	r0, [pc, #40]	; (8008db0 <wifi_init+0x38>)
 8008d88:	f001 fdd3 	bl	800a932 <strncpy>
    wifi_ssid[sizeof(wifi_ssid) - 1] = '\0';
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <wifi_init+0x38>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

    strncpy(wifi_password, password, sizeof(wifi_password) - 1);
 8008d94:	223f      	movs	r2, #63	; 0x3f
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	4806      	ldr	r0, [pc, #24]	; (8008db4 <wifi_init+0x3c>)
 8008d9a:	f001 fdca 	bl	800a932 <strncpy>
    wifi_password[sizeof(wifi_password) - 1] = '\0';
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <wifi_init+0x3c>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000154 	.word	0x20000154
 8008db4:	20000194 	.word	0x20000194

08008db8 <wifi_connect>:

void wifi_connect() {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
    // Code de connexion WiFi avec ESP-01 (hypothétique, à adapter)
    printf("Connecting to WiFi SSID: %s ...\n", wifi_ssid);
 8008dbc:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <wifi_connect+0x18>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <wifi_connect+0x1c>)
 8008dc0:	f001 fc5c 	bl	800a67c <iprintf>
    // Ici, vous auriez le code réel pour initialiser et connecter l'ESP-01 au WiFi
    printf("Connected to WiFi!\n");
 8008dc4:	4804      	ldr	r0, [pc, #16]	; (8008dd8 <wifi_connect+0x20>)
 8008dc6:	f001 fcbf 	bl	800a748 <puts>
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000154 	.word	0x20000154
 8008dd4:	0800b488 	.word	0x0800b488
 8008dd8:	0800b4ac 	.word	0x0800b4ac

08008ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008de0:	f7ff ffb8 	bl	8008d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008de4:	480c      	ldr	r0, [pc, #48]	; (8008e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008de6:	490d      	ldr	r1, [pc, #52]	; (8008e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008de8:	4a0d      	ldr	r2, [pc, #52]	; (8008e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008dec:	e002      	b.n	8008df4 <LoopCopyDataInit>

08008dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008df2:	3304      	adds	r3, #4

08008df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008df8:	d3f9      	bcc.n	8008dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008dfc:	4c0a      	ldr	r4, [pc, #40]	; (8008e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e00:	e001      	b.n	8008e06 <LoopFillZerobss>

08008e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e04:	3204      	adds	r2, #4

08008e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e08:	d3fb      	bcc.n	8008e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e0a:	f001 fe01 	bl	800aa10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e0e:	f7ff fceb 	bl	80087e8 <main>
  bx  lr    
 8008e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008e20:	0800b594 	.word	0x0800b594
  ldr r2, =_sbss
 8008e24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008e28:	20000324 	.word	0x20000324

08008e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e2c:	e7fe      	b.n	8008e2c <ADC_IRQHandler>
	...

08008e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <HAL_Init+0x40>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a0d      	ldr	r2, [pc, #52]	; (8008e70 <HAL_Init+0x40>)
 8008e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_Init+0x40>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <HAL_Init+0x40>)
 8008e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <HAL_Init+0x40>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <HAL_Init+0x40>)
 8008e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e58:	2003      	movs	r0, #3
 8008e5a:	f000 f931 	bl	80090c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f000 f808 	bl	8008e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e64:	f7ff fe38 	bl	8008ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40023c00 	.word	0x40023c00

08008e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e7c:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <HAL_InitTick+0x54>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <HAL_InitTick+0x58>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f93b 	bl	800910e <HAL_SYSTICK_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e00e      	b.n	8008ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b0f      	cmp	r3, #15
 8008ea6:	d80a      	bhi.n	8008ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb0:	f000 f911 	bl	80090d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008eb4:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <HAL_InitTick+0x5c>)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e000      	b.n	8008ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000000 	.word	0x20000000
 8008ecc:	20000008 	.word	0x20000008
 8008ed0:	20000004 	.word	0x20000004

08008ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <HAL_IncTick+0x20>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <HAL_IncTick+0x24>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <HAL_IncTick+0x24>)
 8008ee6:	6013      	str	r3, [r2, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000008 	.word	0x20000008
 8008ef8:	200001d4 	.word	0x200001d4

08008efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return uwTick;
 8008f00:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <HAL_GetTick+0x14>)
 8008f02:	681b      	ldr	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200001d4 	.word	0x200001d4

08008f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f1c:	f7ff ffee 	bl	8008efc <HAL_GetTick>
 8008f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2c:	d005      	beq.n	8008f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <HAL_Delay+0x44>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f3a:	bf00      	nop
 8008f3c:	f7ff ffde 	bl	8008efc <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d8f7      	bhi.n	8008f3c <HAL_Delay+0x28>
  {
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000008 	.word	0x20000008

08008f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f8e:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	60d3      	str	r3, [r2, #12]
}
 8008f94:	bf00      	nop
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <__NVIC_GetPriorityGrouping+0x18>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	f003 0307 	and.w	r3, r3, #7
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db0a      	blt.n	8008fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	490c      	ldr	r1, [pc, #48]	; (800900c <__NVIC_SetPriority+0x4c>)
 8008fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fde:	0112      	lsls	r2, r2, #4
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fe8:	e00a      	b.n	8009000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	4908      	ldr	r1, [pc, #32]	; (8009010 <__NVIC_SetPriority+0x50>)
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	0112      	lsls	r2, r2, #4
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	761a      	strb	r2, [r3, #24]
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	e000e100 	.word	0xe000e100
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f1c3 0307 	rsb	r3, r3, #7
 800902e:	2b04      	cmp	r3, #4
 8009030:	bf28      	it	cs
 8009032:	2304      	movcs	r3, #4
 8009034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3304      	adds	r3, #4
 800903a:	2b06      	cmp	r3, #6
 800903c:	d902      	bls.n	8009044 <NVIC_EncodePriority+0x30>
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3b03      	subs	r3, #3
 8009042:	e000      	b.n	8009046 <NVIC_EncodePriority+0x32>
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	43da      	mvns	r2, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	401a      	ands	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800905c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	43d9      	mvns	r1, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800906c:	4313      	orrs	r3, r2
         );
}
 800906e:	4618      	mov	r0, r3
 8009070:	3724      	adds	r7, #36	; 0x24
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3b01      	subs	r3, #1
 8009088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800908c:	d301      	bcc.n	8009092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800908e:	2301      	movs	r3, #1
 8009090:	e00f      	b.n	80090b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009092:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <SysTick_Config+0x40>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800909a:	210f      	movs	r1, #15
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	f7ff ff8e 	bl	8008fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <SysTick_Config+0x40>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090aa:	4b04      	ldr	r3, [pc, #16]	; (80090bc <SysTick_Config+0x40>)
 80090ac:	2207      	movs	r2, #7
 80090ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	e000e010 	.word	0xe000e010

080090c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ff47 	bl	8008f5c <__NVIC_SetPriorityGrouping>
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	4603      	mov	r3, r0
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090e8:	f7ff ff5c 	bl	8008fa4 <__NVIC_GetPriorityGrouping>
 80090ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f7ff ff8e 	bl	8009014 <NVIC_EncodePriority>
 80090f8:	4602      	mov	r2, r0
 80090fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff ff5d 	bl	8008fc0 <__NVIC_SetPriority>
}
 8009106:	bf00      	nop
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff ffb0 	bl	800907c <SysTick_Config>
 800911c:	4603      	mov	r3, r0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009128:	b480      	push	{r7}
 800912a:	b089      	sub	sp, #36	; 0x24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e16b      	b.n	800941c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009144:	2201      	movs	r2, #1
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4013      	ands	r3, r2
 8009156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	429a      	cmp	r2, r3
 800915e:	f040 815a 	bne.w	8009416 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b01      	cmp	r3, #1
 800916c:	d005      	beq.n	800917a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009176:	2b02      	cmp	r3, #2
 8009178:	d130      	bne.n	80091dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	2203      	movs	r2, #3
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	43db      	mvns	r3, r3
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4013      	ands	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	fa02 f303 	lsl.w	r3, r2, r3
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091b0:	2201      	movs	r2, #1
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	43db      	mvns	r3, r3
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	4013      	ands	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	091b      	lsrs	r3, r3, #4
 80091c6:	f003 0201 	and.w	r2, r3, #1
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d017      	beq.n	8009218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	2203      	movs	r2, #3
 80091f4:	fa02 f303 	lsl.w	r3, r2, r3
 80091f8:	43db      	mvns	r3, r3
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	4013      	ands	r3, r2
 80091fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d123      	bne.n	800926c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	08da      	lsrs	r2, r3, #3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3208      	adds	r2, #8
 800922c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	220f      	movs	r2, #15
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	43db      	mvns	r3, r3
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	4013      	ands	r3, r2
 8009246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	4313      	orrs	r3, r2
 800925c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	08da      	lsrs	r2, r3, #3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3208      	adds	r2, #8
 8009266:	69b9      	ldr	r1, [r7, #24]
 8009268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	2203      	movs	r2, #3
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	43db      	mvns	r3, r3
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	4013      	ands	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 0203 	and.w	r2, r3, #3
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	fa02 f303 	lsl.w	r3, r2, r3
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	4313      	orrs	r3, r2
 8009298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69ba      	ldr	r2, [r7, #24]
 800929e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80b4 	beq.w	8009416 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	4b60      	ldr	r3, [pc, #384]	; (8009434 <HAL_GPIO_Init+0x30c>)
 80092b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b6:	4a5f      	ldr	r2, [pc, #380]	; (8009434 <HAL_GPIO_Init+0x30c>)
 80092b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092bc:	6453      	str	r3, [r2, #68]	; 0x44
 80092be:	4b5d      	ldr	r3, [pc, #372]	; (8009434 <HAL_GPIO_Init+0x30c>)
 80092c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80092ca:	4a5b      	ldr	r2, [pc, #364]	; (8009438 <HAL_GPIO_Init+0x310>)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	089b      	lsrs	r3, r3, #2
 80092d0:	3302      	adds	r3, #2
 80092d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	220f      	movs	r2, #15
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	43db      	mvns	r3, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4013      	ands	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a52      	ldr	r2, [pc, #328]	; (800943c <HAL_GPIO_Init+0x314>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d02b      	beq.n	800934e <HAL_GPIO_Init+0x226>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a51      	ldr	r2, [pc, #324]	; (8009440 <HAL_GPIO_Init+0x318>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d025      	beq.n	800934a <HAL_GPIO_Init+0x222>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a50      	ldr	r2, [pc, #320]	; (8009444 <HAL_GPIO_Init+0x31c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d01f      	beq.n	8009346 <HAL_GPIO_Init+0x21e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a4f      	ldr	r2, [pc, #316]	; (8009448 <HAL_GPIO_Init+0x320>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d019      	beq.n	8009342 <HAL_GPIO_Init+0x21a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a4e      	ldr	r2, [pc, #312]	; (800944c <HAL_GPIO_Init+0x324>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <HAL_GPIO_Init+0x216>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a4d      	ldr	r2, [pc, #308]	; (8009450 <HAL_GPIO_Init+0x328>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00d      	beq.n	800933a <HAL_GPIO_Init+0x212>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a4c      	ldr	r2, [pc, #304]	; (8009454 <HAL_GPIO_Init+0x32c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d007      	beq.n	8009336 <HAL_GPIO_Init+0x20e>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a4b      	ldr	r2, [pc, #300]	; (8009458 <HAL_GPIO_Init+0x330>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d101      	bne.n	8009332 <HAL_GPIO_Init+0x20a>
 800932e:	2307      	movs	r3, #7
 8009330:	e00e      	b.n	8009350 <HAL_GPIO_Init+0x228>
 8009332:	2308      	movs	r3, #8
 8009334:	e00c      	b.n	8009350 <HAL_GPIO_Init+0x228>
 8009336:	2306      	movs	r3, #6
 8009338:	e00a      	b.n	8009350 <HAL_GPIO_Init+0x228>
 800933a:	2305      	movs	r3, #5
 800933c:	e008      	b.n	8009350 <HAL_GPIO_Init+0x228>
 800933e:	2304      	movs	r3, #4
 8009340:	e006      	b.n	8009350 <HAL_GPIO_Init+0x228>
 8009342:	2303      	movs	r3, #3
 8009344:	e004      	b.n	8009350 <HAL_GPIO_Init+0x228>
 8009346:	2302      	movs	r3, #2
 8009348:	e002      	b.n	8009350 <HAL_GPIO_Init+0x228>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <HAL_GPIO_Init+0x228>
 800934e:	2300      	movs	r3, #0
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	f002 0203 	and.w	r2, r2, #3
 8009356:	0092      	lsls	r2, r2, #2
 8009358:	4093      	lsls	r3, r2
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	4313      	orrs	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009360:	4935      	ldr	r1, [pc, #212]	; (8009438 <HAL_GPIO_Init+0x310>)
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	089b      	lsrs	r3, r3, #2
 8009366:	3302      	adds	r3, #2
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800936e:	4b3b      	ldr	r3, [pc, #236]	; (800945c <HAL_GPIO_Init+0x334>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	43db      	mvns	r3, r3
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	4013      	ands	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009392:	4a32      	ldr	r2, [pc, #200]	; (800945c <HAL_GPIO_Init+0x334>)
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009398:	4b30      	ldr	r3, [pc, #192]	; (800945c <HAL_GPIO_Init+0x334>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	43db      	mvns	r3, r3
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4013      	ands	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80093bc:	4a27      	ldr	r2, [pc, #156]	; (800945c <HAL_GPIO_Init+0x334>)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80093c2:	4b26      	ldr	r3, [pc, #152]	; (800945c <HAL_GPIO_Init+0x334>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	43db      	mvns	r3, r3
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4013      	ands	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80093e6:	4a1d      	ldr	r2, [pc, #116]	; (800945c <HAL_GPIO_Init+0x334>)
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80093ec:	4b1b      	ldr	r3, [pc, #108]	; (800945c <HAL_GPIO_Init+0x334>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	43db      	mvns	r3, r3
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	4013      	ands	r3, r2
 80093fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009410:	4a12      	ldr	r2, [pc, #72]	; (800945c <HAL_GPIO_Init+0x334>)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	3301      	adds	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b0f      	cmp	r3, #15
 8009420:	f67f ae90 	bls.w	8009144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	3724      	adds	r7, #36	; 0x24
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	40023800 	.word	0x40023800
 8009438:	40013800 	.word	0x40013800
 800943c:	40020000 	.word	0x40020000
 8009440:	40020400 	.word	0x40020400
 8009444:	40020800 	.word	0x40020800
 8009448:	40020c00 	.word	0x40020c00
 800944c:	40021000 	.word	0x40021000
 8009450:	40021400 	.word	0x40021400
 8009454:	40021800 	.word	0x40021800
 8009458:	40021c00 	.word	0x40021c00
 800945c:	40013c00 	.word	0x40013c00

08009460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
 800946c:	4613      	mov	r3, r2
 800946e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009470:	787b      	ldrb	r3, [r7, #1]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009476:	887a      	ldrh	r2, [r7, #2]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800947c:	e003      	b.n	8009486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	041a      	lsls	r2, r3, #16
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	619a      	str	r2, [r3, #24]
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80094a4:	887a      	ldrh	r2, [r7, #2]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4013      	ands	r3, r2
 80094aa:	041a      	lsls	r2, r3, #16
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	43d9      	mvns	r1, r3
 80094b0:	887b      	ldrh	r3, [r7, #2]
 80094b2:	400b      	ands	r3, r1
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	619a      	str	r2, [r3, #24]
}
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e267      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d075      	beq.n	80095d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094e6:	4b88      	ldr	r3, [pc, #544]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 030c 	and.w	r3, r3, #12
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d00c      	beq.n	800950c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094f2:	4b85      	ldr	r3, [pc, #532]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d112      	bne.n	8009524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094fe:	4b82      	ldr	r3, [pc, #520]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800950a:	d10b      	bne.n	8009524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800950c:	4b7e      	ldr	r3, [pc, #504]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05b      	beq.n	80095d0 <HAL_RCC_OscConfig+0x108>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d157      	bne.n	80095d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e242      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800952c:	d106      	bne.n	800953c <HAL_RCC_OscConfig+0x74>
 800952e:	4b76      	ldr	r3, [pc, #472]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a75      	ldr	r2, [pc, #468]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	e01d      	b.n	8009578 <HAL_RCC_OscConfig+0xb0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009544:	d10c      	bne.n	8009560 <HAL_RCC_OscConfig+0x98>
 8009546:	4b70      	ldr	r3, [pc, #448]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a6f      	ldr	r2, [pc, #444]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800954c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	4b6d      	ldr	r3, [pc, #436]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6c      	ldr	r2, [pc, #432]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	e00b      	b.n	8009578 <HAL_RCC_OscConfig+0xb0>
 8009560:	4b69      	ldr	r3, [pc, #420]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a68      	ldr	r2, [pc, #416]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	4b66      	ldr	r3, [pc, #408]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a65      	ldr	r2, [pc, #404]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d013      	beq.n	80095a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009580:	f7ff fcbc 	bl	8008efc <HAL_GetTick>
 8009584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009586:	e008      	b.n	800959a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009588:	f7ff fcb8 	bl	8008efc <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b64      	cmp	r3, #100	; 0x64
 8009594:	d901      	bls.n	800959a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e207      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800959a:	4b5b      	ldr	r3, [pc, #364]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0f0      	beq.n	8009588 <HAL_RCC_OscConfig+0xc0>
 80095a6:	e014      	b.n	80095d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a8:	f7ff fca8 	bl	8008efc <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095b0:	f7ff fca4 	bl	8008efc <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b64      	cmp	r3, #100	; 0x64
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e1f3      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095c2:	4b51      	ldr	r3, [pc, #324]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0xe8>
 80095ce:	e000      	b.n	80095d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d063      	beq.n	80096a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095de:	4b4a      	ldr	r3, [pc, #296]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 030c 	and.w	r3, r3, #12
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095ea:	4b47      	ldr	r3, [pc, #284]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d11c      	bne.n	8009630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095f6:	4b44      	ldr	r3, [pc, #272]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d116      	bne.n	8009630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009602:	4b41      	ldr	r3, [pc, #260]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d005      	beq.n	800961a <HAL_RCC_OscConfig+0x152>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d001      	beq.n	800961a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e1c7      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800961a:	4b3b      	ldr	r3, [pc, #236]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4937      	ldr	r1, [pc, #220]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800962a:	4313      	orrs	r3, r2
 800962c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800962e:	e03a      	b.n	80096a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d020      	beq.n	800967a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009638:	4b34      	ldr	r3, [pc, #208]	; (800970c <HAL_RCC_OscConfig+0x244>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800963e:	f7ff fc5d 	bl	8008efc <HAL_GetTick>
 8009642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009644:	e008      	b.n	8009658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009646:	f7ff fc59 	bl	8008efc <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e1a8      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009658:	4b2b      	ldr	r3, [pc, #172]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0f0      	beq.n	8009646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4925      	ldr	r1, [pc, #148]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 8009674:	4313      	orrs	r3, r2
 8009676:	600b      	str	r3, [r1, #0]
 8009678:	e015      	b.n	80096a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <HAL_RCC_OscConfig+0x244>)
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009680:	f7ff fc3c 	bl	8008efc <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009688:	f7ff fc38 	bl	8008efc <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e187      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f0      	bne.n	8009688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d036      	beq.n	8009720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ba:	4b15      	ldr	r3, [pc, #84]	; (8009710 <HAL_RCC_OscConfig+0x248>)
 80096bc:	2201      	movs	r2, #1
 80096be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c0:	f7ff fc1c 	bl	8008efc <HAL_GetTick>
 80096c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096c6:	e008      	b.n	80096da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096c8:	f7ff fc18 	bl	8008efc <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d901      	bls.n	80096da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e167      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <HAL_RCC_OscConfig+0x240>)
 80096dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f0      	beq.n	80096c8 <HAL_RCC_OscConfig+0x200>
 80096e6:	e01b      	b.n	8009720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096e8:	4b09      	ldr	r3, [pc, #36]	; (8009710 <HAL_RCC_OscConfig+0x248>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096ee:	f7ff fc05 	bl	8008efc <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096f4:	e00e      	b.n	8009714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096f6:	f7ff fc01 	bl	8008efc <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	d907      	bls.n	8009714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e150      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
 8009708:	40023800 	.word	0x40023800
 800970c:	42470000 	.word	0x42470000
 8009710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009714:	4b88      	ldr	r3, [pc, #544]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1ea      	bne.n	80096f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8097 	beq.w	800985c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009732:	4b81      	ldr	r3, [pc, #516]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10f      	bne.n	800975e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	4b7d      	ldr	r3, [pc, #500]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	4a7c      	ldr	r2, [pc, #496]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974c:	6413      	str	r3, [r2, #64]	; 0x40
 800974e:	4b7a      	ldr	r3, [pc, #488]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800975a:	2301      	movs	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800975e:	4b77      	ldr	r3, [pc, #476]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009766:	2b00      	cmp	r3, #0
 8009768:	d118      	bne.n	800979c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800976a:	4b74      	ldr	r3, [pc, #464]	; (800993c <HAL_RCC_OscConfig+0x474>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a73      	ldr	r2, [pc, #460]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009776:	f7ff fbc1 	bl	8008efc <HAL_GetTick>
 800977a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800977c:	e008      	b.n	8009790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800977e:	f7ff fbbd 	bl	8008efc <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e10c      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009790:	4b6a      	ldr	r3, [pc, #424]	; (800993c <HAL_RCC_OscConfig+0x474>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0f0      	beq.n	800977e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d106      	bne.n	80097b2 <HAL_RCC_OscConfig+0x2ea>
 80097a4:	4b64      	ldr	r3, [pc, #400]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	4a63      	ldr	r2, [pc, #396]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	6713      	str	r3, [r2, #112]	; 0x70
 80097b0:	e01c      	b.n	80097ec <HAL_RCC_OscConfig+0x324>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	d10c      	bne.n	80097d4 <HAL_RCC_OscConfig+0x30c>
 80097ba:	4b5f      	ldr	r3, [pc, #380]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	4a5e      	ldr	r2, [pc, #376]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097c0:	f043 0304 	orr.w	r3, r3, #4
 80097c4:	6713      	str	r3, [r2, #112]	; 0x70
 80097c6:	4b5c      	ldr	r3, [pc, #368]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	4a5b      	ldr	r2, [pc, #364]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	6713      	str	r3, [r2, #112]	; 0x70
 80097d2:	e00b      	b.n	80097ec <HAL_RCC_OscConfig+0x324>
 80097d4:	4b58      	ldr	r3, [pc, #352]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	4a57      	ldr	r2, [pc, #348]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	6713      	str	r3, [r2, #112]	; 0x70
 80097e0:	4b55      	ldr	r3, [pc, #340]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	4a54      	ldr	r2, [pc, #336]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80097e6:	f023 0304 	bic.w	r3, r3, #4
 80097ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d015      	beq.n	8009820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f4:	f7ff fb82 	bl	8008efc <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097fa:	e00a      	b.n	8009812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097fc:	f7ff fb7e 	bl	8008efc <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	f241 3288 	movw	r2, #5000	; 0x1388
 800980a:	4293      	cmp	r3, r2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e0cb      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009812:	4b49      	ldr	r3, [pc, #292]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0ee      	beq.n	80097fc <HAL_RCC_OscConfig+0x334>
 800981e:	e014      	b.n	800984a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009820:	f7ff fb6c 	bl	8008efc <HAL_GetTick>
 8009824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009826:	e00a      	b.n	800983e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009828:	f7ff fb68 	bl	8008efc <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	f241 3288 	movw	r2, #5000	; 0x1388
 8009836:	4293      	cmp	r3, r2
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e0b5      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800983e:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1ee      	bne.n	8009828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d105      	bne.n	800985c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009850:	4b39      	ldr	r3, [pc, #228]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	4a38      	ldr	r2, [pc, #224]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800985a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80a1 	beq.w	80099a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009866:	4b34      	ldr	r3, [pc, #208]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 030c 	and.w	r3, r3, #12
 800986e:	2b08      	cmp	r3, #8
 8009870:	d05c      	beq.n	800992c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d141      	bne.n	80098fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009880:	f7ff fb3c 	bl	8008efc <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009888:	f7ff fb38 	bl	8008efc <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e087      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800989a:	4b27      	ldr	r3, [pc, #156]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	69da      	ldr	r2, [r3, #28]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	019b      	lsls	r3, r3, #6
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	085b      	lsrs	r3, r3, #1
 80098be:	3b01      	subs	r3, #1
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	061b      	lsls	r3, r3, #24
 80098ca:	491b      	ldr	r1, [pc, #108]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098d0:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098d6:	f7ff fb11 	bl	8008efc <HAL_GetTick>
 80098da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098dc:	e008      	b.n	80098f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098de:	f7ff fb0d 	bl	8008efc <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d901      	bls.n	80098f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e05c      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098f0:	4b11      	ldr	r3, [pc, #68]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0f0      	beq.n	80098de <HAL_RCC_OscConfig+0x416>
 80098fc:	e054      	b.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098fe:	4b10      	ldr	r3, [pc, #64]	; (8009940 <HAL_RCC_OscConfig+0x478>)
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009904:	f7ff fafa 	bl	8008efc <HAL_GetTick>
 8009908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800990c:	f7ff faf6 	bl	8008efc <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b02      	cmp	r3, #2
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e045      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <HAL_RCC_OscConfig+0x470>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f0      	bne.n	800990c <HAL_RCC_OscConfig+0x444>
 800992a:	e03d      	b.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d107      	bne.n	8009944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e038      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
 8009938:	40023800 	.word	0x40023800
 800993c:	40007000 	.word	0x40007000
 8009940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009944:	4b1b      	ldr	r3, [pc, #108]	; (80099b4 <HAL_RCC_OscConfig+0x4ec>)
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d028      	beq.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800995c:	429a      	cmp	r2, r3
 800995e:	d121      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d11a      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009974:	4013      	ands	r3, r2
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800997a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800997c:	4293      	cmp	r3, r2
 800997e:	d111      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	3b01      	subs	r3, #1
 800998e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009990:	429a      	cmp	r2, r3
 8009992:	d107      	bne.n	80099a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d001      	beq.n	80099a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	40023800 	.word	0x40023800

080099b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0cc      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099cc:	4b68      	ldr	r3, [pc, #416]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d90c      	bls.n	80099f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b65      	ldr	r3, [pc, #404]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099e2:	4b63      	ldr	r3, [pc, #396]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d001      	beq.n	80099f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e0b8      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d020      	beq.n	8009a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a0c:	4b59      	ldr	r3, [pc, #356]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	4a58      	ldr	r2, [pc, #352]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0308 	and.w	r3, r3, #8
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a24:	4b53      	ldr	r3, [pc, #332]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a52      	ldr	r2, [pc, #328]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a30:	4b50      	ldr	r3, [pc, #320]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	494d      	ldr	r1, [pc, #308]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d044      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d107      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a56:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d119      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e07f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d003      	beq.n	8009a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d107      	bne.n	8009a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a76:	4b3f      	ldr	r3, [pc, #252]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e06f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a86:	4b3b      	ldr	r3, [pc, #236]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e067      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a96:	4b37      	ldr	r3, [pc, #220]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f023 0203 	bic.w	r2, r3, #3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4934      	ldr	r1, [pc, #208]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009aa8:	f7ff fa28 	bl	8008efc <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aae:	e00a      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7ff fa24 	bl	8008efc <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e04f      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ac6:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 020c 	and.w	r2, r3, #12
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d1eb      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d20c      	bcs.n	8009b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae6:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aee:	4b20      	ldr	r3, [pc, #128]	; (8009b70 <HAL_RCC_ClockConfig+0x1b8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d001      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e032      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b0c:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4916      	ldr	r1, [pc, #88]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b2a:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	490e      	ldr	r1, [pc, #56]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b3e:	f000 f821 	bl	8009b84 <HAL_RCC_GetSysClockFreq>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	091b      	lsrs	r3, r3, #4
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	490a      	ldr	r1, [pc, #40]	; (8009b78 <HAL_RCC_ClockConfig+0x1c0>)
 8009b50:	5ccb      	ldrb	r3, [r1, r3]
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <HAL_RCC_ClockConfig+0x1c4>)
 8009b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <HAL_RCC_ClockConfig+0x1c8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff f988 	bl	8008e74 <HAL_InitTick>

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40023c00 	.word	0x40023c00
 8009b74:	40023800 	.word	0x40023800
 8009b78:	0800b538 	.word	0x0800b538
 8009b7c:	20000000 	.word	0x20000000
 8009b80:	20000004 	.word	0x20000004

08009b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b88:	b094      	sub	sp, #80	; 0x50
 8009b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b90:	2300      	movs	r3, #0
 8009b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b94:	2300      	movs	r3, #0
 8009b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b9c:	4b79      	ldr	r3, [pc, #484]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f003 030c 	and.w	r3, r3, #12
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d00d      	beq.n	8009bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	f200 80e1 	bhi.w	8009d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d003      	beq.n	8009bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8009bb6:	e0db      	b.n	8009d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bb8:	4b73      	ldr	r3, [pc, #460]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009bbc:	e0db      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009bbe:	4b73      	ldr	r3, [pc, #460]	; (8009d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8009bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bc2:	e0d8      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bc4:	4b6f      	ldr	r3, [pc, #444]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009bce:	4b6d      	ldr	r3, [pc, #436]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d063      	beq.n	8009ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bda:	4b6a      	ldr	r3, [pc, #424]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	099b      	lsrs	r3, r3, #6
 8009be0:	2200      	movs	r2, #0
 8009be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bec:	633b      	str	r3, [r7, #48]	; 0x30
 8009bee:	2300      	movs	r3, #0
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f04f 0000 	mov.w	r0, #0
 8009bfe:	f04f 0100 	mov.w	r1, #0
 8009c02:	0159      	lsls	r1, r3, #5
 8009c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c08:	0150      	lsls	r0, r2, #5
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4621      	mov	r1, r4
 8009c10:	1a51      	subs	r1, r2, r1
 8009c12:	6139      	str	r1, [r7, #16]
 8009c14:	4629      	mov	r1, r5
 8009c16:	eb63 0301 	sbc.w	r3, r3, r1
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c28:	4659      	mov	r1, fp
 8009c2a:	018b      	lsls	r3, r1, #6
 8009c2c:	4651      	mov	r1, sl
 8009c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c32:	4651      	mov	r1, sl
 8009c34:	018a      	lsls	r2, r1, #6
 8009c36:	4651      	mov	r1, sl
 8009c38:	ebb2 0801 	subs.w	r8, r2, r1
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c56:	4690      	mov	r8, r2
 8009c58:	4699      	mov	r9, r3
 8009c5a:	4623      	mov	r3, r4
 8009c5c:	eb18 0303 	adds.w	r3, r8, r3
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	462b      	mov	r3, r5
 8009c64:	eb49 0303 	adc.w	r3, r9, r3
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	f04f 0200 	mov.w	r2, #0
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c76:	4629      	mov	r1, r5
 8009c78:	024b      	lsls	r3, r1, #9
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009c80:	4621      	mov	r1, r4
 8009c82:	024a      	lsls	r2, r1, #9
 8009c84:	4610      	mov	r0, r2
 8009c86:	4619      	mov	r1, r3
 8009c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c94:	f7fe faf4 	bl	8008280 <__aeabi_uldivmod>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ca0:	e058      	b.n	8009d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ca2:	4b38      	ldr	r3, [pc, #224]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	4611      	mov	r1, r2
 8009cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009cb2:	623b      	str	r3, [r7, #32]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	f04f 0000 	mov.w	r0, #0
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	0159      	lsls	r1, r3, #5
 8009cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cce:	0150      	lsls	r0, r2, #5
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8009cda:	4649      	mov	r1, r9
 8009cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	f04f 0300 	mov.w	r3, #0
 8009ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8009cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	00eb      	lsls	r3, r5, #3
 8009d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d0a:	00e2      	lsls	r2, r4, #3
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	461d      	mov	r5, r3
 8009d10:	4643      	mov	r3, r8
 8009d12:	18e3      	adds	r3, r4, r3
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	464b      	mov	r3, r9
 8009d18:	eb45 0303 	adc.w	r3, r5, r3
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	028b      	lsls	r3, r1, #10
 8009d2e:	4621      	mov	r1, r4
 8009d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d34:	4621      	mov	r1, r4
 8009d36:	028a      	lsls	r2, r1, #10
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d3e:	2200      	movs	r2, #0
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	61fa      	str	r2, [r7, #28]
 8009d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d48:	f7fe fa9a 	bl	8008280 <__aeabi_uldivmod>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4613      	mov	r3, r2
 8009d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	0c1b      	lsrs	r3, r3, #16
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	3301      	adds	r3, #1
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d6e:	e002      	b.n	8009d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3750      	adds	r7, #80	; 0x50
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d82:	bf00      	nop
 8009d84:	40023800 	.word	0x40023800
 8009d88:	00f42400 	.word	0x00f42400
 8009d8c:	007a1200 	.word	0x007a1200

08009d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d96:	681b      	ldr	r3, [r3, #0]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	20000000 	.word	0x20000000

08009da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009dac:	f7ff fff0 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009db0:	4602      	mov	r2, r0
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	0a9b      	lsrs	r3, r3, #10
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	4903      	ldr	r1, [pc, #12]	; (8009dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dbe:	5ccb      	ldrb	r3, [r1, r3]
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	0800b548 	.word	0x0800b548

08009dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009dd4:	f7ff ffdc 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	0b5b      	lsrs	r3, r3, #13
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	4903      	ldr	r1, [pc, #12]	; (8009df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009de6:	5ccb      	ldrb	r3, [r1, r3]
 8009de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40023800 	.word	0x40023800
 8009df4:	0800b548 	.word	0x0800b548

08009df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e042      	b.n	8009e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fe fe82 	bl	8008b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2224      	movs	r2, #36	; 0x24
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f82b 	bl	8009e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695a      	ldr	r2, [r3, #20]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e9c:	b0c0      	sub	sp, #256	; 0x100
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb4:	68d9      	ldr	r1, [r3, #12]
 8009eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	ea40 0301 	orr.w	r3, r0, r1
 8009ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ef0:	f021 010c 	bic.w	r1, r1, #12
 8009ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009efe:	430b      	orrs	r3, r1
 8009f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f12:	6999      	ldr	r1, [r3, #24]
 8009f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	ea40 0301 	orr.w	r3, r0, r1
 8009f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	4b8f      	ldr	r3, [pc, #572]	; (800a164 <UART_SetConfig+0x2cc>)
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d005      	beq.n	8009f38 <UART_SetConfig+0xa0>
 8009f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b8d      	ldr	r3, [pc, #564]	; (800a168 <UART_SetConfig+0x2d0>)
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d104      	bne.n	8009f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f38:	f7ff ff4a 	bl	8009dd0 <HAL_RCC_GetPCLK2Freq>
 8009f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009f40:	e003      	b.n	8009f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f42:	f7ff ff31 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
 8009f46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f54:	f040 810c 	bne.w	800a170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	1891      	adds	r1, r2, r2
 8009f70:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f72:	415b      	adcs	r3, r3
 8009f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	eb12 0801 	adds.w	r8, r2, r1
 8009f80:	4629      	mov	r1, r5
 8009f82:	eb43 0901 	adc.w	r9, r3, r1
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f9a:	4690      	mov	r8, r2
 8009f9c:	4699      	mov	r9, r3
 8009f9e:	4623      	mov	r3, r4
 8009fa0:	eb18 0303 	adds.w	r3, r8, r3
 8009fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009fa8:	462b      	mov	r3, r5
 8009faa:	eb49 0303 	adc.w	r3, r9, r3
 8009fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	18db      	adds	r3, r3, r3
 8009fca:	653b      	str	r3, [r7, #80]	; 0x50
 8009fcc:	4613      	mov	r3, r2
 8009fce:	eb42 0303 	adc.w	r3, r2, r3
 8009fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8009fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009fdc:	f7fe f950 	bl	8008280 <__aeabi_uldivmod>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4b61      	ldr	r3, [pc, #388]	; (800a16c <UART_SetConfig+0x2d4>)
 8009fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	011c      	lsls	r4, r3, #4
 8009fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a000:	4642      	mov	r2, r8
 800a002:	464b      	mov	r3, r9
 800a004:	1891      	adds	r1, r2, r2
 800a006:	64b9      	str	r1, [r7, #72]	; 0x48
 800a008:	415b      	adcs	r3, r3
 800a00a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a00c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a010:	4641      	mov	r1, r8
 800a012:	eb12 0a01 	adds.w	sl, r2, r1
 800a016:	4649      	mov	r1, r9
 800a018:	eb43 0b01 	adc.w	fp, r3, r1
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a02c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a030:	4692      	mov	sl, r2
 800a032:	469b      	mov	fp, r3
 800a034:	4643      	mov	r3, r8
 800a036:	eb1a 0303 	adds.w	r3, sl, r3
 800a03a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a03e:	464b      	mov	r3, r9
 800a040:	eb4b 0303 	adc.w	r3, fp, r3
 800a044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a054:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a05c:	460b      	mov	r3, r1
 800a05e:	18db      	adds	r3, r3, r3
 800a060:	643b      	str	r3, [r7, #64]	; 0x40
 800a062:	4613      	mov	r3, r2
 800a064:	eb42 0303 	adc.w	r3, r2, r3
 800a068:	647b      	str	r3, [r7, #68]	; 0x44
 800a06a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a06e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a072:	f7fe f905 	bl	8008280 <__aeabi_uldivmod>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	4b3b      	ldr	r3, [pc, #236]	; (800a16c <UART_SetConfig+0x2d4>)
 800a07e:	fba3 2301 	umull	r2, r3, r3, r1
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	2264      	movs	r2, #100	; 0x64
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	1acb      	subs	r3, r1, r3
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a092:	4b36      	ldr	r3, [pc, #216]	; (800a16c <UART_SetConfig+0x2d4>)
 800a094:	fba3 2302 	umull	r2, r3, r3, r2
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0a0:	441c      	add	r4, r3
 800a0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a0b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	1891      	adds	r1, r2, r2
 800a0ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0bc:	415b      	adcs	r3, r3
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	1851      	adds	r1, r2, r1
 800a0c8:	6339      	str	r1, [r7, #48]	; 0x30
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	414b      	adcs	r3, r1
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a0dc:	4659      	mov	r1, fp
 800a0de:	00cb      	lsls	r3, r1, #3
 800a0e0:	4651      	mov	r1, sl
 800a0e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0e6:	4651      	mov	r1, sl
 800a0e8:	00ca      	lsls	r2, r1, #3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	189b      	adds	r3, r3, r2
 800a0f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	460a      	mov	r2, r1
 800a0fc:	eb42 0303 	adc.w	r3, r2, r3
 800a100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a110:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a118:	460b      	mov	r3, r1
 800a11a:	18db      	adds	r3, r3, r3
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a11e:	4613      	mov	r3, r2
 800a120:	eb42 0303 	adc.w	r3, r2, r3
 800a124:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a12a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a12e:	f7fe f8a7 	bl	8008280 <__aeabi_uldivmod>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <UART_SetConfig+0x2d4>)
 800a138:	fba3 1302 	umull	r1, r3, r3, r2
 800a13c:	095b      	lsrs	r3, r3, #5
 800a13e:	2164      	movs	r1, #100	; 0x64
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	3332      	adds	r3, #50	; 0x32
 800a14a:	4a08      	ldr	r2, [pc, #32]	; (800a16c <UART_SetConfig+0x2d4>)
 800a14c:	fba2 2303 	umull	r2, r3, r2, r3
 800a150:	095b      	lsrs	r3, r3, #5
 800a152:	f003 0207 	and.w	r2, r3, #7
 800a156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4422      	add	r2, r4
 800a15e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a160:	e106      	b.n	800a370 <UART_SetConfig+0x4d8>
 800a162:	bf00      	nop
 800a164:	40011000 	.word	0x40011000
 800a168:	40011400 	.word	0x40011400
 800a16c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a174:	2200      	movs	r2, #0
 800a176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a17a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a17e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	1891      	adds	r1, r2, r2
 800a188:	6239      	str	r1, [r7, #32]
 800a18a:	415b      	adcs	r3, r3
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
 800a18e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a192:	4641      	mov	r1, r8
 800a194:	1854      	adds	r4, r2, r1
 800a196:	4649      	mov	r1, r9
 800a198:	eb43 0501 	adc.w	r5, r3, r1
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	f04f 0300 	mov.w	r3, #0
 800a1a4:	00eb      	lsls	r3, r5, #3
 800a1a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1aa:	00e2      	lsls	r2, r4, #3
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	461d      	mov	r5, r3
 800a1b0:	4643      	mov	r3, r8
 800a1b2:	18e3      	adds	r3, r4, r3
 800a1b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1b8:	464b      	mov	r3, r9
 800a1ba:	eb45 0303 	adc.w	r3, r5, r3
 800a1be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a1d2:	f04f 0200 	mov.w	r2, #0
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a1de:	4629      	mov	r1, r5
 800a1e0:	008b      	lsls	r3, r1, #2
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	008a      	lsls	r2, r1, #2
 800a1ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a1f0:	f7fe f846 	bl	8008280 <__aeabi_uldivmod>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4b60      	ldr	r3, [pc, #384]	; (800a37c <UART_SetConfig+0x4e4>)
 800a1fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a1fe:	095b      	lsrs	r3, r3, #5
 800a200:	011c      	lsls	r4, r3, #4
 800a202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a206:	2200      	movs	r2, #0
 800a208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a20c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a214:	4642      	mov	r2, r8
 800a216:	464b      	mov	r3, r9
 800a218:	1891      	adds	r1, r2, r2
 800a21a:	61b9      	str	r1, [r7, #24]
 800a21c:	415b      	adcs	r3, r3
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a224:	4641      	mov	r1, r8
 800a226:	1851      	adds	r1, r2, r1
 800a228:	6139      	str	r1, [r7, #16]
 800a22a:	4649      	mov	r1, r9
 800a22c:	414b      	adcs	r3, r1
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	f04f 0200 	mov.w	r2, #0
 800a234:	f04f 0300 	mov.w	r3, #0
 800a238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a23c:	4659      	mov	r1, fp
 800a23e:	00cb      	lsls	r3, r1, #3
 800a240:	4651      	mov	r1, sl
 800a242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a246:	4651      	mov	r1, sl
 800a248:	00ca      	lsls	r2, r1, #3
 800a24a:	4610      	mov	r0, r2
 800a24c:	4619      	mov	r1, r3
 800a24e:	4603      	mov	r3, r0
 800a250:	4642      	mov	r2, r8
 800a252:	189b      	adds	r3, r3, r2
 800a254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a258:	464b      	mov	r3, r9
 800a25a:	460a      	mov	r2, r1
 800a25c:	eb42 0303 	adc.w	r3, r2, r3
 800a260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a26e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	f04f 0300 	mov.w	r3, #0
 800a278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a27c:	4649      	mov	r1, r9
 800a27e:	008b      	lsls	r3, r1, #2
 800a280:	4641      	mov	r1, r8
 800a282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a286:	4641      	mov	r1, r8
 800a288:	008a      	lsls	r2, r1, #2
 800a28a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a28e:	f7fd fff7 	bl	8008280 <__aeabi_uldivmod>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4611      	mov	r1, r2
 800a298:	4b38      	ldr	r3, [pc, #224]	; (800a37c <UART_SetConfig+0x4e4>)
 800a29a:	fba3 2301 	umull	r2, r3, r3, r1
 800a29e:	095b      	lsrs	r3, r3, #5
 800a2a0:	2264      	movs	r2, #100	; 0x64
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	1acb      	subs	r3, r1, r3
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	3332      	adds	r3, #50	; 0x32
 800a2ac:	4a33      	ldr	r2, [pc, #204]	; (800a37c <UART_SetConfig+0x4e4>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	095b      	lsrs	r3, r3, #5
 800a2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2b8:	441c      	add	r4, r3
 800a2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2be:	2200      	movs	r2, #0
 800a2c0:	673b      	str	r3, [r7, #112]	; 0x70
 800a2c2:	677a      	str	r2, [r7, #116]	; 0x74
 800a2c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	1891      	adds	r1, r2, r2
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	415b      	adcs	r3, r3
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2d8:	4641      	mov	r1, r8
 800a2da:	1851      	adds	r1, r2, r1
 800a2dc:	6039      	str	r1, [r7, #0]
 800a2de:	4649      	mov	r1, r9
 800a2e0:	414b      	adcs	r3, r1
 800a2e2:	607b      	str	r3, [r7, #4]
 800a2e4:	f04f 0200 	mov.w	r2, #0
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2f0:	4659      	mov	r1, fp
 800a2f2:	00cb      	lsls	r3, r1, #3
 800a2f4:	4651      	mov	r1, sl
 800a2f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2fa:	4651      	mov	r1, sl
 800a2fc:	00ca      	lsls	r2, r1, #3
 800a2fe:	4610      	mov	r0, r2
 800a300:	4619      	mov	r1, r3
 800a302:	4603      	mov	r3, r0
 800a304:	4642      	mov	r2, r8
 800a306:	189b      	adds	r3, r3, r2
 800a308:	66bb      	str	r3, [r7, #104]	; 0x68
 800a30a:	464b      	mov	r3, r9
 800a30c:	460a      	mov	r2, r1
 800a30e:	eb42 0303 	adc.w	r3, r2, r3
 800a312:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	663b      	str	r3, [r7, #96]	; 0x60
 800a31e:	667a      	str	r2, [r7, #100]	; 0x64
 800a320:	f04f 0200 	mov.w	r2, #0
 800a324:	f04f 0300 	mov.w	r3, #0
 800a328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a32c:	4649      	mov	r1, r9
 800a32e:	008b      	lsls	r3, r1, #2
 800a330:	4641      	mov	r1, r8
 800a332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a336:	4641      	mov	r1, r8
 800a338:	008a      	lsls	r2, r1, #2
 800a33a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a33e:	f7fd ff9f 	bl	8008280 <__aeabi_uldivmod>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <UART_SetConfig+0x4e4>)
 800a348:	fba3 1302 	umull	r1, r3, r3, r2
 800a34c:	095b      	lsrs	r3, r3, #5
 800a34e:	2164      	movs	r1, #100	; 0x64
 800a350:	fb01 f303 	mul.w	r3, r1, r3
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	3332      	adds	r3, #50	; 0x32
 800a35a:	4a08      	ldr	r2, [pc, #32]	; (800a37c <UART_SetConfig+0x4e4>)
 800a35c:	fba2 2303 	umull	r2, r3, r2, r3
 800a360:	095b      	lsrs	r3, r3, #5
 800a362:	f003 020f 	and.w	r2, r3, #15
 800a366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4422      	add	r2, r4
 800a36e:	609a      	str	r2, [r3, #8]
}
 800a370:	bf00      	nop
 800a372:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a376:	46bd      	mov	sp, r7
 800a378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a37c:	51eb851f 	.word	0x51eb851f

0800a380 <malloc>:
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <malloc+0xc>)
 800a382:	4601      	mov	r1, r0
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	f000 b82b 	b.w	800a3e0 <_malloc_r>
 800a38a:	bf00      	nop
 800a38c:	20000064 	.word	0x20000064

0800a390 <free>:
 800a390:	4b02      	ldr	r3, [pc, #8]	; (800a39c <free+0xc>)
 800a392:	4601      	mov	r1, r0
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	f000 bb63 	b.w	800aa60 <_free_r>
 800a39a:	bf00      	nop
 800a39c:	20000064 	.word	0x20000064

0800a3a0 <sbrk_aligned>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	4e0e      	ldr	r6, [pc, #56]	; (800a3dc <sbrk_aligned+0x3c>)
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6831      	ldr	r1, [r6, #0]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	b911      	cbnz	r1, 800a3b2 <sbrk_aligned+0x12>
 800a3ac:	f000 fb08 	bl	800a9c0 <_sbrk_r>
 800a3b0:	6030      	str	r0, [r6, #0]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 fb03 	bl	800a9c0 <_sbrk_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d00a      	beq.n	800a3d4 <sbrk_aligned+0x34>
 800a3be:	1cc4      	adds	r4, r0, #3
 800a3c0:	f024 0403 	bic.w	r4, r4, #3
 800a3c4:	42a0      	cmp	r0, r4
 800a3c6:	d007      	beq.n	800a3d8 <sbrk_aligned+0x38>
 800a3c8:	1a21      	subs	r1, r4, r0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 faf8 	bl	800a9c0 <_sbrk_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d101      	bne.n	800a3d8 <sbrk_aligned+0x38>
 800a3d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a3d8:	4620      	mov	r0, r4
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	200001dc 	.word	0x200001dc

0800a3e0 <_malloc_r>:
 800a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e4:	1ccd      	adds	r5, r1, #3
 800a3e6:	f025 0503 	bic.w	r5, r5, #3
 800a3ea:	3508      	adds	r5, #8
 800a3ec:	2d0c      	cmp	r5, #12
 800a3ee:	bf38      	it	cc
 800a3f0:	250c      	movcc	r5, #12
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	db01      	blt.n	800a3fc <_malloc_r+0x1c>
 800a3f8:	42a9      	cmp	r1, r5
 800a3fa:	d905      	bls.n	800a408 <_malloc_r+0x28>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	2600      	movs	r6, #0
 800a402:	4630      	mov	r0, r6
 800a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4dc <_malloc_r+0xfc>
 800a40c:	f000 f868 	bl	800a4e0 <__malloc_lock>
 800a410:	f8d8 3000 	ldr.w	r3, [r8]
 800a414:	461c      	mov	r4, r3
 800a416:	bb5c      	cbnz	r4, 800a470 <_malloc_r+0x90>
 800a418:	4629      	mov	r1, r5
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7ff ffc0 	bl	800a3a0 <sbrk_aligned>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	4604      	mov	r4, r0
 800a424:	d155      	bne.n	800a4d2 <_malloc_r+0xf2>
 800a426:	f8d8 4000 	ldr.w	r4, [r8]
 800a42a:	4626      	mov	r6, r4
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	d145      	bne.n	800a4bc <_malloc_r+0xdc>
 800a430:	2c00      	cmp	r4, #0
 800a432:	d048      	beq.n	800a4c6 <_malloc_r+0xe6>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	4631      	mov	r1, r6
 800a438:	4638      	mov	r0, r7
 800a43a:	eb04 0903 	add.w	r9, r4, r3
 800a43e:	f000 fabf 	bl	800a9c0 <_sbrk_r>
 800a442:	4581      	cmp	r9, r0
 800a444:	d13f      	bne.n	800a4c6 <_malloc_r+0xe6>
 800a446:	6821      	ldr	r1, [r4, #0]
 800a448:	1a6d      	subs	r5, r5, r1
 800a44a:	4629      	mov	r1, r5
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff ffa7 	bl	800a3a0 <sbrk_aligned>
 800a452:	3001      	adds	r0, #1
 800a454:	d037      	beq.n	800a4c6 <_malloc_r+0xe6>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	442b      	add	r3, r5
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	f8d8 3000 	ldr.w	r3, [r8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d038      	beq.n	800a4d6 <_malloc_r+0xf6>
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	42a2      	cmp	r2, r4
 800a468:	d12b      	bne.n	800a4c2 <_malloc_r+0xe2>
 800a46a:	2200      	movs	r2, #0
 800a46c:	605a      	str	r2, [r3, #4]
 800a46e:	e00f      	b.n	800a490 <_malloc_r+0xb0>
 800a470:	6822      	ldr	r2, [r4, #0]
 800a472:	1b52      	subs	r2, r2, r5
 800a474:	d41f      	bmi.n	800a4b6 <_malloc_r+0xd6>
 800a476:	2a0b      	cmp	r2, #11
 800a478:	d917      	bls.n	800a4aa <_malloc_r+0xca>
 800a47a:	1961      	adds	r1, r4, r5
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	6025      	str	r5, [r4, #0]
 800a480:	bf18      	it	ne
 800a482:	6059      	strne	r1, [r3, #4]
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	bf08      	it	eq
 800a488:	f8c8 1000 	streq.w	r1, [r8]
 800a48c:	5162      	str	r2, [r4, r5]
 800a48e:	604b      	str	r3, [r1, #4]
 800a490:	4638      	mov	r0, r7
 800a492:	f104 060b 	add.w	r6, r4, #11
 800a496:	f000 f829 	bl	800a4ec <__malloc_unlock>
 800a49a:	f026 0607 	bic.w	r6, r6, #7
 800a49e:	1d23      	adds	r3, r4, #4
 800a4a0:	1af2      	subs	r2, r6, r3
 800a4a2:	d0ae      	beq.n	800a402 <_malloc_r+0x22>
 800a4a4:	1b9b      	subs	r3, r3, r6
 800a4a6:	50a3      	str	r3, [r4, r2]
 800a4a8:	e7ab      	b.n	800a402 <_malloc_r+0x22>
 800a4aa:	42a3      	cmp	r3, r4
 800a4ac:	6862      	ldr	r2, [r4, #4]
 800a4ae:	d1dd      	bne.n	800a46c <_malloc_r+0x8c>
 800a4b0:	f8c8 2000 	str.w	r2, [r8]
 800a4b4:	e7ec      	b.n	800a490 <_malloc_r+0xb0>
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	6864      	ldr	r4, [r4, #4]
 800a4ba:	e7ac      	b.n	800a416 <_malloc_r+0x36>
 800a4bc:	4634      	mov	r4, r6
 800a4be:	6876      	ldr	r6, [r6, #4]
 800a4c0:	e7b4      	b.n	800a42c <_malloc_r+0x4c>
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	e7cc      	b.n	800a460 <_malloc_r+0x80>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	603b      	str	r3, [r7, #0]
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	f000 f80e 	bl	800a4ec <__malloc_unlock>
 800a4d0:	e797      	b.n	800a402 <_malloc_r+0x22>
 800a4d2:	6025      	str	r5, [r4, #0]
 800a4d4:	e7dc      	b.n	800a490 <_malloc_r+0xb0>
 800a4d6:	605b      	str	r3, [r3, #4]
 800a4d8:	deff      	udf	#255	; 0xff
 800a4da:	bf00      	nop
 800a4dc:	200001d8 	.word	0x200001d8

0800a4e0 <__malloc_lock>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__malloc_lock+0x8>)
 800a4e2:	f000 baba 	b.w	800aa5a <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	20000320 	.word	0x20000320

0800a4ec <__malloc_unlock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__malloc_unlock+0x8>)
 800a4ee:	f000 bab5 	b.w	800aa5c <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20000320 	.word	0x20000320

0800a4f8 <std>:
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a506:	6083      	str	r3, [r0, #8]
 800a508:	8181      	strh	r1, [r0, #12]
 800a50a:	6643      	str	r3, [r0, #100]	; 0x64
 800a50c:	81c2      	strh	r2, [r0, #14]
 800a50e:	6183      	str	r3, [r0, #24]
 800a510:	4619      	mov	r1, r3
 800a512:	2208      	movs	r2, #8
 800a514:	305c      	adds	r0, #92	; 0x5c
 800a516:	f000 f9f7 	bl	800a908 <memset>
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <std+0x58>)
 800a51c:	6263      	str	r3, [r4, #36]	; 0x24
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <std+0x5c>)
 800a520:	62a3      	str	r3, [r4, #40]	; 0x28
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <std+0x60>)
 800a524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a526:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <std+0x64>)
 800a528:	6323      	str	r3, [r4, #48]	; 0x30
 800a52a:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <std+0x68>)
 800a52c:	6224      	str	r4, [r4, #32]
 800a52e:	429c      	cmp	r4, r3
 800a530:	d006      	beq.n	800a540 <std+0x48>
 800a532:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a536:	4294      	cmp	r4, r2
 800a538:	d002      	beq.n	800a540 <std+0x48>
 800a53a:	33d0      	adds	r3, #208	; 0xd0
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d105      	bne.n	800a54c <std+0x54>
 800a540:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a548:	f000 ba86 	b.w	800aa58 <__retarget_lock_init_recursive>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	bf00      	nop
 800a550:	0800a759 	.word	0x0800a759
 800a554:	0800a77b 	.word	0x0800a77b
 800a558:	0800a7b3 	.word	0x0800a7b3
 800a55c:	0800a7d7 	.word	0x0800a7d7
 800a560:	200001e0 	.word	0x200001e0

0800a564 <stdio_exit_handler>:
 800a564:	4a02      	ldr	r2, [pc, #8]	; (800a570 <stdio_exit_handler+0xc>)
 800a566:	4903      	ldr	r1, [pc, #12]	; (800a574 <stdio_exit_handler+0x10>)
 800a568:	4803      	ldr	r0, [pc, #12]	; (800a578 <stdio_exit_handler+0x14>)
 800a56a:	f000 b869 	b.w	800a640 <_fwalk_sglue>
 800a56e:	bf00      	nop
 800a570:	2000000c 	.word	0x2000000c
 800a574:	0800b1ad 	.word	0x0800b1ad
 800a578:	20000018 	.word	0x20000018

0800a57c <cleanup_stdio>:
 800a57c:	6841      	ldr	r1, [r0, #4]
 800a57e:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <cleanup_stdio+0x34>)
 800a580:	4299      	cmp	r1, r3
 800a582:	b510      	push	{r4, lr}
 800a584:	4604      	mov	r4, r0
 800a586:	d001      	beq.n	800a58c <cleanup_stdio+0x10>
 800a588:	f000 fe10 	bl	800b1ac <_fflush_r>
 800a58c:	68a1      	ldr	r1, [r4, #8]
 800a58e:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <cleanup_stdio+0x38>)
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <cleanup_stdio+0x1e>
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fe09 	bl	800b1ac <_fflush_r>
 800a59a:	68e1      	ldr	r1, [r4, #12]
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <cleanup_stdio+0x3c>)
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	d004      	beq.n	800a5ac <cleanup_stdio+0x30>
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a8:	f000 be00 	b.w	800b1ac <_fflush_r>
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	bf00      	nop
 800a5b0:	200001e0 	.word	0x200001e0
 800a5b4:	20000248 	.word	0x20000248
 800a5b8:	200002b0 	.word	0x200002b0

0800a5bc <global_stdio_init.part.0>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <global_stdio_init.part.0+0x30>)
 800a5c0:	4c0b      	ldr	r4, [pc, #44]	; (800a5f0 <global_stdio_init.part.0+0x34>)
 800a5c2:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <global_stdio_init.part.0+0x38>)
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2104      	movs	r1, #4
 800a5cc:	f7ff ff94 	bl	800a4f8 <std>
 800a5d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	2109      	movs	r1, #9
 800a5d8:	f7ff ff8e 	bl	800a4f8 <std>
 800a5dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e6:	2112      	movs	r1, #18
 800a5e8:	f7ff bf86 	b.w	800a4f8 <std>
 800a5ec:	20000318 	.word	0x20000318
 800a5f0:	200001e0 	.word	0x200001e0
 800a5f4:	0800a565 	.word	0x0800a565

0800a5f8 <__sfp_lock_acquire>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__sfp_lock_acquire+0x8>)
 800a5fa:	f000 ba2e 	b.w	800aa5a <__retarget_lock_acquire_recursive>
 800a5fe:	bf00      	nop
 800a600:	20000321 	.word	0x20000321

0800a604 <__sfp_lock_release>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__sfp_lock_release+0x8>)
 800a606:	f000 ba29 	b.w	800aa5c <__retarget_lock_release_recursive>
 800a60a:	bf00      	nop
 800a60c:	20000321 	.word	0x20000321

0800a610 <__sinit>:
 800a610:	b510      	push	{r4, lr}
 800a612:	4604      	mov	r4, r0
 800a614:	f7ff fff0 	bl	800a5f8 <__sfp_lock_acquire>
 800a618:	6a23      	ldr	r3, [r4, #32]
 800a61a:	b11b      	cbz	r3, 800a624 <__sinit+0x14>
 800a61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a620:	f7ff bff0 	b.w	800a604 <__sfp_lock_release>
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <__sinit+0x28>)
 800a626:	6223      	str	r3, [r4, #32]
 800a628:	4b04      	ldr	r3, [pc, #16]	; (800a63c <__sinit+0x2c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f5      	bne.n	800a61c <__sinit+0xc>
 800a630:	f7ff ffc4 	bl	800a5bc <global_stdio_init.part.0>
 800a634:	e7f2      	b.n	800a61c <__sinit+0xc>
 800a636:	bf00      	nop
 800a638:	0800a57d 	.word	0x0800a57d
 800a63c:	20000318 	.word	0x20000318

0800a640 <_fwalk_sglue>:
 800a640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a644:	4607      	mov	r7, r0
 800a646:	4688      	mov	r8, r1
 800a648:	4614      	mov	r4, r2
 800a64a:	2600      	movs	r6, #0
 800a64c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a650:	f1b9 0901 	subs.w	r9, r9, #1
 800a654:	d505      	bpl.n	800a662 <_fwalk_sglue+0x22>
 800a656:	6824      	ldr	r4, [r4, #0]
 800a658:	2c00      	cmp	r4, #0
 800a65a:	d1f7      	bne.n	800a64c <_fwalk_sglue+0xc>
 800a65c:	4630      	mov	r0, r6
 800a65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a662:	89ab      	ldrh	r3, [r5, #12]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d907      	bls.n	800a678 <_fwalk_sglue+0x38>
 800a668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a66c:	3301      	adds	r3, #1
 800a66e:	d003      	beq.n	800a678 <_fwalk_sglue+0x38>
 800a670:	4629      	mov	r1, r5
 800a672:	4638      	mov	r0, r7
 800a674:	47c0      	blx	r8
 800a676:	4306      	orrs	r6, r0
 800a678:	3568      	adds	r5, #104	; 0x68
 800a67a:	e7e9      	b.n	800a650 <_fwalk_sglue+0x10>

0800a67c <iprintf>:
 800a67c:	b40f      	push	{r0, r1, r2, r3}
 800a67e:	b507      	push	{r0, r1, r2, lr}
 800a680:	4906      	ldr	r1, [pc, #24]	; (800a69c <iprintf+0x20>)
 800a682:	ab04      	add	r3, sp, #16
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68a:	6881      	ldr	r1, [r0, #8]
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	f000 fa5d 	bl	800ab4c <_vfiprintf_r>
 800a692:	b003      	add	sp, #12
 800a694:	f85d eb04 	ldr.w	lr, [sp], #4
 800a698:	b004      	add	sp, #16
 800a69a:	4770      	bx	lr
 800a69c:	20000064 	.word	0x20000064

0800a6a0 <_puts_r>:
 800a6a0:	6a03      	ldr	r3, [r0, #32]
 800a6a2:	b570      	push	{r4, r5, r6, lr}
 800a6a4:	6884      	ldr	r4, [r0, #8]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_puts_r+0x10>
 800a6ac:	f7ff ffb0 	bl	800a610 <__sinit>
 800a6b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6b2:	07db      	lsls	r3, r3, #31
 800a6b4:	d405      	bmi.n	800a6c2 <_puts_r+0x22>
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	0598      	lsls	r0, r3, #22
 800a6ba:	d402      	bmi.n	800a6c2 <_puts_r+0x22>
 800a6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6be:	f000 f9cc 	bl	800aa5a <__retarget_lock_acquire_recursive>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	0719      	lsls	r1, r3, #28
 800a6c6:	d513      	bpl.n	800a6f0 <_puts_r+0x50>
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b18b      	cbz	r3, 800a6f0 <_puts_r+0x50>
 800a6cc:	3e01      	subs	r6, #1
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	60a3      	str	r3, [r4, #8]
 800a6d8:	b9e9      	cbnz	r1, 800a716 <_puts_r+0x76>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	da2e      	bge.n	800a73c <_puts_r+0x9c>
 800a6de:	4622      	mov	r2, r4
 800a6e0:	210a      	movs	r1, #10
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f87b 	bl	800a7de <__swbuf_r>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d007      	beq.n	800a6fc <_puts_r+0x5c>
 800a6ec:	250a      	movs	r5, #10
 800a6ee:	e007      	b.n	800a700 <_puts_r+0x60>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f8b0 	bl	800a858 <__swsetup_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0e7      	beq.n	800a6cc <_puts_r+0x2c>
 800a6fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a702:	07da      	lsls	r2, r3, #31
 800a704:	d405      	bmi.n	800a712 <_puts_r+0x72>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	059b      	lsls	r3, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_puts_r+0x72>
 800a70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a70e:	f000 f9a5 	bl	800aa5c <__retarget_lock_release_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	2b00      	cmp	r3, #0
 800a718:	da04      	bge.n	800a724 <_puts_r+0x84>
 800a71a:	69a2      	ldr	r2, [r4, #24]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	dc06      	bgt.n	800a72e <_puts_r+0x8e>
 800a720:	290a      	cmp	r1, #10
 800a722:	d004      	beq.n	800a72e <_puts_r+0x8e>
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	6022      	str	r2, [r4, #0]
 800a72a:	7019      	strb	r1, [r3, #0]
 800a72c:	e7cf      	b.n	800a6ce <_puts_r+0x2e>
 800a72e:	4622      	mov	r2, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f854 	bl	800a7de <__swbuf_r>
 800a736:	3001      	adds	r0, #1
 800a738:	d1c9      	bne.n	800a6ce <_puts_r+0x2e>
 800a73a:	e7df      	b.n	800a6fc <_puts_r+0x5c>
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	250a      	movs	r5, #10
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	6022      	str	r2, [r4, #0]
 800a744:	701d      	strb	r5, [r3, #0]
 800a746:	e7db      	b.n	800a700 <_puts_r+0x60>

0800a748 <puts>:
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <puts+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f7ff bfa7 	b.w	800a6a0 <_puts_r>
 800a752:	bf00      	nop
 800a754:	20000064 	.word	0x20000064

0800a758 <__sread>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	460c      	mov	r4, r1
 800a75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a760:	f000 f91c 	bl	800a99c <_read_r>
 800a764:	2800      	cmp	r0, #0
 800a766:	bfab      	itete	ge
 800a768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a76a:	89a3      	ldrhlt	r3, [r4, #12]
 800a76c:	181b      	addge	r3, r3, r0
 800a76e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a772:	bfac      	ite	ge
 800a774:	6563      	strge	r3, [r4, #84]	; 0x54
 800a776:	81a3      	strhlt	r3, [r4, #12]
 800a778:	bd10      	pop	{r4, pc}

0800a77a <__swrite>:
 800a77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a77e:	461f      	mov	r7, r3
 800a780:	898b      	ldrh	r3, [r1, #12]
 800a782:	05db      	lsls	r3, r3, #23
 800a784:	4605      	mov	r5, r0
 800a786:	460c      	mov	r4, r1
 800a788:	4616      	mov	r6, r2
 800a78a:	d505      	bpl.n	800a798 <__swrite+0x1e>
 800a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a790:	2302      	movs	r3, #2
 800a792:	2200      	movs	r2, #0
 800a794:	f000 f8f0 	bl	800a978 <_lseek_r>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a79e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ae:	f000 b917 	b.w	800a9e0 <_write_r>

0800a7b2 <__sseek>:
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ba:	f000 f8dd 	bl	800a978 <_lseek_r>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	bf15      	itete	ne
 800a7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7ce:	81a3      	strheq	r3, [r4, #12]
 800a7d0:	bf18      	it	ne
 800a7d2:	81a3      	strhne	r3, [r4, #12]
 800a7d4:	bd10      	pop	{r4, pc}

0800a7d6 <__sclose>:
 800a7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7da:	f000 b8bd 	b.w	800a958 <_close_r>

0800a7de <__swbuf_r>:
 800a7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e0:	460e      	mov	r6, r1
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	b118      	cbz	r0, 800a7f0 <__swbuf_r+0x12>
 800a7e8:	6a03      	ldr	r3, [r0, #32]
 800a7ea:	b90b      	cbnz	r3, 800a7f0 <__swbuf_r+0x12>
 800a7ec:	f7ff ff10 	bl	800a610 <__sinit>
 800a7f0:	69a3      	ldr	r3, [r4, #24]
 800a7f2:	60a3      	str	r3, [r4, #8]
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	071a      	lsls	r2, r3, #28
 800a7f8:	d525      	bpl.n	800a846 <__swbuf_r+0x68>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	b31b      	cbz	r3, 800a846 <__swbuf_r+0x68>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	1a98      	subs	r0, r3, r2
 800a804:	6963      	ldr	r3, [r4, #20]
 800a806:	b2f6      	uxtb	r6, r6
 800a808:	4283      	cmp	r3, r0
 800a80a:	4637      	mov	r7, r6
 800a80c:	dc04      	bgt.n	800a818 <__swbuf_r+0x3a>
 800a80e:	4621      	mov	r1, r4
 800a810:	4628      	mov	r0, r5
 800a812:	f000 fccb 	bl	800b1ac <_fflush_r>
 800a816:	b9e0      	cbnz	r0, 800a852 <__swbuf_r+0x74>
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	3b01      	subs	r3, #1
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	701e      	strb	r6, [r3, #0]
 800a826:	6962      	ldr	r2, [r4, #20]
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d004      	beq.n	800a838 <__swbuf_r+0x5a>
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	07db      	lsls	r3, r3, #31
 800a832:	d506      	bpl.n	800a842 <__swbuf_r+0x64>
 800a834:	2e0a      	cmp	r6, #10
 800a836:	d104      	bne.n	800a842 <__swbuf_r+0x64>
 800a838:	4621      	mov	r1, r4
 800a83a:	4628      	mov	r0, r5
 800a83c:	f000 fcb6 	bl	800b1ac <_fflush_r>
 800a840:	b938      	cbnz	r0, 800a852 <__swbuf_r+0x74>
 800a842:	4638      	mov	r0, r7
 800a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a846:	4621      	mov	r1, r4
 800a848:	4628      	mov	r0, r5
 800a84a:	f000 f805 	bl	800a858 <__swsetup_r>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0d5      	beq.n	800a7fe <__swbuf_r+0x20>
 800a852:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a856:	e7f4      	b.n	800a842 <__swbuf_r+0x64>

0800a858 <__swsetup_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4b2a      	ldr	r3, [pc, #168]	; (800a904 <__swsetup_r+0xac>)
 800a85c:	4605      	mov	r5, r0
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	460c      	mov	r4, r1
 800a862:	b118      	cbz	r0, 800a86c <__swsetup_r+0x14>
 800a864:	6a03      	ldr	r3, [r0, #32]
 800a866:	b90b      	cbnz	r3, 800a86c <__swsetup_r+0x14>
 800a868:	f7ff fed2 	bl	800a610 <__sinit>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a872:	0718      	lsls	r0, r3, #28
 800a874:	d422      	bmi.n	800a8bc <__swsetup_r+0x64>
 800a876:	06d9      	lsls	r1, r3, #27
 800a878:	d407      	bmi.n	800a88a <__swsetup_r+0x32>
 800a87a:	2309      	movs	r3, #9
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a888:	e034      	b.n	800a8f4 <__swsetup_r+0x9c>
 800a88a:	0758      	lsls	r0, r3, #29
 800a88c:	d512      	bpl.n	800a8b4 <__swsetup_r+0x5c>
 800a88e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a890:	b141      	cbz	r1, 800a8a4 <__swsetup_r+0x4c>
 800a892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a896:	4299      	cmp	r1, r3
 800a898:	d002      	beq.n	800a8a0 <__swsetup_r+0x48>
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f8e0 	bl	800aa60 <_free_r>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	6363      	str	r3, [r4, #52]	; 0x34
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f043 0308 	orr.w	r3, r3, #8
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	b94b      	cbnz	r3, 800a8d4 <__swsetup_r+0x7c>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ca:	d003      	beq.n	800a8d4 <__swsetup_r+0x7c>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 fcba 	bl	800b248 <__smakebuf_r>
 800a8d4:	89a0      	ldrh	r0, [r4, #12]
 800a8d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8da:	f010 0301 	ands.w	r3, r0, #1
 800a8de:	d00a      	beq.n	800a8f6 <__swsetup_r+0x9e>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60a3      	str	r3, [r4, #8]
 800a8e4:	6963      	ldr	r3, [r4, #20]
 800a8e6:	425b      	negs	r3, r3
 800a8e8:	61a3      	str	r3, [r4, #24]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	b943      	cbnz	r3, 800a900 <__swsetup_r+0xa8>
 800a8ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8f2:	d1c4      	bne.n	800a87e <__swsetup_r+0x26>
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	0781      	lsls	r1, r0, #30
 800a8f8:	bf58      	it	pl
 800a8fa:	6963      	ldrpl	r3, [r4, #20]
 800a8fc:	60a3      	str	r3, [r4, #8]
 800a8fe:	e7f4      	b.n	800a8ea <__swsetup_r+0x92>
 800a900:	2000      	movs	r0, #0
 800a902:	e7f7      	b.n	800a8f4 <__swsetup_r+0x9c>
 800a904:	20000064 	.word	0x20000064

0800a908 <memset>:
 800a908:	4402      	add	r2, r0
 800a90a:	4603      	mov	r3, r0
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d100      	bne.n	800a912 <memset+0xa>
 800a910:	4770      	bx	lr
 800a912:	f803 1b01 	strb.w	r1, [r3], #1
 800a916:	e7f9      	b.n	800a90c <memset+0x4>

0800a918 <strchr>:
 800a918:	b2c9      	uxtb	r1, r1
 800a91a:	4603      	mov	r3, r0
 800a91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a920:	b11a      	cbz	r2, 800a92a <strchr+0x12>
 800a922:	428a      	cmp	r2, r1
 800a924:	d1f9      	bne.n	800a91a <strchr+0x2>
 800a926:	4618      	mov	r0, r3
 800a928:	4770      	bx	lr
 800a92a:	2900      	cmp	r1, #0
 800a92c:	bf18      	it	ne
 800a92e:	2300      	movne	r3, #0
 800a930:	e7f9      	b.n	800a926 <strchr+0xe>

0800a932 <strncpy>:
 800a932:	b510      	push	{r4, lr}
 800a934:	3901      	subs	r1, #1
 800a936:	4603      	mov	r3, r0
 800a938:	b132      	cbz	r2, 800a948 <strncpy+0x16>
 800a93a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a93e:	f803 4b01 	strb.w	r4, [r3], #1
 800a942:	3a01      	subs	r2, #1
 800a944:	2c00      	cmp	r4, #0
 800a946:	d1f7      	bne.n	800a938 <strncpy+0x6>
 800a948:	441a      	add	r2, r3
 800a94a:	2100      	movs	r1, #0
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d100      	bne.n	800a952 <strncpy+0x20>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	f803 1b01 	strb.w	r1, [r3], #1
 800a956:	e7f9      	b.n	800a94c <strncpy+0x1a>

0800a958 <_close_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d06      	ldr	r5, [pc, #24]	; (800a974 <_close_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	f7fe f98b 	bl	8008c7e <_close>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_close_r+0x1a>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_close_r+0x1a>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2000031c 	.word	0x2000031c

0800a978 <_lseek_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	; (800a998 <_lseek_r+0x20>)
 800a97c:	4604      	mov	r4, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7fe f9a0 	bl	8008ccc <_lseek>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_lseek_r+0x1e>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_lseek_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	2000031c 	.word	0x2000031c

0800a99c <_read_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	; (800a9bc <_read_r+0x20>)
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	602a      	str	r2, [r5, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f7fe f92e 	bl	8008c0c <_read>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_read_r+0x1e>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_read_r+0x1e>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	2000031c 	.word	0x2000031c

0800a9c0 <_sbrk_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_sbrk_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7fe f98c 	bl	8008ce8 <_sbrk>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_sbrk_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_sbrk_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	2000031c 	.word	0x2000031c

0800a9e0 <_write_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_write_r+0x20>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	602a      	str	r2, [r5, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f7fe f929 	bl	8008c46 <_write>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_write_r+0x1e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_write_r+0x1e>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	2000031c 	.word	0x2000031c

0800aa04 <__errno>:
 800aa04:	4b01      	ldr	r3, [pc, #4]	; (800aa0c <__errno+0x8>)
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20000064 	.word	0x20000064

0800aa10 <__libc_init_array>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	4d0d      	ldr	r5, [pc, #52]	; (800aa48 <__libc_init_array+0x38>)
 800aa14:	4c0d      	ldr	r4, [pc, #52]	; (800aa4c <__libc_init_array+0x3c>)
 800aa16:	1b64      	subs	r4, r4, r5
 800aa18:	10a4      	asrs	r4, r4, #2
 800aa1a:	2600      	movs	r6, #0
 800aa1c:	42a6      	cmp	r6, r4
 800aa1e:	d109      	bne.n	800aa34 <__libc_init_array+0x24>
 800aa20:	4d0b      	ldr	r5, [pc, #44]	; (800aa50 <__libc_init_array+0x40>)
 800aa22:	4c0c      	ldr	r4, [pc, #48]	; (800aa54 <__libc_init_array+0x44>)
 800aa24:	f000 fc6e 	bl	800b304 <_init>
 800aa28:	1b64      	subs	r4, r4, r5
 800aa2a:	10a4      	asrs	r4, r4, #2
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	42a6      	cmp	r6, r4
 800aa30:	d105      	bne.n	800aa3e <__libc_init_array+0x2e>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa38:	4798      	blx	r3
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	e7ee      	b.n	800aa1c <__libc_init_array+0xc>
 800aa3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa42:	4798      	blx	r3
 800aa44:	3601      	adds	r6, #1
 800aa46:	e7f2      	b.n	800aa2e <__libc_init_array+0x1e>
 800aa48:	0800b58c 	.word	0x0800b58c
 800aa4c:	0800b58c 	.word	0x0800b58c
 800aa50:	0800b58c 	.word	0x0800b58c
 800aa54:	0800b590 	.word	0x0800b590

0800aa58 <__retarget_lock_init_recursive>:
 800aa58:	4770      	bx	lr

0800aa5a <__retarget_lock_acquire_recursive>:
 800aa5a:	4770      	bx	lr

0800aa5c <__retarget_lock_release_recursive>:
 800aa5c:	4770      	bx	lr
	...

0800aa60 <_free_r>:
 800aa60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d044      	beq.n	800aaf0 <_free_r+0x90>
 800aa66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6a:	9001      	str	r0, [sp, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa72:	bfb8      	it	lt
 800aa74:	18e4      	addlt	r4, r4, r3
 800aa76:	f7ff fd33 	bl	800a4e0 <__malloc_lock>
 800aa7a:	4a1e      	ldr	r2, [pc, #120]	; (800aaf4 <_free_r+0x94>)
 800aa7c:	9801      	ldr	r0, [sp, #4]
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	b933      	cbnz	r3, 800aa90 <_free_r+0x30>
 800aa82:	6063      	str	r3, [r4, #4]
 800aa84:	6014      	str	r4, [r2, #0]
 800aa86:	b003      	add	sp, #12
 800aa88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa8c:	f7ff bd2e 	b.w	800a4ec <__malloc_unlock>
 800aa90:	42a3      	cmp	r3, r4
 800aa92:	d908      	bls.n	800aaa6 <_free_r+0x46>
 800aa94:	6825      	ldr	r5, [r4, #0]
 800aa96:	1961      	adds	r1, r4, r5
 800aa98:	428b      	cmp	r3, r1
 800aa9a:	bf01      	itttt	eq
 800aa9c:	6819      	ldreq	r1, [r3, #0]
 800aa9e:	685b      	ldreq	r3, [r3, #4]
 800aaa0:	1949      	addeq	r1, r1, r5
 800aaa2:	6021      	streq	r1, [r4, #0]
 800aaa4:	e7ed      	b.n	800aa82 <_free_r+0x22>
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b10b      	cbz	r3, 800aab0 <_free_r+0x50>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d9fa      	bls.n	800aaa6 <_free_r+0x46>
 800aab0:	6811      	ldr	r1, [r2, #0]
 800aab2:	1855      	adds	r5, r2, r1
 800aab4:	42a5      	cmp	r5, r4
 800aab6:	d10b      	bne.n	800aad0 <_free_r+0x70>
 800aab8:	6824      	ldr	r4, [r4, #0]
 800aaba:	4421      	add	r1, r4
 800aabc:	1854      	adds	r4, r2, r1
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	6011      	str	r1, [r2, #0]
 800aac2:	d1e0      	bne.n	800aa86 <_free_r+0x26>
 800aac4:	681c      	ldr	r4, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	6053      	str	r3, [r2, #4]
 800aaca:	440c      	add	r4, r1
 800aacc:	6014      	str	r4, [r2, #0]
 800aace:	e7da      	b.n	800aa86 <_free_r+0x26>
 800aad0:	d902      	bls.n	800aad8 <_free_r+0x78>
 800aad2:	230c      	movs	r3, #12
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	e7d6      	b.n	800aa86 <_free_r+0x26>
 800aad8:	6825      	ldr	r5, [r4, #0]
 800aada:	1961      	adds	r1, r4, r5
 800aadc:	428b      	cmp	r3, r1
 800aade:	bf04      	itt	eq
 800aae0:	6819      	ldreq	r1, [r3, #0]
 800aae2:	685b      	ldreq	r3, [r3, #4]
 800aae4:	6063      	str	r3, [r4, #4]
 800aae6:	bf04      	itt	eq
 800aae8:	1949      	addeq	r1, r1, r5
 800aaea:	6021      	streq	r1, [r4, #0]
 800aaec:	6054      	str	r4, [r2, #4]
 800aaee:	e7ca      	b.n	800aa86 <_free_r+0x26>
 800aaf0:	b003      	add	sp, #12
 800aaf2:	bd30      	pop	{r4, r5, pc}
 800aaf4:	200001d8 	.word	0x200001d8

0800aaf8 <__sfputc_r>:
 800aaf8:	6893      	ldr	r3, [r2, #8]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	b410      	push	{r4}
 800ab00:	6093      	str	r3, [r2, #8]
 800ab02:	da08      	bge.n	800ab16 <__sfputc_r+0x1e>
 800ab04:	6994      	ldr	r4, [r2, #24]
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	db01      	blt.n	800ab0e <__sfputc_r+0x16>
 800ab0a:	290a      	cmp	r1, #10
 800ab0c:	d103      	bne.n	800ab16 <__sfputc_r+0x1e>
 800ab0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab12:	f7ff be64 	b.w	800a7de <__swbuf_r>
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	1c58      	adds	r0, r3, #1
 800ab1a:	6010      	str	r0, [r2, #0]
 800ab1c:	7019      	strb	r1, [r3, #0]
 800ab1e:	4608      	mov	r0, r1
 800ab20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <__sfputs_r>:
 800ab26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	18d5      	adds	r5, r2, r3
 800ab30:	42ac      	cmp	r4, r5
 800ab32:	d101      	bne.n	800ab38 <__sfputs_r+0x12>
 800ab34:	2000      	movs	r0, #0
 800ab36:	e007      	b.n	800ab48 <__sfputs_r+0x22>
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	463a      	mov	r2, r7
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7ff ffda 	bl	800aaf8 <__sfputc_r>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d1f3      	bne.n	800ab30 <__sfputs_r+0xa>
 800ab48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab4c <_vfiprintf_r>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	460d      	mov	r5, r1
 800ab52:	b09d      	sub	sp, #116	; 0x74
 800ab54:	4614      	mov	r4, r2
 800ab56:	4698      	mov	r8, r3
 800ab58:	4606      	mov	r6, r0
 800ab5a:	b118      	cbz	r0, 800ab64 <_vfiprintf_r+0x18>
 800ab5c:	6a03      	ldr	r3, [r0, #32]
 800ab5e:	b90b      	cbnz	r3, 800ab64 <_vfiprintf_r+0x18>
 800ab60:	f7ff fd56 	bl	800a610 <__sinit>
 800ab64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab66:	07d9      	lsls	r1, r3, #31
 800ab68:	d405      	bmi.n	800ab76 <_vfiprintf_r+0x2a>
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	059a      	lsls	r2, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_vfiprintf_r+0x2a>
 800ab70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab72:	f7ff ff72 	bl	800aa5a <__retarget_lock_acquire_recursive>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	071b      	lsls	r3, r3, #28
 800ab7a:	d501      	bpl.n	800ab80 <_vfiprintf_r+0x34>
 800ab7c:	692b      	ldr	r3, [r5, #16]
 800ab7e:	b99b      	cbnz	r3, 800aba8 <_vfiprintf_r+0x5c>
 800ab80:	4629      	mov	r1, r5
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff fe68 	bl	800a858 <__swsetup_r>
 800ab88:	b170      	cbz	r0, 800aba8 <_vfiprintf_r+0x5c>
 800ab8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8c:	07dc      	lsls	r4, r3, #31
 800ab8e:	d504      	bpl.n	800ab9a <_vfiprintf_r+0x4e>
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab94:	b01d      	add	sp, #116	; 0x74
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	0598      	lsls	r0, r3, #22
 800ab9e:	d4f7      	bmi.n	800ab90 <_vfiprintf_r+0x44>
 800aba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aba2:	f7ff ff5b 	bl	800aa5c <__retarget_lock_release_recursive>
 800aba6:	e7f3      	b.n	800ab90 <_vfiprintf_r+0x44>
 800aba8:	2300      	movs	r3, #0
 800abaa:	9309      	str	r3, [sp, #36]	; 0x24
 800abac:	2320      	movs	r3, #32
 800abae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800abb6:	2330      	movs	r3, #48	; 0x30
 800abb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad6c <_vfiprintf_r+0x220>
 800abbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc0:	f04f 0901 	mov.w	r9, #1
 800abc4:	4623      	mov	r3, r4
 800abc6:	469a      	mov	sl, r3
 800abc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abcc:	b10a      	cbz	r2, 800abd2 <_vfiprintf_r+0x86>
 800abce:	2a25      	cmp	r2, #37	; 0x25
 800abd0:	d1f9      	bne.n	800abc6 <_vfiprintf_r+0x7a>
 800abd2:	ebba 0b04 	subs.w	fp, sl, r4
 800abd6:	d00b      	beq.n	800abf0 <_vfiprintf_r+0xa4>
 800abd8:	465b      	mov	r3, fp
 800abda:	4622      	mov	r2, r4
 800abdc:	4629      	mov	r1, r5
 800abde:	4630      	mov	r0, r6
 800abe0:	f7ff ffa1 	bl	800ab26 <__sfputs_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	f000 80a9 	beq.w	800ad3c <_vfiprintf_r+0x1f0>
 800abea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abec:	445a      	add	r2, fp
 800abee:	9209      	str	r2, [sp, #36]	; 0x24
 800abf0:	f89a 3000 	ldrb.w	r3, [sl]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 80a1 	beq.w	800ad3c <_vfiprintf_r+0x1f0>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac04:	f10a 0a01 	add.w	sl, sl, #1
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	9307      	str	r3, [sp, #28]
 800ac0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac10:	931a      	str	r3, [sp, #104]	; 0x68
 800ac12:	4654      	mov	r4, sl
 800ac14:	2205      	movs	r2, #5
 800ac16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1a:	4854      	ldr	r0, [pc, #336]	; (800ad6c <_vfiprintf_r+0x220>)
 800ac1c:	f7fd fae0 	bl	80081e0 <memchr>
 800ac20:	9a04      	ldr	r2, [sp, #16]
 800ac22:	b9d8      	cbnz	r0, 800ac5c <_vfiprintf_r+0x110>
 800ac24:	06d1      	lsls	r1, r2, #27
 800ac26:	bf44      	itt	mi
 800ac28:	2320      	movmi	r3, #32
 800ac2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac2e:	0713      	lsls	r3, r2, #28
 800ac30:	bf44      	itt	mi
 800ac32:	232b      	movmi	r3, #43	; 0x2b
 800ac34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac38:	f89a 3000 	ldrb.w	r3, [sl]
 800ac3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3e:	d015      	beq.n	800ac6c <_vfiprintf_r+0x120>
 800ac40:	9a07      	ldr	r2, [sp, #28]
 800ac42:	4654      	mov	r4, sl
 800ac44:	2000      	movs	r0, #0
 800ac46:	f04f 0c0a 	mov.w	ip, #10
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac50:	3b30      	subs	r3, #48	; 0x30
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	d94d      	bls.n	800acf2 <_vfiprintf_r+0x1a6>
 800ac56:	b1b0      	cbz	r0, 800ac86 <_vfiprintf_r+0x13a>
 800ac58:	9207      	str	r2, [sp, #28]
 800ac5a:	e014      	b.n	800ac86 <_vfiprintf_r+0x13a>
 800ac5c:	eba0 0308 	sub.w	r3, r0, r8
 800ac60:	fa09 f303 	lsl.w	r3, r9, r3
 800ac64:	4313      	orrs	r3, r2
 800ac66:	9304      	str	r3, [sp, #16]
 800ac68:	46a2      	mov	sl, r4
 800ac6a:	e7d2      	b.n	800ac12 <_vfiprintf_r+0xc6>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	1d19      	adds	r1, r3, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	9103      	str	r1, [sp, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfbb      	ittet	lt
 800ac78:	425b      	neglt	r3, r3
 800ac7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac7e:	9307      	strge	r3, [sp, #28]
 800ac80:	9307      	strlt	r3, [sp, #28]
 800ac82:	bfb8      	it	lt
 800ac84:	9204      	strlt	r2, [sp, #16]
 800ac86:	7823      	ldrb	r3, [r4, #0]
 800ac88:	2b2e      	cmp	r3, #46	; 0x2e
 800ac8a:	d10c      	bne.n	800aca6 <_vfiprintf_r+0x15a>
 800ac8c:	7863      	ldrb	r3, [r4, #1]
 800ac8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac90:	d134      	bne.n	800acfc <_vfiprintf_r+0x1b0>
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	1d1a      	adds	r2, r3, #4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	9203      	str	r2, [sp, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bfb8      	it	lt
 800ac9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aca2:	3402      	adds	r4, #2
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad7c <_vfiprintf_r+0x230>
 800acaa:	7821      	ldrb	r1, [r4, #0]
 800acac:	2203      	movs	r2, #3
 800acae:	4650      	mov	r0, sl
 800acb0:	f7fd fa96 	bl	80081e0 <memchr>
 800acb4:	b138      	cbz	r0, 800acc6 <_vfiprintf_r+0x17a>
 800acb6:	9b04      	ldr	r3, [sp, #16]
 800acb8:	eba0 000a 	sub.w	r0, r0, sl
 800acbc:	2240      	movs	r2, #64	; 0x40
 800acbe:	4082      	lsls	r2, r0
 800acc0:	4313      	orrs	r3, r2
 800acc2:	3401      	adds	r4, #1
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acca:	4829      	ldr	r0, [pc, #164]	; (800ad70 <_vfiprintf_r+0x224>)
 800accc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd0:	2206      	movs	r2, #6
 800acd2:	f7fd fa85 	bl	80081e0 <memchr>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d03f      	beq.n	800ad5a <_vfiprintf_r+0x20e>
 800acda:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <_vfiprintf_r+0x228>)
 800acdc:	bb1b      	cbnz	r3, 800ad26 <_vfiprintf_r+0x1da>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	3307      	adds	r3, #7
 800ace2:	f023 0307 	bic.w	r3, r3, #7
 800ace6:	3308      	adds	r3, #8
 800ace8:	9303      	str	r3, [sp, #12]
 800acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acec:	443b      	add	r3, r7
 800acee:	9309      	str	r3, [sp, #36]	; 0x24
 800acf0:	e768      	b.n	800abc4 <_vfiprintf_r+0x78>
 800acf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acf6:	460c      	mov	r4, r1
 800acf8:	2001      	movs	r0, #1
 800acfa:	e7a6      	b.n	800ac4a <_vfiprintf_r+0xfe>
 800acfc:	2300      	movs	r3, #0
 800acfe:	3401      	adds	r4, #1
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	4619      	mov	r1, r3
 800ad04:	f04f 0c0a 	mov.w	ip, #10
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad0e:	3a30      	subs	r2, #48	; 0x30
 800ad10:	2a09      	cmp	r2, #9
 800ad12:	d903      	bls.n	800ad1c <_vfiprintf_r+0x1d0>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d0c6      	beq.n	800aca6 <_vfiprintf_r+0x15a>
 800ad18:	9105      	str	r1, [sp, #20]
 800ad1a:	e7c4      	b.n	800aca6 <_vfiprintf_r+0x15a>
 800ad1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad20:	4604      	mov	r4, r0
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7f0      	b.n	800ad08 <_vfiprintf_r+0x1bc>
 800ad26:	ab03      	add	r3, sp, #12
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <_vfiprintf_r+0x22c>)
 800ad2e:	a904      	add	r1, sp, #16
 800ad30:	4630      	mov	r0, r6
 800ad32:	f3af 8000 	nop.w
 800ad36:	4607      	mov	r7, r0
 800ad38:	1c78      	adds	r0, r7, #1
 800ad3a:	d1d6      	bne.n	800acea <_vfiprintf_r+0x19e>
 800ad3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_vfiprintf_r+0x202>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_vfiprintf_r+0x202>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f7ff fe87 	bl	800aa5c <__retarget_lock_release_recursive>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	065b      	lsls	r3, r3, #25
 800ad52:	f53f af1d 	bmi.w	800ab90 <_vfiprintf_r+0x44>
 800ad56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad58:	e71c      	b.n	800ab94 <_vfiprintf_r+0x48>
 800ad5a:	ab03      	add	r3, sp, #12
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	462a      	mov	r2, r5
 800ad60:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <_vfiprintf_r+0x22c>)
 800ad62:	a904      	add	r1, sp, #16
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f879 	bl	800ae5c <_printf_i>
 800ad6a:	e7e4      	b.n	800ad36 <_vfiprintf_r+0x1ea>
 800ad6c:	0800b550 	.word	0x0800b550
 800ad70:	0800b55a 	.word	0x0800b55a
 800ad74:	00000000 	.word	0x00000000
 800ad78:	0800ab27 	.word	0x0800ab27
 800ad7c:	0800b556 	.word	0x0800b556

0800ad80 <_printf_common>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	4616      	mov	r6, r2
 800ad86:	4699      	mov	r9, r3
 800ad88:	688a      	ldr	r2, [r1, #8]
 800ad8a:	690b      	ldr	r3, [r1, #16]
 800ad8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad90:	4293      	cmp	r3, r2
 800ad92:	bfb8      	it	lt
 800ad94:	4613      	movlt	r3, r2
 800ad96:	6033      	str	r3, [r6, #0]
 800ad98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b10a      	cbz	r2, 800ada6 <_printf_common+0x26>
 800ada2:	3301      	adds	r3, #1
 800ada4:	6033      	str	r3, [r6, #0]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	0699      	lsls	r1, r3, #26
 800adaa:	bf42      	ittt	mi
 800adac:	6833      	ldrmi	r3, [r6, #0]
 800adae:	3302      	addmi	r3, #2
 800adb0:	6033      	strmi	r3, [r6, #0]
 800adb2:	6825      	ldr	r5, [r4, #0]
 800adb4:	f015 0506 	ands.w	r5, r5, #6
 800adb8:	d106      	bne.n	800adc8 <_printf_common+0x48>
 800adba:	f104 0a19 	add.w	sl, r4, #25
 800adbe:	68e3      	ldr	r3, [r4, #12]
 800adc0:	6832      	ldr	r2, [r6, #0]
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	dc26      	bgt.n	800ae16 <_printf_common+0x96>
 800adc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adcc:	1e13      	subs	r3, r2, #0
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	bf18      	it	ne
 800add2:	2301      	movne	r3, #1
 800add4:	0692      	lsls	r2, r2, #26
 800add6:	d42b      	bmi.n	800ae30 <_printf_common+0xb0>
 800add8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800addc:	4649      	mov	r1, r9
 800adde:	4638      	mov	r0, r7
 800ade0:	47c0      	blx	r8
 800ade2:	3001      	adds	r0, #1
 800ade4:	d01e      	beq.n	800ae24 <_printf_common+0xa4>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	6922      	ldr	r2, [r4, #16]
 800adea:	f003 0306 	and.w	r3, r3, #6
 800adee:	2b04      	cmp	r3, #4
 800adf0:	bf02      	ittt	eq
 800adf2:	68e5      	ldreq	r5, [r4, #12]
 800adf4:	6833      	ldreq	r3, [r6, #0]
 800adf6:	1aed      	subeq	r5, r5, r3
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	bf0c      	ite	eq
 800adfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae00:	2500      	movne	r5, #0
 800ae02:	4293      	cmp	r3, r2
 800ae04:	bfc4      	itt	gt
 800ae06:	1a9b      	subgt	r3, r3, r2
 800ae08:	18ed      	addgt	r5, r5, r3
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	341a      	adds	r4, #26
 800ae0e:	42b5      	cmp	r5, r6
 800ae10:	d11a      	bne.n	800ae48 <_printf_common+0xc8>
 800ae12:	2000      	movs	r0, #0
 800ae14:	e008      	b.n	800ae28 <_printf_common+0xa8>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4652      	mov	r2, sl
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	47c0      	blx	r8
 800ae20:	3001      	adds	r0, #1
 800ae22:	d103      	bne.n	800ae2c <_printf_common+0xac>
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2c:	3501      	adds	r5, #1
 800ae2e:	e7c6      	b.n	800adbe <_printf_common+0x3e>
 800ae30:	18e1      	adds	r1, r4, r3
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	2030      	movs	r0, #48	; 0x30
 800ae36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae3a:	4422      	add	r2, r4
 800ae3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae44:	3302      	adds	r3, #2
 800ae46:	e7c7      	b.n	800add8 <_printf_common+0x58>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4638      	mov	r0, r7
 800ae50:	47c0      	blx	r8
 800ae52:	3001      	adds	r0, #1
 800ae54:	d0e6      	beq.n	800ae24 <_printf_common+0xa4>
 800ae56:	3601      	adds	r6, #1
 800ae58:	e7d9      	b.n	800ae0e <_printf_common+0x8e>
	...

0800ae5c <_printf_i>:
 800ae5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	7e0f      	ldrb	r7, [r1, #24]
 800ae62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae64:	2f78      	cmp	r7, #120	; 0x78
 800ae66:	4691      	mov	r9, r2
 800ae68:	4680      	mov	r8, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	469a      	mov	sl, r3
 800ae6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae72:	d807      	bhi.n	800ae84 <_printf_i+0x28>
 800ae74:	2f62      	cmp	r7, #98	; 0x62
 800ae76:	d80a      	bhi.n	800ae8e <_printf_i+0x32>
 800ae78:	2f00      	cmp	r7, #0
 800ae7a:	f000 80d4 	beq.w	800b026 <_printf_i+0x1ca>
 800ae7e:	2f58      	cmp	r7, #88	; 0x58
 800ae80:	f000 80c0 	beq.w	800b004 <_printf_i+0x1a8>
 800ae84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae8c:	e03a      	b.n	800af04 <_printf_i+0xa8>
 800ae8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae92:	2b15      	cmp	r3, #21
 800ae94:	d8f6      	bhi.n	800ae84 <_printf_i+0x28>
 800ae96:	a101      	add	r1, pc, #4	; (adr r1, 800ae9c <_printf_i+0x40>)
 800ae98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae9c:	0800aef5 	.word	0x0800aef5
 800aea0:	0800af09 	.word	0x0800af09
 800aea4:	0800ae85 	.word	0x0800ae85
 800aea8:	0800ae85 	.word	0x0800ae85
 800aeac:	0800ae85 	.word	0x0800ae85
 800aeb0:	0800ae85 	.word	0x0800ae85
 800aeb4:	0800af09 	.word	0x0800af09
 800aeb8:	0800ae85 	.word	0x0800ae85
 800aebc:	0800ae85 	.word	0x0800ae85
 800aec0:	0800ae85 	.word	0x0800ae85
 800aec4:	0800ae85 	.word	0x0800ae85
 800aec8:	0800b00d 	.word	0x0800b00d
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800afc7 	.word	0x0800afc7
 800aed4:	0800ae85 	.word	0x0800ae85
 800aed8:	0800ae85 	.word	0x0800ae85
 800aedc:	0800b02f 	.word	0x0800b02f
 800aee0:	0800ae85 	.word	0x0800ae85
 800aee4:	0800af35 	.word	0x0800af35
 800aee8:	0800ae85 	.word	0x0800ae85
 800aeec:	0800ae85 	.word	0x0800ae85
 800aef0:	0800afcf 	.word	0x0800afcf
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	1d1a      	adds	r2, r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	602a      	str	r2, [r5, #0]
 800aefc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af04:	2301      	movs	r3, #1
 800af06:	e09f      	b.n	800b048 <_printf_i+0x1ec>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	0607      	lsls	r7, r0, #24
 800af0e:	f103 0104 	add.w	r1, r3, #4
 800af12:	6029      	str	r1, [r5, #0]
 800af14:	d501      	bpl.n	800af1a <_printf_i+0xbe>
 800af16:	681e      	ldr	r6, [r3, #0]
 800af18:	e003      	b.n	800af22 <_printf_i+0xc6>
 800af1a:	0646      	lsls	r6, r0, #25
 800af1c:	d5fb      	bpl.n	800af16 <_printf_i+0xba>
 800af1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af22:	2e00      	cmp	r6, #0
 800af24:	da03      	bge.n	800af2e <_printf_i+0xd2>
 800af26:	232d      	movs	r3, #45	; 0x2d
 800af28:	4276      	negs	r6, r6
 800af2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2e:	485a      	ldr	r0, [pc, #360]	; (800b098 <_printf_i+0x23c>)
 800af30:	230a      	movs	r3, #10
 800af32:	e012      	b.n	800af5a <_printf_i+0xfe>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	6820      	ldr	r0, [r4, #0]
 800af38:	1d19      	adds	r1, r3, #4
 800af3a:	6029      	str	r1, [r5, #0]
 800af3c:	0605      	lsls	r5, r0, #24
 800af3e:	d501      	bpl.n	800af44 <_printf_i+0xe8>
 800af40:	681e      	ldr	r6, [r3, #0]
 800af42:	e002      	b.n	800af4a <_printf_i+0xee>
 800af44:	0641      	lsls	r1, r0, #25
 800af46:	d5fb      	bpl.n	800af40 <_printf_i+0xe4>
 800af48:	881e      	ldrh	r6, [r3, #0]
 800af4a:	4853      	ldr	r0, [pc, #332]	; (800b098 <_printf_i+0x23c>)
 800af4c:	2f6f      	cmp	r7, #111	; 0x6f
 800af4e:	bf0c      	ite	eq
 800af50:	2308      	moveq	r3, #8
 800af52:	230a      	movne	r3, #10
 800af54:	2100      	movs	r1, #0
 800af56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af5a:	6865      	ldr	r5, [r4, #4]
 800af5c:	60a5      	str	r5, [r4, #8]
 800af5e:	2d00      	cmp	r5, #0
 800af60:	bfa2      	ittt	ge
 800af62:	6821      	ldrge	r1, [r4, #0]
 800af64:	f021 0104 	bicge.w	r1, r1, #4
 800af68:	6021      	strge	r1, [r4, #0]
 800af6a:	b90e      	cbnz	r6, 800af70 <_printf_i+0x114>
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	d04b      	beq.n	800b008 <_printf_i+0x1ac>
 800af70:	4615      	mov	r5, r2
 800af72:	fbb6 f1f3 	udiv	r1, r6, r3
 800af76:	fb03 6711 	mls	r7, r3, r1, r6
 800af7a:	5dc7      	ldrb	r7, [r0, r7]
 800af7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af80:	4637      	mov	r7, r6
 800af82:	42bb      	cmp	r3, r7
 800af84:	460e      	mov	r6, r1
 800af86:	d9f4      	bls.n	800af72 <_printf_i+0x116>
 800af88:	2b08      	cmp	r3, #8
 800af8a:	d10b      	bne.n	800afa4 <_printf_i+0x148>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	07de      	lsls	r6, r3, #31
 800af90:	d508      	bpl.n	800afa4 <_printf_i+0x148>
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	4299      	cmp	r1, r3
 800af98:	bfde      	ittt	le
 800af9a:	2330      	movle	r3, #48	; 0x30
 800af9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800afa4:	1b52      	subs	r2, r2, r5
 800afa6:	6122      	str	r2, [r4, #16]
 800afa8:	f8cd a000 	str.w	sl, [sp]
 800afac:	464b      	mov	r3, r9
 800afae:	aa03      	add	r2, sp, #12
 800afb0:	4621      	mov	r1, r4
 800afb2:	4640      	mov	r0, r8
 800afb4:	f7ff fee4 	bl	800ad80 <_printf_common>
 800afb8:	3001      	adds	r0, #1
 800afba:	d14a      	bne.n	800b052 <_printf_i+0x1f6>
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc0:	b004      	add	sp, #16
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f043 0320 	orr.w	r3, r3, #32
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	4833      	ldr	r0, [pc, #204]	; (800b09c <_printf_i+0x240>)
 800afd0:	2778      	movs	r7, #120	; 0x78
 800afd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	061f      	lsls	r7, r3, #24
 800afdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800afe0:	d402      	bmi.n	800afe8 <_printf_i+0x18c>
 800afe2:	065f      	lsls	r7, r3, #25
 800afe4:	bf48      	it	mi
 800afe6:	b2b6      	uxthmi	r6, r6
 800afe8:	07df      	lsls	r7, r3, #31
 800afea:	bf48      	it	mi
 800afec:	f043 0320 	orrmi.w	r3, r3, #32
 800aff0:	6029      	str	r1, [r5, #0]
 800aff2:	bf48      	it	mi
 800aff4:	6023      	strmi	r3, [r4, #0]
 800aff6:	b91e      	cbnz	r6, 800b000 <_printf_i+0x1a4>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	f023 0320 	bic.w	r3, r3, #32
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	2310      	movs	r3, #16
 800b002:	e7a7      	b.n	800af54 <_printf_i+0xf8>
 800b004:	4824      	ldr	r0, [pc, #144]	; (800b098 <_printf_i+0x23c>)
 800b006:	e7e4      	b.n	800afd2 <_printf_i+0x176>
 800b008:	4615      	mov	r5, r2
 800b00a:	e7bd      	b.n	800af88 <_printf_i+0x12c>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	6826      	ldr	r6, [r4, #0]
 800b010:	6961      	ldr	r1, [r4, #20]
 800b012:	1d18      	adds	r0, r3, #4
 800b014:	6028      	str	r0, [r5, #0]
 800b016:	0635      	lsls	r5, r6, #24
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	d501      	bpl.n	800b020 <_printf_i+0x1c4>
 800b01c:	6019      	str	r1, [r3, #0]
 800b01e:	e002      	b.n	800b026 <_printf_i+0x1ca>
 800b020:	0670      	lsls	r0, r6, #25
 800b022:	d5fb      	bpl.n	800b01c <_printf_i+0x1c0>
 800b024:	8019      	strh	r1, [r3, #0]
 800b026:	2300      	movs	r3, #0
 800b028:	6123      	str	r3, [r4, #16]
 800b02a:	4615      	mov	r5, r2
 800b02c:	e7bc      	b.n	800afa8 <_printf_i+0x14c>
 800b02e:	682b      	ldr	r3, [r5, #0]
 800b030:	1d1a      	adds	r2, r3, #4
 800b032:	602a      	str	r2, [r5, #0]
 800b034:	681d      	ldr	r5, [r3, #0]
 800b036:	6862      	ldr	r2, [r4, #4]
 800b038:	2100      	movs	r1, #0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f7fd f8d0 	bl	80081e0 <memchr>
 800b040:	b108      	cbz	r0, 800b046 <_printf_i+0x1ea>
 800b042:	1b40      	subs	r0, r0, r5
 800b044:	6060      	str	r0, [r4, #4]
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	2300      	movs	r3, #0
 800b04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b050:	e7aa      	b.n	800afa8 <_printf_i+0x14c>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	462a      	mov	r2, r5
 800b056:	4649      	mov	r1, r9
 800b058:	4640      	mov	r0, r8
 800b05a:	47d0      	blx	sl
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0ad      	beq.n	800afbc <_printf_i+0x160>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	079b      	lsls	r3, r3, #30
 800b064:	d413      	bmi.n	800b08e <_printf_i+0x232>
 800b066:	68e0      	ldr	r0, [r4, #12]
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	4298      	cmp	r0, r3
 800b06c:	bfb8      	it	lt
 800b06e:	4618      	movlt	r0, r3
 800b070:	e7a6      	b.n	800afc0 <_printf_i+0x164>
 800b072:	2301      	movs	r3, #1
 800b074:	4632      	mov	r2, r6
 800b076:	4649      	mov	r1, r9
 800b078:	4640      	mov	r0, r8
 800b07a:	47d0      	blx	sl
 800b07c:	3001      	adds	r0, #1
 800b07e:	d09d      	beq.n	800afbc <_printf_i+0x160>
 800b080:	3501      	adds	r5, #1
 800b082:	68e3      	ldr	r3, [r4, #12]
 800b084:	9903      	ldr	r1, [sp, #12]
 800b086:	1a5b      	subs	r3, r3, r1
 800b088:	42ab      	cmp	r3, r5
 800b08a:	dcf2      	bgt.n	800b072 <_printf_i+0x216>
 800b08c:	e7eb      	b.n	800b066 <_printf_i+0x20a>
 800b08e:	2500      	movs	r5, #0
 800b090:	f104 0619 	add.w	r6, r4, #25
 800b094:	e7f5      	b.n	800b082 <_printf_i+0x226>
 800b096:	bf00      	nop
 800b098:	0800b561 	.word	0x0800b561
 800b09c:	0800b572 	.word	0x0800b572

0800b0a0 <__sflush_r>:
 800b0a0:	898a      	ldrh	r2, [r1, #12]
 800b0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	0710      	lsls	r0, r2, #28
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	d458      	bmi.n	800b160 <__sflush_r+0xc0>
 800b0ae:	684b      	ldr	r3, [r1, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dc05      	bgt.n	800b0c0 <__sflush_r+0x20>
 800b0b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dc02      	bgt.n	800b0c0 <__sflush_r+0x20>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0c2:	2e00      	cmp	r6, #0
 800b0c4:	d0f9      	beq.n	800b0ba <__sflush_r+0x1a>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0cc:	682f      	ldr	r7, [r5, #0]
 800b0ce:	6a21      	ldr	r1, [r4, #32]
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	d032      	beq.n	800b13a <__sflush_r+0x9a>
 800b0d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	075a      	lsls	r2, r3, #29
 800b0da:	d505      	bpl.n	800b0e8 <__sflush_r+0x48>
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	1ac0      	subs	r0, r0, r3
 800b0e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0e2:	b10b      	cbz	r3, 800b0e8 <__sflush_r+0x48>
 800b0e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0e6:	1ac0      	subs	r0, r0, r3
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ee:	6a21      	ldr	r1, [r4, #32]
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b0      	blx	r6
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	d106      	bne.n	800b108 <__sflush_r+0x68>
 800b0fa:	6829      	ldr	r1, [r5, #0]
 800b0fc:	291d      	cmp	r1, #29
 800b0fe:	d82b      	bhi.n	800b158 <__sflush_r+0xb8>
 800b100:	4a29      	ldr	r2, [pc, #164]	; (800b1a8 <__sflush_r+0x108>)
 800b102:	410a      	asrs	r2, r1
 800b104:	07d6      	lsls	r6, r2, #31
 800b106:	d427      	bmi.n	800b158 <__sflush_r+0xb8>
 800b108:	2200      	movs	r2, #0
 800b10a:	6062      	str	r2, [r4, #4]
 800b10c:	04d9      	lsls	r1, r3, #19
 800b10e:	6922      	ldr	r2, [r4, #16]
 800b110:	6022      	str	r2, [r4, #0]
 800b112:	d504      	bpl.n	800b11e <__sflush_r+0x7e>
 800b114:	1c42      	adds	r2, r0, #1
 800b116:	d101      	bne.n	800b11c <__sflush_r+0x7c>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b903      	cbnz	r3, 800b11e <__sflush_r+0x7e>
 800b11c:	6560      	str	r0, [r4, #84]	; 0x54
 800b11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b120:	602f      	str	r7, [r5, #0]
 800b122:	2900      	cmp	r1, #0
 800b124:	d0c9      	beq.n	800b0ba <__sflush_r+0x1a>
 800b126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b12a:	4299      	cmp	r1, r3
 800b12c:	d002      	beq.n	800b134 <__sflush_r+0x94>
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff fc96 	bl	800aa60 <_free_r>
 800b134:	2000      	movs	r0, #0
 800b136:	6360      	str	r0, [r4, #52]	; 0x34
 800b138:	e7c0      	b.n	800b0bc <__sflush_r+0x1c>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b0      	blx	r6
 800b140:	1c41      	adds	r1, r0, #1
 800b142:	d1c8      	bne.n	800b0d6 <__sflush_r+0x36>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <__sflush_r+0x36>
 800b14a:	2b1d      	cmp	r3, #29
 800b14c:	d001      	beq.n	800b152 <__sflush_r+0xb2>
 800b14e:	2b16      	cmp	r3, #22
 800b150:	d101      	bne.n	800b156 <__sflush_r+0xb6>
 800b152:	602f      	str	r7, [r5, #0]
 800b154:	e7b1      	b.n	800b0ba <__sflush_r+0x1a>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	e7ad      	b.n	800b0bc <__sflush_r+0x1c>
 800b160:	690f      	ldr	r7, [r1, #16]
 800b162:	2f00      	cmp	r7, #0
 800b164:	d0a9      	beq.n	800b0ba <__sflush_r+0x1a>
 800b166:	0793      	lsls	r3, r2, #30
 800b168:	680e      	ldr	r6, [r1, #0]
 800b16a:	bf08      	it	eq
 800b16c:	694b      	ldreq	r3, [r1, #20]
 800b16e:	600f      	str	r7, [r1, #0]
 800b170:	bf18      	it	ne
 800b172:	2300      	movne	r3, #0
 800b174:	eba6 0807 	sub.w	r8, r6, r7
 800b178:	608b      	str	r3, [r1, #8]
 800b17a:	f1b8 0f00 	cmp.w	r8, #0
 800b17e:	dd9c      	ble.n	800b0ba <__sflush_r+0x1a>
 800b180:	6a21      	ldr	r1, [r4, #32]
 800b182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b184:	4643      	mov	r3, r8
 800b186:	463a      	mov	r2, r7
 800b188:	4628      	mov	r0, r5
 800b18a:	47b0      	blx	r6
 800b18c:	2800      	cmp	r0, #0
 800b18e:	dc06      	bgt.n	800b19e <__sflush_r+0xfe>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b196:	81a3      	strh	r3, [r4, #12]
 800b198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b19c:	e78e      	b.n	800b0bc <__sflush_r+0x1c>
 800b19e:	4407      	add	r7, r0
 800b1a0:	eba8 0800 	sub.w	r8, r8, r0
 800b1a4:	e7e9      	b.n	800b17a <__sflush_r+0xda>
 800b1a6:	bf00      	nop
 800b1a8:	dfbffffe 	.word	0xdfbffffe

0800b1ac <_fflush_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	690b      	ldr	r3, [r1, #16]
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	b913      	cbnz	r3, 800b1bc <_fflush_r+0x10>
 800b1b6:	2500      	movs	r5, #0
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	b118      	cbz	r0, 800b1c6 <_fflush_r+0x1a>
 800b1be:	6a03      	ldr	r3, [r0, #32]
 800b1c0:	b90b      	cbnz	r3, 800b1c6 <_fflush_r+0x1a>
 800b1c2:	f7ff fa25 	bl	800a610 <__sinit>
 800b1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0f3      	beq.n	800b1b6 <_fflush_r+0xa>
 800b1ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1d0:	07d0      	lsls	r0, r2, #31
 800b1d2:	d404      	bmi.n	800b1de <_fflush_r+0x32>
 800b1d4:	0599      	lsls	r1, r3, #22
 800b1d6:	d402      	bmi.n	800b1de <_fflush_r+0x32>
 800b1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1da:	f7ff fc3e 	bl	800aa5a <__retarget_lock_acquire_recursive>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	f7ff ff5d 	bl	800b0a0 <__sflush_r>
 800b1e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e8:	07da      	lsls	r2, r3, #31
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	d4e4      	bmi.n	800b1b8 <_fflush_r+0xc>
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	059b      	lsls	r3, r3, #22
 800b1f2:	d4e1      	bmi.n	800b1b8 <_fflush_r+0xc>
 800b1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1f6:	f7ff fc31 	bl	800aa5c <__retarget_lock_release_recursive>
 800b1fa:	e7dd      	b.n	800b1b8 <_fflush_r+0xc>

0800b1fc <__swhatbuf_r>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b204:	2900      	cmp	r1, #0
 800b206:	b096      	sub	sp, #88	; 0x58
 800b208:	4615      	mov	r5, r2
 800b20a:	461e      	mov	r6, r3
 800b20c:	da0d      	bge.n	800b22a <__swhatbuf_r+0x2e>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b214:	f04f 0100 	mov.w	r1, #0
 800b218:	bf0c      	ite	eq
 800b21a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b21e:	2340      	movne	r3, #64	; 0x40
 800b220:	2000      	movs	r0, #0
 800b222:	6031      	str	r1, [r6, #0]
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	b016      	add	sp, #88	; 0x58
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	466a      	mov	r2, sp
 800b22c:	f000 f848 	bl	800b2c0 <_fstat_r>
 800b230:	2800      	cmp	r0, #0
 800b232:	dbec      	blt.n	800b20e <__swhatbuf_r+0x12>
 800b234:	9901      	ldr	r1, [sp, #4]
 800b236:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b23a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b23e:	4259      	negs	r1, r3
 800b240:	4159      	adcs	r1, r3
 800b242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b246:	e7eb      	b.n	800b220 <__swhatbuf_r+0x24>

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b002      	add	sp, #8
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	ab01      	add	r3, sp, #4
 800b266:	466a      	mov	r2, sp
 800b268:	f7ff ffc8 	bl	800b1fc <__swhatbuf_r>
 800b26c:	9900      	ldr	r1, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff f8b5 	bl	800a3e0 <_malloc_r>
 800b276:	b948      	cbnz	r0, 800b28c <__smakebuf_r+0x44>
 800b278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d4ef      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b280:	f023 0303 	bic.w	r3, r3, #3
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e7e3      	b.n	800b254 <__smakebuf_r+0xc>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	6020      	str	r0, [r4, #0]
 800b290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	6163      	str	r3, [r4, #20]
 800b29a:	9b01      	ldr	r3, [sp, #4]
 800b29c:	6120      	str	r0, [r4, #16]
 800b29e:	b15b      	cbz	r3, 800b2b8 <__smakebuf_r+0x70>
 800b2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f000 f81d 	bl	800b2e4 <_isatty_r>
 800b2aa:	b128      	cbz	r0, 800b2b8 <__smakebuf_r+0x70>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f023 0303 	bic.w	r3, r3, #3
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	431d      	orrs	r5, r3
 800b2bc:	81a5      	strh	r5, [r4, #12]
 800b2be:	e7cf      	b.n	800b260 <__smakebuf_r+0x18>

0800b2c0 <_fstat_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d07      	ldr	r5, [pc, #28]	; (800b2e0 <_fstat_r+0x20>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	f7fd fce2 	bl	8008c96 <_fstat>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	d102      	bne.n	800b2dc <_fstat_r+0x1c>
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	b103      	cbz	r3, 800b2dc <_fstat_r+0x1c>
 800b2da:	6023      	str	r3, [r4, #0]
 800b2dc:	bd38      	pop	{r3, r4, r5, pc}
 800b2de:	bf00      	nop
 800b2e0:	2000031c 	.word	0x2000031c

0800b2e4 <_isatty_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d06      	ldr	r5, [pc, #24]	; (800b300 <_isatty_r+0x1c>)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	f7fd fce1 	bl	8008cb6 <_isatty>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_isatty_r+0x1a>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_isatty_r+0x1a>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	2000031c 	.word	0x2000031c

0800b304 <_init>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr

0800b310 <_fini>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr
