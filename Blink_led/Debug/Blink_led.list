
Blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800abb4  0800abb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd8  0800acd8  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd8  0800acd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace0  0800ace0  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace0  0800ace0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace4  0800ace4  0000ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ace8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          000001bc  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008069  00000000  00000000  000100db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001779  00000000  00000000  00018144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  000198c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000575  00000000  00000000  00019ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020cfa  00000000  00000000  0001a56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000884a  00000000  00000000  0003b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c46a8  00000000  00000000  00043ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002250  00000000  00000000  0010815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0010a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	20000068 	.word	0x20000068
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800ab9c 	.word	0x0800ab9c

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	2000006c 	.word	0x2000006c
 80081c4:	0800ab9c 	.word	0x0800ab9c

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081dc:	f000 b970 	b.w	80084c0 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	460d      	mov	r5, r1
 8008200:	4604      	mov	r4, r0
 8008202:	460f      	mov	r7, r1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d14a      	bne.n	800829e <__udivmoddi4+0xa6>
 8008208:	428a      	cmp	r2, r1
 800820a:	4694      	mov	ip, r2
 800820c:	d965      	bls.n	80082da <__udivmoddi4+0xe2>
 800820e:	fab2 f382 	clz	r3, r2
 8008212:	b143      	cbz	r3, 8008226 <__udivmoddi4+0x2e>
 8008214:	fa02 fc03 	lsl.w	ip, r2, r3
 8008218:	f1c3 0220 	rsb	r2, r3, #32
 800821c:	409f      	lsls	r7, r3
 800821e:	fa20 f202 	lsr.w	r2, r0, r2
 8008222:	4317      	orrs	r7, r2
 8008224:	409c      	lsls	r4, r3
 8008226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800822a:	fa1f f58c 	uxth.w	r5, ip
 800822e:	fbb7 f1fe 	udiv	r1, r7, lr
 8008232:	0c22      	lsrs	r2, r4, #16
 8008234:	fb0e 7711 	mls	r7, lr, r1, r7
 8008238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800823c:	fb01 f005 	mul.w	r0, r1, r5
 8008240:	4290      	cmp	r0, r2
 8008242:	d90a      	bls.n	800825a <__udivmoddi4+0x62>
 8008244:	eb1c 0202 	adds.w	r2, ip, r2
 8008248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800824c:	f080 811c 	bcs.w	8008488 <__udivmoddi4+0x290>
 8008250:	4290      	cmp	r0, r2
 8008252:	f240 8119 	bls.w	8008488 <__udivmoddi4+0x290>
 8008256:	3902      	subs	r1, #2
 8008258:	4462      	add	r2, ip
 800825a:	1a12      	subs	r2, r2, r0
 800825c:	b2a4      	uxth	r4, r4
 800825e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008262:	fb0e 2210 	mls	r2, lr, r0, r2
 8008266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800826a:	fb00 f505 	mul.w	r5, r0, r5
 800826e:	42a5      	cmp	r5, r4
 8008270:	d90a      	bls.n	8008288 <__udivmoddi4+0x90>
 8008272:	eb1c 0404 	adds.w	r4, ip, r4
 8008276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800827a:	f080 8107 	bcs.w	800848c <__udivmoddi4+0x294>
 800827e:	42a5      	cmp	r5, r4
 8008280:	f240 8104 	bls.w	800848c <__udivmoddi4+0x294>
 8008284:	4464      	add	r4, ip
 8008286:	3802      	subs	r0, #2
 8008288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	2100      	movs	r1, #0
 8008290:	b11e      	cbz	r6, 800829a <__udivmoddi4+0xa2>
 8008292:	40dc      	lsrs	r4, r3
 8008294:	2300      	movs	r3, #0
 8008296:	e9c6 4300 	strd	r4, r3, [r6]
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d908      	bls.n	80082b4 <__udivmoddi4+0xbc>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f000 80ed 	beq.w	8008482 <__udivmoddi4+0x28a>
 80082a8:	2100      	movs	r1, #0
 80082aa:	e9c6 0500 	strd	r0, r5, [r6]
 80082ae:	4608      	mov	r0, r1
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	fab3 f183 	clz	r1, r3
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d149      	bne.n	8008350 <__udivmoddi4+0x158>
 80082bc:	42ab      	cmp	r3, r5
 80082be:	d302      	bcc.n	80082c6 <__udivmoddi4+0xce>
 80082c0:	4282      	cmp	r2, r0
 80082c2:	f200 80f8 	bhi.w	80084b6 <__udivmoddi4+0x2be>
 80082c6:	1a84      	subs	r4, r0, r2
 80082c8:	eb65 0203 	sbc.w	r2, r5, r3
 80082cc:	2001      	movs	r0, #1
 80082ce:	4617      	mov	r7, r2
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	d0e2      	beq.n	800829a <__udivmoddi4+0xa2>
 80082d4:	e9c6 4700 	strd	r4, r7, [r6]
 80082d8:	e7df      	b.n	800829a <__udivmoddi4+0xa2>
 80082da:	b902      	cbnz	r2, 80082de <__udivmoddi4+0xe6>
 80082dc:	deff      	udf	#255	; 0xff
 80082de:	fab2 f382 	clz	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 8090 	bne.w	8008408 <__udivmoddi4+0x210>
 80082e8:	1a8a      	subs	r2, r1, r2
 80082ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082ee:	fa1f fe8c 	uxth.w	lr, ip
 80082f2:	2101      	movs	r1, #1
 80082f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80082f8:	fb07 2015 	mls	r0, r7, r5, r2
 80082fc:	0c22      	lsrs	r2, r4, #16
 80082fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008302:	fb0e f005 	mul.w	r0, lr, r5
 8008306:	4290      	cmp	r0, r2
 8008308:	d908      	bls.n	800831c <__udivmoddi4+0x124>
 800830a:	eb1c 0202 	adds.w	r2, ip, r2
 800830e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008312:	d202      	bcs.n	800831a <__udivmoddi4+0x122>
 8008314:	4290      	cmp	r0, r2
 8008316:	f200 80cb 	bhi.w	80084b0 <__udivmoddi4+0x2b8>
 800831a:	4645      	mov	r5, r8
 800831c:	1a12      	subs	r2, r2, r0
 800831e:	b2a4      	uxth	r4, r4
 8008320:	fbb2 f0f7 	udiv	r0, r2, r7
 8008324:	fb07 2210 	mls	r2, r7, r0, r2
 8008328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800832c:	fb0e fe00 	mul.w	lr, lr, r0
 8008330:	45a6      	cmp	lr, r4
 8008332:	d908      	bls.n	8008346 <__udivmoddi4+0x14e>
 8008334:	eb1c 0404 	adds.w	r4, ip, r4
 8008338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800833c:	d202      	bcs.n	8008344 <__udivmoddi4+0x14c>
 800833e:	45a6      	cmp	lr, r4
 8008340:	f200 80bb 	bhi.w	80084ba <__udivmoddi4+0x2c2>
 8008344:	4610      	mov	r0, r2
 8008346:	eba4 040e 	sub.w	r4, r4, lr
 800834a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800834e:	e79f      	b.n	8008290 <__udivmoddi4+0x98>
 8008350:	f1c1 0720 	rsb	r7, r1, #32
 8008354:	408b      	lsls	r3, r1
 8008356:	fa22 fc07 	lsr.w	ip, r2, r7
 800835a:	ea4c 0c03 	orr.w	ip, ip, r3
 800835e:	fa05 f401 	lsl.w	r4, r5, r1
 8008362:	fa20 f307 	lsr.w	r3, r0, r7
 8008366:	40fd      	lsrs	r5, r7
 8008368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800836c:	4323      	orrs	r3, r4
 800836e:	fbb5 f8f9 	udiv	r8, r5, r9
 8008372:	fa1f fe8c 	uxth.w	lr, ip
 8008376:	fb09 5518 	mls	r5, r9, r8, r5
 800837a:	0c1c      	lsrs	r4, r3, #16
 800837c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008380:	fb08 f50e 	mul.w	r5, r8, lr
 8008384:	42a5      	cmp	r5, r4
 8008386:	fa02 f201 	lsl.w	r2, r2, r1
 800838a:	fa00 f001 	lsl.w	r0, r0, r1
 800838e:	d90b      	bls.n	80083a8 <__udivmoddi4+0x1b0>
 8008390:	eb1c 0404 	adds.w	r4, ip, r4
 8008394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008398:	f080 8088 	bcs.w	80084ac <__udivmoddi4+0x2b4>
 800839c:	42a5      	cmp	r5, r4
 800839e:	f240 8085 	bls.w	80084ac <__udivmoddi4+0x2b4>
 80083a2:	f1a8 0802 	sub.w	r8, r8, #2
 80083a6:	4464      	add	r4, ip
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	b29d      	uxth	r5, r3
 80083ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80083b0:	fb09 4413 	mls	r4, r9, r3, r4
 80083b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80083bc:	45a6      	cmp	lr, r4
 80083be:	d908      	bls.n	80083d2 <__udivmoddi4+0x1da>
 80083c0:	eb1c 0404 	adds.w	r4, ip, r4
 80083c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80083c8:	d26c      	bcs.n	80084a4 <__udivmoddi4+0x2ac>
 80083ca:	45a6      	cmp	lr, r4
 80083cc:	d96a      	bls.n	80084a4 <__udivmoddi4+0x2ac>
 80083ce:	3b02      	subs	r3, #2
 80083d0:	4464      	add	r4, ip
 80083d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083d6:	fba3 9502 	umull	r9, r5, r3, r2
 80083da:	eba4 040e 	sub.w	r4, r4, lr
 80083de:	42ac      	cmp	r4, r5
 80083e0:	46c8      	mov	r8, r9
 80083e2:	46ae      	mov	lr, r5
 80083e4:	d356      	bcc.n	8008494 <__udivmoddi4+0x29c>
 80083e6:	d053      	beq.n	8008490 <__udivmoddi4+0x298>
 80083e8:	b156      	cbz	r6, 8008400 <__udivmoddi4+0x208>
 80083ea:	ebb0 0208 	subs.w	r2, r0, r8
 80083ee:	eb64 040e 	sbc.w	r4, r4, lr
 80083f2:	fa04 f707 	lsl.w	r7, r4, r7
 80083f6:	40ca      	lsrs	r2, r1
 80083f8:	40cc      	lsrs	r4, r1
 80083fa:	4317      	orrs	r7, r2
 80083fc:	e9c6 7400 	strd	r7, r4, [r6]
 8008400:	4618      	mov	r0, r3
 8008402:	2100      	movs	r1, #0
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	f1c3 0120 	rsb	r1, r3, #32
 800840c:	fa02 fc03 	lsl.w	ip, r2, r3
 8008410:	fa20 f201 	lsr.w	r2, r0, r1
 8008414:	fa25 f101 	lsr.w	r1, r5, r1
 8008418:	409d      	lsls	r5, r3
 800841a:	432a      	orrs	r2, r5
 800841c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008420:	fa1f fe8c 	uxth.w	lr, ip
 8008424:	fbb1 f0f7 	udiv	r0, r1, r7
 8008428:	fb07 1510 	mls	r5, r7, r0, r1
 800842c:	0c11      	lsrs	r1, r2, #16
 800842e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008432:	fb00 f50e 	mul.w	r5, r0, lr
 8008436:	428d      	cmp	r5, r1
 8008438:	fa04 f403 	lsl.w	r4, r4, r3
 800843c:	d908      	bls.n	8008450 <__udivmoddi4+0x258>
 800843e:	eb1c 0101 	adds.w	r1, ip, r1
 8008442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008446:	d22f      	bcs.n	80084a8 <__udivmoddi4+0x2b0>
 8008448:	428d      	cmp	r5, r1
 800844a:	d92d      	bls.n	80084a8 <__udivmoddi4+0x2b0>
 800844c:	3802      	subs	r0, #2
 800844e:	4461      	add	r1, ip
 8008450:	1b49      	subs	r1, r1, r5
 8008452:	b292      	uxth	r2, r2
 8008454:	fbb1 f5f7 	udiv	r5, r1, r7
 8008458:	fb07 1115 	mls	r1, r7, r5, r1
 800845c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008460:	fb05 f10e 	mul.w	r1, r5, lr
 8008464:	4291      	cmp	r1, r2
 8008466:	d908      	bls.n	800847a <__udivmoddi4+0x282>
 8008468:	eb1c 0202 	adds.w	r2, ip, r2
 800846c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008470:	d216      	bcs.n	80084a0 <__udivmoddi4+0x2a8>
 8008472:	4291      	cmp	r1, r2
 8008474:	d914      	bls.n	80084a0 <__udivmoddi4+0x2a8>
 8008476:	3d02      	subs	r5, #2
 8008478:	4462      	add	r2, ip
 800847a:	1a52      	subs	r2, r2, r1
 800847c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008480:	e738      	b.n	80082f4 <__udivmoddi4+0xfc>
 8008482:	4631      	mov	r1, r6
 8008484:	4630      	mov	r0, r6
 8008486:	e708      	b.n	800829a <__udivmoddi4+0xa2>
 8008488:	4639      	mov	r1, r7
 800848a:	e6e6      	b.n	800825a <__udivmoddi4+0x62>
 800848c:	4610      	mov	r0, r2
 800848e:	e6fb      	b.n	8008288 <__udivmoddi4+0x90>
 8008490:	4548      	cmp	r0, r9
 8008492:	d2a9      	bcs.n	80083e8 <__udivmoddi4+0x1f0>
 8008494:	ebb9 0802 	subs.w	r8, r9, r2
 8008498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800849c:	3b01      	subs	r3, #1
 800849e:	e7a3      	b.n	80083e8 <__udivmoddi4+0x1f0>
 80084a0:	4645      	mov	r5, r8
 80084a2:	e7ea      	b.n	800847a <__udivmoddi4+0x282>
 80084a4:	462b      	mov	r3, r5
 80084a6:	e794      	b.n	80083d2 <__udivmoddi4+0x1da>
 80084a8:	4640      	mov	r0, r8
 80084aa:	e7d1      	b.n	8008450 <__udivmoddi4+0x258>
 80084ac:	46d0      	mov	r8, sl
 80084ae:	e77b      	b.n	80083a8 <__udivmoddi4+0x1b0>
 80084b0:	3d02      	subs	r5, #2
 80084b2:	4462      	add	r2, ip
 80084b4:	e732      	b.n	800831c <__udivmoddi4+0x124>
 80084b6:	4608      	mov	r0, r1
 80084b8:	e70a      	b.n	80082d0 <__udivmoddi4+0xd8>
 80084ba:	4464      	add	r4, ip
 80084bc:	3802      	subs	r0, #2
 80084be:	e742      	b.n	8008346 <__udivmoddi4+0x14e>

080084c0 <__aeabi_idiv0>:
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80084ca:	f000 fb0f 	bl	8008aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084ce:	f000 f85b 	bl	8008588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d2:	f000 f8ed 	bl	80086b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80084d6:	f000 f8c1 	bl	800865c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialisation du WiFi
  WiFi_Status_t esp_init(const char *ssid, const char *password);

      //wifi_status= esp_init (WIFI_SSID, WIFI_PASSWORD);
      if (wifi_status == WiFi_OK) {
 80084da:	4b1f      	ldr	r3, [pc, #124]	; (8008558 <main+0x94>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d126      	bne.n	8008530 <main+0x6c>
          printf("WiFi connecté avec succès.\n");
 80084e2:	481e      	ldr	r0, [pc, #120]	; (800855c <main+0x98>)
 80084e4:	f001 ffc4 	bl	800a470 <puts>

          // Connexion au broker MQTT
          MQTT_Status_t MQTT_Connect(const char *broker_address, const char *client_id);

          //mqtt_status = MQTT_Connect(MQTT_BROKER_ADDRESS, MQTT_CLIENT_ID);
          if (mqtt_status == MQTT_OK) {
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <main+0x9c>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d11b      	bne.n	8008528 <main+0x64>
              printf("Connexion MQTT réussie.\n");
 80084f0:	481c      	ldr	r0, [pc, #112]	; (8008564 <main+0xa0>)
 80084f2:	f001 ffbd 	bl	800a470 <puts>

              // Publication d'un message
              const char *message = "Hello MQTT!";
 80084f6:	4b1c      	ldr	r3, [pc, #112]	; (8008568 <main+0xa4>)
 80084f8:	607b      	str	r3, [r7, #4]
              MQTT_Status_t MQTT_Subscribe(const char *topic);

              //mqtt_status = MQTT_Publish(MQTT_TOPIC, message);
              if (mqtt_status == MQTT_OK) {
 80084fa:	4b19      	ldr	r3, [pc, #100]	; (8008560 <main+0x9c>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10e      	bne.n	8008520 <main+0x5c>
                  printf("Message publié avec succès.\n");
 8008502:	481a      	ldr	r0, [pc, #104]	; (800856c <main+0xa8>)
 8008504:	f001 ffb4 	bl	800a470 <puts>

                  // Déconnexion du broker MQTT
                  MQTT_Status_t MQTT_Disconnect(void);

                 //mqtt_status = MQTT_Disconnect();
                  if (mqtt_status == MQTT_OK) {
 8008508:	4b15      	ldr	r3, [pc, #84]	; (8008560 <main+0x9c>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <main+0x54>
                      printf("Déconnexion MQTT réussie.\n");
 8008510:	4817      	ldr	r0, [pc, #92]	; (8008570 <main+0xac>)
 8008512:	f001 ffad 	bl	800a470 <puts>
 8008516:	e00e      	b.n	8008536 <main+0x72>
                  } else {
                      printf("Échec de la déconnexion MQTT.\n");
 8008518:	4816      	ldr	r0, [pc, #88]	; (8008574 <main+0xb0>)
 800851a:	f001 ffa9 	bl	800a470 <puts>
 800851e:	e00a      	b.n	8008536 <main+0x72>
                  }
              } else {
                  printf("Échec de la publication du message MQTT.\n");
 8008520:	4815      	ldr	r0, [pc, #84]	; (8008578 <main+0xb4>)
 8008522:	f001 ffa5 	bl	800a470 <puts>
 8008526:	e006      	b.n	8008536 <main+0x72>
              }
          } else {
              printf("Échec de la connexion MQTT.\n");
 8008528:	4814      	ldr	r0, [pc, #80]	; (800857c <main+0xb8>)
 800852a:	f001 ffa1 	bl	800a470 <puts>
 800852e:	e002      	b.n	8008536 <main+0x72>
          }
      } else {
          printf("Erreur de connexion WiFi.\n");
 8008530:	4813      	ldr	r0, [pc, #76]	; (8008580 <main+0xbc>)
 8008532:	f001 ff9d 	bl	800a470 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8008536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800853a:	4812      	ldr	r0, [pc, #72]	; (8008584 <main+0xc0>)
 800853c:	f000 fe3d 	bl	80091ba <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8008540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008544:	f000 fb7a 	bl	8008c3c <HAL_Delay>

    // Ajoutez une condition pour sauter à l'application 2 ici
    // par exemple, après un certain délai ou un événement spécifique
    HAL_Delay(5000); // délai de 10 secondes
 8008548:	f241 3088 	movw	r0, #5000	; 0x1388
 800854c:	f000 fb76 	bl	8008c3c <HAL_Delay>
    JumpToApplication2();
 8008550:	f000 f92e 	bl	80087b0 <JumpToApplication2>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8008554:	e7ef      	b.n	8008536 <main+0x72>
 8008556:	bf00      	nop
 8008558:	20000084 	.word	0x20000084
 800855c:	0800abb4 	.word	0x0800abb4
 8008560:	20000085 	.word	0x20000085
 8008564:	0800abd4 	.word	0x0800abd4
 8008568:	0800abf0 	.word	0x0800abf0
 800856c:	0800abfc 	.word	0x0800abfc
 8008570:	0800ac1c 	.word	0x0800ac1c
 8008574:	0800ac38 	.word	0x0800ac38
 8008578:	0800ac58 	.word	0x0800ac58
 800857c:	0800ac84 	.word	0x0800ac84
 8008580:	0800aca4 	.word	0x0800aca4
 8008584:	40020c00 	.word	0x40020c00

08008588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b094      	sub	sp, #80	; 0x50
 800858c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800858e:	f107 0320 	add.w	r3, r7, #32
 8008592:	2230      	movs	r2, #48	; 0x30
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f002 f84a 	bl	800a630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800859c:	f107 030c 	add.w	r3, r7, #12
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80085ac:	2300      	movs	r3, #0
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <SystemClock_Config+0xcc>)
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	4a27      	ldr	r2, [pc, #156]	; (8008654 <SystemClock_Config+0xcc>)
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	6413      	str	r3, [r2, #64]	; 0x40
 80085bc:	4b25      	ldr	r3, [pc, #148]	; (8008654 <SystemClock_Config+0xcc>)
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085c8:	2300      	movs	r3, #0
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	4b22      	ldr	r3, [pc, #136]	; (8008658 <SystemClock_Config+0xd0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a21      	ldr	r2, [pc, #132]	; (8008658 <SystemClock_Config+0xd0>)
 80085d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	4b1f      	ldr	r3, [pc, #124]	; (8008658 <SystemClock_Config+0xd0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085ee:	2302      	movs	r3, #2
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80085f8:	2308      	movs	r3, #8
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80085fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008602:	2302      	movs	r3, #2
 8008604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008606:	2307      	movs	r3, #7
 8008608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800860a:	f107 0320 	add.w	r3, r7, #32
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fdee 	bl	80091f0 <HAL_RCC_OscConfig>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800861a:	f000 f8e7 	bl	80087ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800861e:	230f      	movs	r3, #15
 8008620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008622:	2302      	movs	r3, #2
 8008624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800862a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800862e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	2105      	movs	r1, #5
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f84f 	bl	80096e0 <HAL_RCC_ClockConfig>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008648:	f000 f8d0 	bl	80087ec <Error_Handler>
  }
}
 800864c:	bf00      	nop
 800864e:	3750      	adds	r7, #80	; 0x50
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	40023800 	.word	0x40023800
 8008658:	40007000 	.word	0x40007000

0800865c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008660:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008662:	4a12      	ldr	r2, [pc, #72]	; (80086ac <MX_USART2_UART_Init+0x50>)
 8008664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800866c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800866e:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008670:	2200      	movs	r2, #0
 8008672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008676:	2200      	movs	r2, #0
 8008678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 800867c:	2200      	movs	r2, #0
 800867e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008682:	220c      	movs	r2, #12
 8008684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008688:	2200      	movs	r2, #0
 800868a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 800868e:	2200      	movs	r2, #0
 8008690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008692:	4805      	ldr	r0, [pc, #20]	; (80086a8 <MX_USART2_UART_Init+0x4c>)
 8008694:	f001 fb12 	bl	8009cbc <HAL_UART_Init>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800869e:	f000 f8a5 	bl	80087ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80086a2:	bf00      	nop
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000088 	.word	0x20000088
 80086ac:	40004400 	.word	0x40004400

080086b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b6:	f107 030c 	add.w	r3, r7, #12
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	609a      	str	r2, [r3, #8]
 80086c2:	60da      	str	r2, [r3, #12]
 80086c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	4b20      	ldr	r3, [pc, #128]	; (800874c <MX_GPIO_Init+0x9c>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a1f      	ldr	r2, [pc, #124]	; (800874c <MX_GPIO_Init+0x9c>)
 80086d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b1d      	ldr	r3, [pc, #116]	; (800874c <MX_GPIO_Init+0x9c>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	4b19      	ldr	r3, [pc, #100]	; (800874c <MX_GPIO_Init+0x9c>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a18      	ldr	r2, [pc, #96]	; (800874c <MX_GPIO_Init+0x9c>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6313      	str	r3, [r2, #48]	; 0x30
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <MX_GPIO_Init+0x9c>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086fe:	2300      	movs	r3, #0
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	4b12      	ldr	r3, [pc, #72]	; (800874c <MX_GPIO_Init+0x9c>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	4a11      	ldr	r2, [pc, #68]	; (800874c <MX_GPIO_Init+0x9c>)
 8008708:	f043 0308 	orr.w	r3, r3, #8
 800870c:	6313      	str	r3, [r2, #48]	; 0x30
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <MX_GPIO_Init+0x9c>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800871a:	2200      	movs	r2, #0
 800871c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008720:	480b      	ldr	r0, [pc, #44]	; (8008750 <MX_GPIO_Init+0xa0>)
 8008722:	f000 fd31 	bl	8009188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800872a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800872c:	2301      	movs	r3, #1
 800872e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008738:	f107 030c 	add.w	r3, r7, #12
 800873c:	4619      	mov	r1, r3
 800873e:	4804      	ldr	r0, [pc, #16]	; (8008750 <MX_GPIO_Init+0xa0>)
 8008740:	f000 fb86 	bl	8008e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008744:	bf00      	nop
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40023800 	.word	0x40023800
 8008750:	40020c00 	.word	0x40020c00

08008754 <deinitEverything>:

/* USER CODE BEGIN 4 */

void deinitEverything()
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_DISABLE();
 8008758:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <deinitEverything+0x54>)
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	4a12      	ldr	r2, [pc, #72]	; (80087a8 <deinitEverything+0x54>)
 800875e:	f023 0304 	bic.w	r3, r3, #4
 8008762:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_DISABLE();
 8008764:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <deinitEverything+0x54>)
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <deinitEverything+0x54>)
 800876a:	f023 0308 	bic.w	r3, r3, #8
 800876e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <deinitEverything+0x54>)
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	4a0c      	ldr	r2, [pc, #48]	; (80087a8 <deinitEverything+0x54>)
 8008776:	f023 0302 	bic.w	r3, r3, #2
 800877a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_DISABLE();
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <deinitEverything+0x54>)
 800877e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008780:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <deinitEverything+0x54>)
 8008782:	f023 0301 	bic.w	r3, r3, #1
 8008786:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_RCC_DeInit();
 8008788:	f001 f9ca 	bl	8009b20 <HAL_RCC_DeInit>
    HAL_DeInit();
 800878c:	f000 f9d0 	bl	8008b30 <HAL_DeInit>
    SysTick->CTRL = 0;
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <deinitEverything+0x58>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <deinitEverything+0x58>)
 8008798:	2200      	movs	r2, #0
 800879a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800879c:	4b03      	ldr	r3, [pc, #12]	; (80087ac <deinitEverything+0x58>)
 800879e:	2200      	movs	r2, #0
 80087a0:	609a      	str	r2, [r3, #8]
}
 80087a2:	bf00      	nop
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	e000e010 	.word	0xe000e010

080087b0 <JumpToApplication2>:

void JumpToApplication2(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
    uint32_t appAddress2 = 0x08084000;  // Adresse de démarrage de l'application 2 en Flash
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <JumpToApplication2+0x38>)
 80087b8:	60fb      	str	r3, [r7, #12]
    typedef void (*pFunction)(void);
    pFunction JumpToApp2;
    uint32_t JumpAddress2 = *(__IO uint32_t*)(appAddress2 + 4);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60bb      	str	r3, [r7, #8]
    JumpToApp2 = (pFunction)JumpAddress2;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80087c6:	b672      	cpsid	i
}
 80087c8:	bf00      	nop

    // Désactivation des interruptions
    __disable_irq();

    // Réinitialisation des périphériques
    deinitEverything();
 80087ca:	f7ff ffc3 	bl	8008754 <deinitEverything>

    // Réinitialisation du pointeur de pile
    __set_MSP(*(__IO uint32_t*)appAddress2);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f383 8808 	msr	MSP, r3
}
 80087da:	bf00      	nop

    // Saut vers l'application 2
    JumpToApp2();
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4798      	blx	r3
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	08084000 	.word	0x08084000

080087ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80087f0:	b672      	cpsid	i
}
 80087f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80087f4:	e7fe      	b.n	80087f4 <Error_Handler+0x8>
	...

080087f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <HAL_MspInit+0x4c>)
 8008804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008806:	4a0f      	ldr	r2, [pc, #60]	; (8008844 <HAL_MspInit+0x4c>)
 8008808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800880c:	6453      	str	r3, [r2, #68]	; 0x44
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <HAL_MspInit+0x4c>)
 8008810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008816:	607b      	str	r3, [r7, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800881a:	2300      	movs	r3, #0
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <HAL_MspInit+0x4c>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <HAL_MspInit+0x4c>)
 8008824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008828:	6413      	str	r3, [r2, #64]	; 0x40
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <HAL_MspInit+0x4c>)
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008836:	2007      	movs	r0, #7
 8008838:	f000 fad6 	bl	8008de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40023800 	.word	0x40023800

08008848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08a      	sub	sp, #40	; 0x28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	609a      	str	r2, [r3, #8]
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a19      	ldr	r2, [pc, #100]	; (80088cc <HAL_UART_MspInit+0x84>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d12b      	bne.n	80088c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800886a:	2300      	movs	r3, #0
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <HAL_UART_MspInit+0x88>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <HAL_UART_MspInit+0x88>)
 8008874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008878:	6413      	str	r3, [r2, #64]	; 0x40
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <HAL_UART_MspInit+0x88>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	4b11      	ldr	r3, [pc, #68]	; (80088d0 <HAL_UART_MspInit+0x88>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <HAL_UART_MspInit+0x88>)
 8008890:	f043 0301 	orr.w	r3, r3, #1
 8008894:	6313      	str	r3, [r2, #48]	; 0x30
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <HAL_UART_MspInit+0x88>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80088a2:	230c      	movs	r3, #12
 80088a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a6:	2302      	movs	r3, #2
 80088a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ae:	2303      	movs	r3, #3
 80088b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80088b2:	2307      	movs	r3, #7
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b6:	f107 0314 	add.w	r3, r7, #20
 80088ba:	4619      	mov	r1, r3
 80088bc:	4805      	ldr	r0, [pc, #20]	; (80088d4 <HAL_UART_MspInit+0x8c>)
 80088be:	f000 fac7 	bl	8008e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80088c2:	bf00      	nop
 80088c4:	3728      	adds	r7, #40	; 0x28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40004400 	.word	0x40004400
 80088d0:	40023800 	.word	0x40023800
 80088d4:	40020000 	.word	0x40020000

080088d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80088dc:	e7fe      	b.n	80088dc <NMI_Handler+0x4>

080088de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088de:	b480      	push	{r7}
 80088e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088e2:	e7fe      	b.n	80088e2 <HardFault_Handler+0x4>

080088e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088e8:	e7fe      	b.n	80088e8 <MemManage_Handler+0x4>

080088ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088ea:	b480      	push	{r7}
 80088ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088ee:	e7fe      	b.n	80088ee <BusFault_Handler+0x4>

080088f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088f4:	e7fe      	b.n	80088f4 <UsageFault_Handler+0x4>

080088f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088f6:	b480      	push	{r7}
 80088f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008912:	b480      	push	{r7}
 8008914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008916:	bf00      	nop
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008924:	f000 f96a 	bl	8008bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008928:	bf00      	nop
 800892a:	bd80      	pop	{r7, pc}

0800892c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e00a      	b.n	8008954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800893e:	f3af 8000 	nop.w
 8008942:	4601      	mov	r1, r0
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	60ba      	str	r2, [r7, #8]
 800894a:	b2ca      	uxtb	r2, r1
 800894c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	3301      	adds	r3, #1
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	429a      	cmp	r2, r3
 800895a:	dbf0      	blt.n	800893e <_read+0x12>
  }

  return len;
 800895c:	687b      	ldr	r3, [r7, #4]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e009      	b.n	800898c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	60ba      	str	r2, [r7, #8]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	3301      	adds	r3, #1
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	dbf1      	blt.n	8008978 <_write+0x12>
  }
  return len;
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <_close>:

int _close(int file)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089c6:	605a      	str	r2, [r3, #4]
  return 0;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <_isatty>:

int _isatty(int file)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80089de:	2301      	movs	r3, #1
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a10:	4a14      	ldr	r2, [pc, #80]	; (8008a64 <_sbrk+0x5c>)
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <_sbrk+0x60>)
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a1c:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <_sbrk+0x64>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <_sbrk+0x64>)
 8008a26:	4a12      	ldr	r2, [pc, #72]	; (8008a70 <_sbrk+0x68>)
 8008a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a2a:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <_sbrk+0x64>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d207      	bcs.n	8008a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a38:	f001 fe48 	bl	800a6cc <__errno>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	220c      	movs	r2, #12
 8008a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a46:	e009      	b.n	8008a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a48:	4b08      	ldr	r3, [pc, #32]	; (8008a6c <_sbrk+0x64>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a4e:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <_sbrk+0x64>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <_sbrk+0x64>)
 8008a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20020000 	.word	0x20020000
 8008a68:	00000400 	.word	0x00000400
 8008a6c:	200000d0 	.word	0x200000d0
 8008a70:	20000228 	.word	0x20000228

08008a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <SystemInit+0x20>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7e:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <SystemInit+0x20>)
 8008a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	e000ed00 	.word	0xe000ed00

08008a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008a9c:	f7ff ffea 	bl	8008a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008aa0:	480c      	ldr	r0, [pc, #48]	; (8008ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008aa2:	490d      	ldr	r1, [pc, #52]	; (8008ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008aa4:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008aa8:	e002      	b.n	8008ab0 <LoopCopyDataInit>

08008aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008aae:	3304      	adds	r3, #4

08008ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ab4:	d3f9      	bcc.n	8008aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008ab8:	4c0a      	ldr	r4, [pc, #40]	; (8008ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008abc:	e001      	b.n	8008ac2 <LoopFillZerobss>

08008abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ac0:	3204      	adds	r2, #4

08008ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ac4:	d3fb      	bcc.n	8008abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008ac6:	f001 fe07 	bl	800a6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008aca:	f7ff fcfb 	bl	80084c4 <main>
  bx  lr    
 8008ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ad8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008adc:	0800ace8 	.word	0x0800ace8
  ldr r2, =_sbss
 8008ae0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008ae4:	20000224 	.word	0x20000224

08008ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ae8:	e7fe      	b.n	8008ae8 <ADC_IRQHandler>
	...

08008aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008af0:	4b0e      	ldr	r3, [pc, #56]	; (8008b2c <HAL_Init+0x40>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <HAL_Init+0x40>)
 8008af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <HAL_Init+0x40>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <HAL_Init+0x40>)
 8008b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b08:	4b08      	ldr	r3, [pc, #32]	; (8008b2c <HAL_Init+0x40>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a07      	ldr	r2, [pc, #28]	; (8008b2c <HAL_Init+0x40>)
 8008b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b14:	2003      	movs	r0, #3
 8008b16:	f000 f967 	bl	8008de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f000 f83e 	bl	8008b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b20:	f7ff fe6a 	bl	80087f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40023c00 	.word	0x40023c00

08008b30 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8008b34:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b36:	4a12      	ldr	r2, [pc, #72]	; (8008b80 <HAL_DeInit+0x50>)
 8008b38:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b42:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <HAL_DeInit+0x54>)
 8008b44:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b4e:	4a0e      	ldr	r2, [pc, #56]	; (8008b88 <HAL_DeInit+0x58>)
 8008b50:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008b52:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8008b58:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b5a:	22c1      	movs	r2, #193	; 0xc1
 8008b5c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008b6a:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <HAL_DeInit+0x4c>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8008b70:	f000 f80c 	bl	8008b8c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	f6fec9ff 	.word	0xf6fec9ff
 8008b84:	04777933 	.word	0x04777933
 8008b88:	226011ff 	.word	0x226011ff

08008b8c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008b90:	bf00      	nop
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ba4:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <HAL_InitTick+0x54>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <HAL_InitTick+0x58>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f93b 	bl	8008e36 <HAL_SYSTICK_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e00e      	b.n	8008be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b0f      	cmp	r3, #15
 8008bce:	d80a      	bhi.n	8008be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd8:	f000 f911 	bl	8008dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bdc:	4a06      	ldr	r2, [pc, #24]	; (8008bf8 <HAL_InitTick+0x5c>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e000      	b.n	8008be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000000 	.word	0x20000000
 8008bf4:	20000008 	.word	0x20000008
 8008bf8:	20000004 	.word	0x20000004

08008bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_IncTick+0x20>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <HAL_IncTick+0x24>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <HAL_IncTick+0x24>)
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20000008 	.word	0x20000008
 8008c20:	200000d4 	.word	0x200000d4

08008c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
  return uwTick;
 8008c28:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <HAL_GetTick+0x14>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	200000d4 	.word	0x200000d4

08008c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c44:	f7ff ffee 	bl	8008c24 <HAL_GetTick>
 8008c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c54:	d005      	beq.n	8008c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c56:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <HAL_Delay+0x44>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c62:	bf00      	nop
 8008c64:	f7ff ffde 	bl	8008c24 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d8f7      	bhi.n	8008c64 <HAL_Delay+0x28>
  {
  }
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000008 	.word	0x20000008

08008c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cb6:	4a04      	ldr	r2, [pc, #16]	; (8008cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	60d3      	str	r3, [r2, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	e000ed00 	.word	0xe000ed00

08008ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cd0:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	0a1b      	lsrs	r3, r3, #8
 8008cd6:	f003 0307 	and.w	r3, r3, #7
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	e000ed00 	.word	0xe000ed00

08008ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db0a      	blt.n	8008d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	490c      	ldr	r1, [pc, #48]	; (8008d34 <__NVIC_SetPriority+0x4c>)
 8008d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d06:	0112      	lsls	r2, r2, #4
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d10:	e00a      	b.n	8008d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	4908      	ldr	r1, [pc, #32]	; (8008d38 <__NVIC_SetPriority+0x50>)
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	0112      	lsls	r2, r2, #4
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	440b      	add	r3, r1
 8008d26:	761a      	strb	r2, [r3, #24]
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	e000e100 	.word	0xe000e100
 8008d38:	e000ed00 	.word	0xe000ed00

08008d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	; 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f1c3 0307 	rsb	r3, r3, #7
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	bf28      	it	cs
 8008d5a:	2304      	movcs	r3, #4
 8008d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	3304      	adds	r3, #4
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d902      	bls.n	8008d6c <NVIC_EncodePriority+0x30>
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	3b03      	subs	r3, #3
 8008d6a:	e000      	b.n	8008d6e <NVIC_EncodePriority+0x32>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43da      	mvns	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	401a      	ands	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d8e:	43d9      	mvns	r1, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d94:	4313      	orrs	r3, r2
         );
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3724      	adds	r7, #36	; 0x24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008db4:	d301      	bcc.n	8008dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008db6:	2301      	movs	r3, #1
 8008db8:	e00f      	b.n	8008dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dba:	4a0a      	ldr	r2, [pc, #40]	; (8008de4 <SysTick_Config+0x40>)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dc2:	210f      	movs	r1, #15
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc8:	f7ff ff8e 	bl	8008ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008dcc:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <SysTick_Config+0x40>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008dd2:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <SysTick_Config+0x40>)
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	e000e010 	.word	0xe000e010

08008de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ff47 	bl	8008c84 <__NVIC_SetPriorityGrouping>
}
 8008df6:	bf00      	nop
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b086      	sub	sp, #24
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	4603      	mov	r3, r0
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e10:	f7ff ff5c 	bl	8008ccc <__NVIC_GetPriorityGrouping>
 8008e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff ff8e 	bl	8008d3c <NVIC_EncodePriority>
 8008e20:	4602      	mov	r2, r0
 8008e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff ff5d 	bl	8008ce8 <__NVIC_SetPriority>
}
 8008e2e:	bf00      	nop
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ffb0 	bl	8008da4 <SysTick_Config>
 8008e44:	4603      	mov	r3, r0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b089      	sub	sp, #36	; 0x24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	e16b      	b.n	8009144 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	fa02 f303 	lsl.w	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	f040 815a 	bne.w	800913e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d005      	beq.n	8008ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d130      	bne.n	8008f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	2203      	movs	r2, #3
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ed8:	2201      	movs	r2, #1
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	091b      	lsrs	r3, r3, #4
 8008eee:	f003 0201 	and.w	r2, r3, #1
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f003 0303 	and.w	r3, r3, #3
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d017      	beq.n	8008f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	43db      	mvns	r3, r3
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	4013      	ands	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d123      	bne.n	8008f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	08da      	lsrs	r2, r3, #3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3208      	adds	r2, #8
 8008f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	220f      	movs	r2, #15
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43db      	mvns	r3, r3
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	08da      	lsrs	r2, r3, #3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3208      	adds	r2, #8
 8008f8e:	69b9      	ldr	r1, [r7, #24]
 8008f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f003 0203 	and.w	r2, r3, #3
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80b4 	beq.w	800913e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	4b60      	ldr	r3, [pc, #384]	; (800915c <HAL_GPIO_Init+0x30c>)
 8008fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fde:	4a5f      	ldr	r2, [pc, #380]	; (800915c <HAL_GPIO_Init+0x30c>)
 8008fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fe6:	4b5d      	ldr	r3, [pc, #372]	; (800915c <HAL_GPIO_Init+0x30c>)
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ff2:	4a5b      	ldr	r2, [pc, #364]	; (8009160 <HAL_GPIO_Init+0x310>)
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	220f      	movs	r2, #15
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43db      	mvns	r3, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4013      	ands	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a52      	ldr	r2, [pc, #328]	; (8009164 <HAL_GPIO_Init+0x314>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d02b      	beq.n	8009076 <HAL_GPIO_Init+0x226>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a51      	ldr	r2, [pc, #324]	; (8009168 <HAL_GPIO_Init+0x318>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d025      	beq.n	8009072 <HAL_GPIO_Init+0x222>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a50      	ldr	r2, [pc, #320]	; (800916c <HAL_GPIO_Init+0x31c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d01f      	beq.n	800906e <HAL_GPIO_Init+0x21e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a4f      	ldr	r2, [pc, #316]	; (8009170 <HAL_GPIO_Init+0x320>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d019      	beq.n	800906a <HAL_GPIO_Init+0x21a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a4e      	ldr	r2, [pc, #312]	; (8009174 <HAL_GPIO_Init+0x324>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d013      	beq.n	8009066 <HAL_GPIO_Init+0x216>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a4d      	ldr	r2, [pc, #308]	; (8009178 <HAL_GPIO_Init+0x328>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00d      	beq.n	8009062 <HAL_GPIO_Init+0x212>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a4c      	ldr	r2, [pc, #304]	; (800917c <HAL_GPIO_Init+0x32c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d007      	beq.n	800905e <HAL_GPIO_Init+0x20e>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a4b      	ldr	r2, [pc, #300]	; (8009180 <HAL_GPIO_Init+0x330>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d101      	bne.n	800905a <HAL_GPIO_Init+0x20a>
 8009056:	2307      	movs	r3, #7
 8009058:	e00e      	b.n	8009078 <HAL_GPIO_Init+0x228>
 800905a:	2308      	movs	r3, #8
 800905c:	e00c      	b.n	8009078 <HAL_GPIO_Init+0x228>
 800905e:	2306      	movs	r3, #6
 8009060:	e00a      	b.n	8009078 <HAL_GPIO_Init+0x228>
 8009062:	2305      	movs	r3, #5
 8009064:	e008      	b.n	8009078 <HAL_GPIO_Init+0x228>
 8009066:	2304      	movs	r3, #4
 8009068:	e006      	b.n	8009078 <HAL_GPIO_Init+0x228>
 800906a:	2303      	movs	r3, #3
 800906c:	e004      	b.n	8009078 <HAL_GPIO_Init+0x228>
 800906e:	2302      	movs	r3, #2
 8009070:	e002      	b.n	8009078 <HAL_GPIO_Init+0x228>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <HAL_GPIO_Init+0x228>
 8009076:	2300      	movs	r3, #0
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	f002 0203 	and.w	r2, r2, #3
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	4093      	lsls	r3, r2
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	4313      	orrs	r3, r2
 8009086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009088:	4935      	ldr	r1, [pc, #212]	; (8009160 <HAL_GPIO_Init+0x310>)
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	089b      	lsrs	r3, r3, #2
 800908e:	3302      	adds	r3, #2
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009096:	4b3b      	ldr	r3, [pc, #236]	; (8009184 <HAL_GPIO_Init+0x334>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	43db      	mvns	r3, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	4013      	ands	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80090ba:	4a32      	ldr	r2, [pc, #200]	; (8009184 <HAL_GPIO_Init+0x334>)
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80090c0:	4b30      	ldr	r3, [pc, #192]	; (8009184 <HAL_GPIO_Init+0x334>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	43db      	mvns	r3, r3
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	4013      	ands	r3, r2
 80090ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80090e4:	4a27      	ldr	r2, [pc, #156]	; (8009184 <HAL_GPIO_Init+0x334>)
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80090ea:	4b26      	ldr	r3, [pc, #152]	; (8009184 <HAL_GPIO_Init+0x334>)
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	4013      	ands	r3, r2
 80090f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <HAL_GPIO_Init+0x334>)
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009114:	4b1b      	ldr	r3, [pc, #108]	; (8009184 <HAL_GPIO_Init+0x334>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	43db      	mvns	r3, r3
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	4013      	ands	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009138:	4a12      	ldr	r2, [pc, #72]	; (8009184 <HAL_GPIO_Init+0x334>)
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	3301      	adds	r3, #1
 8009142:	61fb      	str	r3, [r7, #28]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	f67f ae90 	bls.w	8008e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	3724      	adds	r7, #36	; 0x24
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40023800 	.word	0x40023800
 8009160:	40013800 	.word	0x40013800
 8009164:	40020000 	.word	0x40020000
 8009168:	40020400 	.word	0x40020400
 800916c:	40020800 	.word	0x40020800
 8009170:	40020c00 	.word	0x40020c00
 8009174:	40021000 	.word	0x40021000
 8009178:	40021400 	.word	0x40021400
 800917c:	40021800 	.word	0x40021800
 8009180:	40021c00 	.word	0x40021c00
 8009184:	40013c00 	.word	0x40013c00

08009188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	807b      	strh	r3, [r7, #2]
 8009194:	4613      	mov	r3, r2
 8009196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009198:	787b      	ldrb	r3, [r7, #1]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800919e:	887a      	ldrh	r2, [r7, #2]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80091a4:	e003      	b.n	80091ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80091a6:	887b      	ldrh	r3, [r7, #2]
 80091a8:	041a      	lsls	r2, r3, #16
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	619a      	str	r2, [r3, #24]
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b085      	sub	sp, #20
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091cc:	887a      	ldrh	r2, [r7, #2]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4013      	ands	r3, r2
 80091d2:	041a      	lsls	r2, r3, #16
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	43d9      	mvns	r1, r3
 80091d8:	887b      	ldrh	r3, [r7, #2]
 80091da:	400b      	ands	r3, r1
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	619a      	str	r2, [r3, #24]
}
 80091e2:	bf00      	nop
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e267      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d075      	beq.n	80092fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800920e:	4b88      	ldr	r3, [pc, #544]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 030c 	and.w	r3, r3, #12
 8009216:	2b04      	cmp	r3, #4
 8009218:	d00c      	beq.n	8009234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800921a:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009222:	2b08      	cmp	r3, #8
 8009224:	d112      	bne.n	800924c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009226:	4b82      	ldr	r3, [pc, #520]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800922e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009232:	d10b      	bne.n	800924c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009234:	4b7e      	ldr	r3, [pc, #504]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d05b      	beq.n	80092f8 <HAL_RCC_OscConfig+0x108>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d157      	bne.n	80092f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e242      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009254:	d106      	bne.n	8009264 <HAL_RCC_OscConfig+0x74>
 8009256:	4b76      	ldr	r3, [pc, #472]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a75      	ldr	r2, [pc, #468]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800925c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	e01d      	b.n	80092a0 <HAL_RCC_OscConfig+0xb0>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800926c:	d10c      	bne.n	8009288 <HAL_RCC_OscConfig+0x98>
 800926e:	4b70      	ldr	r3, [pc, #448]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a6f      	ldr	r2, [pc, #444]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	4b6d      	ldr	r3, [pc, #436]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a6c      	ldr	r2, [pc, #432]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e00b      	b.n	80092a0 <HAL_RCC_OscConfig+0xb0>
 8009288:	4b69      	ldr	r3, [pc, #420]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a68      	ldr	r2, [pc, #416]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800928e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	4b66      	ldr	r3, [pc, #408]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a65      	ldr	r2, [pc, #404]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800929a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800929e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d013      	beq.n	80092d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092a8:	f7ff fcbc 	bl	8008c24 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092b0:	f7ff fcb8 	bl	8008c24 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b64      	cmp	r3, #100	; 0x64
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e207      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092c2:	4b5b      	ldr	r3, [pc, #364]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f0      	beq.n	80092b0 <HAL_RCC_OscConfig+0xc0>
 80092ce:	e014      	b.n	80092fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092d0:	f7ff fca8 	bl	8008c24 <HAL_GetTick>
 80092d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092d8:	f7ff fca4 	bl	8008c24 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b64      	cmp	r3, #100	; 0x64
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e1f3      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092ea:	4b51      	ldr	r3, [pc, #324]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f0      	bne.n	80092d8 <HAL_RCC_OscConfig+0xe8>
 80092f6:	e000      	b.n	80092fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d063      	beq.n	80093ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009306:	4b4a      	ldr	r3, [pc, #296]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 030c 	and.w	r3, r3, #12
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009312:	4b47      	ldr	r3, [pc, #284]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800931a:	2b08      	cmp	r3, #8
 800931c:	d11c      	bne.n	8009358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800931e:	4b44      	ldr	r3, [pc, #272]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d116      	bne.n	8009358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800932a:	4b41      	ldr	r3, [pc, #260]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <HAL_RCC_OscConfig+0x152>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d001      	beq.n	8009342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e1c7      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009342:	4b3b      	ldr	r3, [pc, #236]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4937      	ldr	r1, [pc, #220]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009352:	4313      	orrs	r3, r2
 8009354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009356:	e03a      	b.n	80093ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d020      	beq.n	80093a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009360:	4b34      	ldr	r3, [pc, #208]	; (8009434 <HAL_RCC_OscConfig+0x244>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009366:	f7ff fc5d 	bl	8008c24 <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800936c:	e008      	b.n	8009380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800936e:	f7ff fc59 	bl	8008c24 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e1a8      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009380:	4b2b      	ldr	r3, [pc, #172]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0f0      	beq.n	800936e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800938c:	4b28      	ldr	r3, [pc, #160]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	4925      	ldr	r1, [pc, #148]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 800939c:	4313      	orrs	r3, r2
 800939e:	600b      	str	r3, [r1, #0]
 80093a0:	e015      	b.n	80093ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093a2:	4b24      	ldr	r3, [pc, #144]	; (8009434 <HAL_RCC_OscConfig+0x244>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a8:	f7ff fc3c 	bl	8008c24 <HAL_GetTick>
 80093ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ae:	e008      	b.n	80093c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093b0:	f7ff fc38 	bl	8008c24 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d901      	bls.n	80093c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e187      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093c2:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f0      	bne.n	80093b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0308 	and.w	r3, r3, #8
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d036      	beq.n	8009448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d016      	beq.n	8009410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <HAL_RCC_OscConfig+0x248>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e8:	f7ff fc1c 	bl	8008c24 <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093f0:	f7ff fc18 	bl	8008c24 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e167      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009402:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <HAL_RCC_OscConfig+0x240>)
 8009404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x200>
 800940e:	e01b      	b.n	8009448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009410:	4b09      	ldr	r3, [pc, #36]	; (8009438 <HAL_RCC_OscConfig+0x248>)
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009416:	f7ff fc05 	bl	8008c24 <HAL_GetTick>
 800941a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800941c:	e00e      	b.n	800943c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800941e:	f7ff fc01 	bl	8008c24 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d907      	bls.n	800943c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e150      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
 8009430:	40023800 	.word	0x40023800
 8009434:	42470000 	.word	0x42470000
 8009438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800943c:	4b88      	ldr	r3, [pc, #544]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800943e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1ea      	bne.n	800941e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8097 	beq.w	8009584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800945a:	4b81      	ldr	r3, [pc, #516]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10f      	bne.n	8009486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009466:	2300      	movs	r3, #0
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	4b7d      	ldr	r3, [pc, #500]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	4a7c      	ldr	r2, [pc, #496]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009474:	6413      	str	r3, [r2, #64]	; 0x40
 8009476:	4b7a      	ldr	r3, [pc, #488]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947e:	60bb      	str	r3, [r7, #8]
 8009480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009486:	4b77      	ldr	r3, [pc, #476]	; (8009664 <HAL_RCC_OscConfig+0x474>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948e:	2b00      	cmp	r3, #0
 8009490:	d118      	bne.n	80094c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009492:	4b74      	ldr	r3, [pc, #464]	; (8009664 <HAL_RCC_OscConfig+0x474>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a73      	ldr	r2, [pc, #460]	; (8009664 <HAL_RCC_OscConfig+0x474>)
 8009498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800949c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800949e:	f7ff fbc1 	bl	8008c24 <HAL_GetTick>
 80094a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a4:	e008      	b.n	80094b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094a6:	f7ff fbbd 	bl	8008c24 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e10c      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094b8:	4b6a      	ldr	r3, [pc, #424]	; (8009664 <HAL_RCC_OscConfig+0x474>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0f0      	beq.n	80094a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d106      	bne.n	80094da <HAL_RCC_OscConfig+0x2ea>
 80094cc:	4b64      	ldr	r3, [pc, #400]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d0:	4a63      	ldr	r2, [pc, #396]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094d2:	f043 0301 	orr.w	r3, r3, #1
 80094d6:	6713      	str	r3, [r2, #112]	; 0x70
 80094d8:	e01c      	b.n	8009514 <HAL_RCC_OscConfig+0x324>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d10c      	bne.n	80094fc <HAL_RCC_OscConfig+0x30c>
 80094e2:	4b5f      	ldr	r3, [pc, #380]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	4a5e      	ldr	r2, [pc, #376]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094e8:	f043 0304 	orr.w	r3, r3, #4
 80094ec:	6713      	str	r3, [r2, #112]	; 0x70
 80094ee:	4b5c      	ldr	r3, [pc, #368]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	4a5b      	ldr	r2, [pc, #364]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094f4:	f043 0301 	orr.w	r3, r3, #1
 80094f8:	6713      	str	r3, [r2, #112]	; 0x70
 80094fa:	e00b      	b.n	8009514 <HAL_RCC_OscConfig+0x324>
 80094fc:	4b58      	ldr	r3, [pc, #352]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80094fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009500:	4a57      	ldr	r2, [pc, #348]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	6713      	str	r3, [r2, #112]	; 0x70
 8009508:	4b55      	ldr	r3, [pc, #340]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800950a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950c:	4a54      	ldr	r2, [pc, #336]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800950e:	f023 0304 	bic.w	r3, r3, #4
 8009512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d015      	beq.n	8009548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800951c:	f7ff fb82 	bl	8008c24 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009522:	e00a      	b.n	800953a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009524:	f7ff fb7e 	bl	8008c24 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009532:	4293      	cmp	r3, r2
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e0cb      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800953a:	4b49      	ldr	r3, [pc, #292]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0ee      	beq.n	8009524 <HAL_RCC_OscConfig+0x334>
 8009546:	e014      	b.n	8009572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009548:	f7ff fb6c 	bl	8008c24 <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800954e:	e00a      	b.n	8009566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009550:	f7ff fb68 	bl	8008c24 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	f241 3288 	movw	r2, #5000	; 0x1388
 800955e:	4293      	cmp	r3, r2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e0b5      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009566:	4b3e      	ldr	r3, [pc, #248]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1ee      	bne.n	8009550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d105      	bne.n	8009584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	4a38      	ldr	r2, [pc, #224]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800957e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80a1 	beq.w	80096d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800958e:	4b34      	ldr	r3, [pc, #208]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	2b08      	cmp	r3, #8
 8009598:	d05c      	beq.n	8009654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d141      	bne.n	8009626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a2:	4b31      	ldr	r3, [pc, #196]	; (8009668 <HAL_RCC_OscConfig+0x478>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a8:	f7ff fb3c 	bl	8008c24 <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095b0:	f7ff fb38 	bl	8008c24 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e087      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095c2:	4b27      	ldr	r3, [pc, #156]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69da      	ldr	r2, [r3, #28]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	019b      	lsls	r3, r3, #6
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	3b01      	subs	r3, #1
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	061b      	lsls	r3, r3, #24
 80095f2:	491b      	ldr	r1, [pc, #108]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095f8:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <HAL_RCC_OscConfig+0x478>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fe:	f7ff fb11 	bl	8008c24 <HAL_GetTick>
 8009602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009604:	e008      	b.n	8009618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009606:	f7ff fb0d 	bl	8008c24 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e05c      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009618:	4b11      	ldr	r3, [pc, #68]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0f0      	beq.n	8009606 <HAL_RCC_OscConfig+0x416>
 8009624:	e054      	b.n	80096d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009626:	4b10      	ldr	r3, [pc, #64]	; (8009668 <HAL_RCC_OscConfig+0x478>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962c:	f7ff fafa 	bl	8008c24 <HAL_GetTick>
 8009630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009632:	e008      	b.n	8009646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009634:	f7ff faf6 	bl	8008c24 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e045      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009646:	4b06      	ldr	r3, [pc, #24]	; (8009660 <HAL_RCC_OscConfig+0x470>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f0      	bne.n	8009634 <HAL_RCC_OscConfig+0x444>
 8009652:	e03d      	b.n	80096d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e038      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
 8009660:	40023800 	.word	0x40023800
 8009664:	40007000 	.word	0x40007000
 8009668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <HAL_RCC_OscConfig+0x4ec>)
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d028      	beq.n	80096cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009684:	429a      	cmp	r2, r3
 8009686:	d121      	bne.n	80096cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009692:	429a      	cmp	r2, r3
 8009694:	d11a      	bne.n	80096cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800969c:	4013      	ands	r3, r2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d111      	bne.n	80096cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	3b01      	subs	r3, #1
 80096b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d107      	bne.n	80096cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d001      	beq.n	80096d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40023800 	.word	0x40023800

080096e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0cc      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096f4:	4b68      	ldr	r3, [pc, #416]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d90c      	bls.n	800971c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009702:	4b65      	ldr	r3, [pc, #404]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970a:	4b63      	ldr	r3, [pc, #396]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0307 	and.w	r3, r3, #7
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d001      	beq.n	800971c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0b8      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d020      	beq.n	800976a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009734:	4b59      	ldr	r3, [pc, #356]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4a58      	ldr	r2, [pc, #352]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 800973a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800973e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800974c:	4b53      	ldr	r3, [pc, #332]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	4a52      	ldr	r2, [pc, #328]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009758:	4b50      	ldr	r3, [pc, #320]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	494d      	ldr	r1, [pc, #308]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009766:	4313      	orrs	r3, r2
 8009768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d044      	beq.n	8009800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d107      	bne.n	800978e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800977e:	4b47      	ldr	r3, [pc, #284]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d119      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e07f      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d003      	beq.n	800979e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800979a:	2b03      	cmp	r3, #3
 800979c:	d107      	bne.n	80097ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800979e:	4b3f      	ldr	r3, [pc, #252]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e06f      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ae:	4b3b      	ldr	r3, [pc, #236]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e067      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097be:	4b37      	ldr	r3, [pc, #220]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f023 0203 	bic.w	r2, r3, #3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4934      	ldr	r1, [pc, #208]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097d0:	f7ff fa28 	bl	8008c24 <HAL_GetTick>
 80097d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d6:	e00a      	b.n	80097ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d8:	f7ff fa24 	bl	8008c24 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e04f      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ee:	4b2b      	ldr	r3, [pc, #172]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f003 020c 	and.w	r2, r3, #12
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d1eb      	bne.n	80097d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009800:	4b25      	ldr	r3, [pc, #148]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d20c      	bcs.n	8009828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980e:	4b22      	ldr	r3, [pc, #136]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009816:	4b20      	ldr	r3, [pc, #128]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d001      	beq.n	8009828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e032      	b.n	800988e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d008      	beq.n	8009846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009834:	4b19      	ldr	r3, [pc, #100]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	4916      	ldr	r1, [pc, #88]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009842:	4313      	orrs	r3, r2
 8009844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	490e      	ldr	r1, [pc, #56]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009866:	f000 f821 	bl	80098ac <HAL_RCC_GetSysClockFreq>
 800986a:	4602      	mov	r2, r0
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	091b      	lsrs	r3, r3, #4
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	490a      	ldr	r1, [pc, #40]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009878:	5ccb      	ldrb	r3, [r1, r3]
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	4a09      	ldr	r2, [pc, #36]	; (80098a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009882:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff f988 	bl	8008b9c <HAL_InitTick>

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	40023c00 	.word	0x40023c00
 800989c:	40023800 	.word	0x40023800
 80098a0:	0800acc0 	.word	0x0800acc0
 80098a4:	20000000 	.word	0x20000000
 80098a8:	20000004 	.word	0x20000004

080098ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098b0:	b094      	sub	sp, #80	; 0x50
 80098b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	647b      	str	r3, [r7, #68]	; 0x44
 80098b8:	2300      	movs	r3, #0
 80098ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098bc:	2300      	movs	r3, #0
 80098be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098c4:	4b79      	ldr	r3, [pc, #484]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 030c 	and.w	r3, r3, #12
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d00d      	beq.n	80098ec <HAL_RCC_GetSysClockFreq+0x40>
 80098d0:	2b08      	cmp	r3, #8
 80098d2:	f200 80e1 	bhi.w	8009a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <HAL_RCC_GetSysClockFreq+0x34>
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d003      	beq.n	80098e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80098de:	e0db      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80098e0:	4b73      	ldr	r3, [pc, #460]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80098e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80098e4:	e0db      	b.n	8009a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80098e6:	4b73      	ldr	r3, [pc, #460]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80098e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80098ea:	e0d8      	b.n	8009a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80098ec:	4b6f      	ldr	r3, [pc, #444]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098f6:	4b6d      	ldr	r3, [pc, #436]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d063      	beq.n	80099ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009902:	4b6a      	ldr	r3, [pc, #424]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	099b      	lsrs	r3, r3, #6
 8009908:	2200      	movs	r2, #0
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
 800990c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009914:	633b      	str	r3, [r7, #48]	; 0x30
 8009916:	2300      	movs	r3, #0
 8009918:	637b      	str	r3, [r7, #52]	; 0x34
 800991a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800991e:	4622      	mov	r2, r4
 8009920:	462b      	mov	r3, r5
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f04f 0100 	mov.w	r1, #0
 800992a:	0159      	lsls	r1, r3, #5
 800992c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009930:	0150      	lsls	r0, r2, #5
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4621      	mov	r1, r4
 8009938:	1a51      	subs	r1, r2, r1
 800993a:	6139      	str	r1, [r7, #16]
 800993c:	4629      	mov	r1, r5
 800993e:	eb63 0301 	sbc.w	r3, r3, r1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009950:	4659      	mov	r1, fp
 8009952:	018b      	lsls	r3, r1, #6
 8009954:	4651      	mov	r1, sl
 8009956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800995a:	4651      	mov	r1, sl
 800995c:	018a      	lsls	r2, r1, #6
 800995e:	4651      	mov	r1, sl
 8009960:	ebb2 0801 	subs.w	r8, r2, r1
 8009964:	4659      	mov	r1, fp
 8009966:	eb63 0901 	sbc.w	r9, r3, r1
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800997a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800997e:	4690      	mov	r8, r2
 8009980:	4699      	mov	r9, r3
 8009982:	4623      	mov	r3, r4
 8009984:	eb18 0303 	adds.w	r3, r8, r3
 8009988:	60bb      	str	r3, [r7, #8]
 800998a:	462b      	mov	r3, r5
 800998c:	eb49 0303 	adc.w	r3, r9, r3
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	f04f 0300 	mov.w	r3, #0
 800999a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800999e:	4629      	mov	r1, r5
 80099a0:	024b      	lsls	r3, r1, #9
 80099a2:	4621      	mov	r1, r4
 80099a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80099a8:	4621      	mov	r1, r4
 80099aa:	024a      	lsls	r2, r1, #9
 80099ac:	4610      	mov	r0, r2
 80099ae:	4619      	mov	r1, r3
 80099b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b2:	2200      	movs	r2, #0
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099bc:	f7fe fc04 	bl	80081c8 <__aeabi_uldivmod>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4613      	mov	r3, r2
 80099c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c8:	e058      	b.n	8009a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099ca:	4b38      	ldr	r3, [pc, #224]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	099b      	lsrs	r3, r3, #6
 80099d0:	2200      	movs	r2, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	4611      	mov	r1, r2
 80099d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80099da:	623b      	str	r3, [r7, #32]
 80099dc:	2300      	movs	r3, #0
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
 80099e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80099e4:	4642      	mov	r2, r8
 80099e6:	464b      	mov	r3, r9
 80099e8:	f04f 0000 	mov.w	r0, #0
 80099ec:	f04f 0100 	mov.w	r1, #0
 80099f0:	0159      	lsls	r1, r3, #5
 80099f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099f6:	0150      	lsls	r0, r2, #5
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4641      	mov	r1, r8
 80099fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8009a02:	4649      	mov	r1, r9
 8009a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8009a20:	eb63 050b 	sbc.w	r5, r3, fp
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	00eb      	lsls	r3, r5, #3
 8009a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a32:	00e2      	lsls	r2, r4, #3
 8009a34:	4614      	mov	r4, r2
 8009a36:	461d      	mov	r5, r3
 8009a38:	4643      	mov	r3, r8
 8009a3a:	18e3      	adds	r3, r4, r3
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	464b      	mov	r3, r9
 8009a40:	eb45 0303 	adc.w	r3, r5, r3
 8009a44:	607b      	str	r3, [r7, #4]
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a52:	4629      	mov	r1, r5
 8009a54:	028b      	lsls	r3, r1, #10
 8009a56:	4621      	mov	r1, r4
 8009a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	028a      	lsls	r2, r1, #10
 8009a60:	4610      	mov	r0, r2
 8009a62:	4619      	mov	r1, r3
 8009a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a66:	2200      	movs	r2, #0
 8009a68:	61bb      	str	r3, [r7, #24]
 8009a6a:	61fa      	str	r2, [r7, #28]
 8009a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a70:	f7fe fbaa 	bl	80081c8 <__aeabi_uldivmod>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4613      	mov	r3, r2
 8009a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	; (8009aac <HAL_RCC_GetSysClockFreq+0x200>)
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	0c1b      	lsrs	r3, r3, #16
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	3301      	adds	r3, #1
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a96:	e002      	b.n	8009a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3750      	adds	r7, #80	; 0x50
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aaa:	bf00      	nop
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	00f42400 	.word	0x00f42400
 8009ab4:	007a1200 	.word	0x007a1200

08009ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009abc:	4b03      	ldr	r3, [pc, #12]	; (8009acc <HAL_RCC_GetHCLKFreq+0x14>)
 8009abe:	681b      	ldr	r3, [r3, #0]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000000 	.word	0x20000000

08009ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ad4:	f7ff fff0 	bl	8009ab8 <HAL_RCC_GetHCLKFreq>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	0a9b      	lsrs	r3, r3, #10
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	4903      	ldr	r1, [pc, #12]	; (8009af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ae6:	5ccb      	ldrb	r3, [r1, r3]
 8009ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	40023800 	.word	0x40023800
 8009af4:	0800acd0 	.word	0x0800acd0

08009af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009afc:	f7ff ffdc 	bl	8009ab8 <HAL_RCC_GetHCLKFreq>
 8009b00:	4602      	mov	r2, r0
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	0b5b      	lsrs	r3, r3, #13
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	4903      	ldr	r1, [pc, #12]	; (8009b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b0e:	5ccb      	ldrb	r3, [r1, r3]
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	0800acd0 	.word	0x0800acd0

08009b20 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009b26:	f7ff f87d 	bl	8008c24 <HAL_GetTick>
 8009b2a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009b2c:	4b5d      	ldr	r3, [pc, #372]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a5c      	ldr	r2, [pc, #368]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009b38:	e008      	b.n	8009b4c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b3a:	f7ff f873 	bl	8008c24 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d901      	bls.n	8009b4c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e0a7      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009b4c:	4b55      	ldr	r3, [pc, #340]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0f0      	beq.n	8009b3a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009b58:	4b52      	ldr	r3, [pc, #328]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a51      	ldr	r2, [pc, #324]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009b64:	f7ff f85e 	bl	8008c24 <HAL_GetTick>
 8009b68:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8009b6a:	4b4e      	ldr	r3, [pc, #312]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b72:	f7ff f857 	bl	8008c24 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e089      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009b88:	4b46      	ldr	r3, [pc, #280]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 030c 	and.w	r3, r3, #12
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1ee      	bne.n	8009b72 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009b94:	f7ff f846 	bl	8008c24 <HAL_GetTick>
 8009b98:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009b9a:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a41      	ldr	r2, [pc, #260]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009ba0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8009ba4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009ba6:	e008      	b.n	8009bba <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba8:	f7ff f83c 	bl	8008c24 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b64      	cmp	r3, #100	; 0x64
 8009bb4:	d901      	bls.n	8009bba <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e070      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009bba:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f0      	bne.n	8009ba8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009bc6:	f7ff f82d 	bl	8008c24 <HAL_GetTick>
 8009bca:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a34      	ldr	r2, [pc, #208]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bd6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bda:	f7ff f823 	bl	8008c24 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e057      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009bec:	4b2d      	ldr	r3, [pc, #180]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1f0      	bne.n	8009bda <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009bf8:	f7ff f814 	bl	8008c24 <HAL_GetTick>
 8009bfc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009bfe:	4b29      	ldr	r3, [pc, #164]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a28      	ldr	r2, [pc, #160]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c08:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c0c:	f7ff f80a 	bl	8008c24 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e03e      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009c1e:	4b21      	ldr	r3, [pc, #132]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f0      	bne.n	8009c0c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8009c2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_RCC_DeInit+0x188>)
 8009c2e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009c30:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c32:	4a1e      	ldr	r2, [pc, #120]	; (8009cac <HAL_RCC_DeInit+0x18c>)
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009c38:	4b1a      	ldr	r3, [pc, #104]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	4a19      	ldr	r2, [pc, #100]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c3e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009c42:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c4e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8009c50:	4b14      	ldr	r3, [pc, #80]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	4a13      	ldr	r2, [pc, #76]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c56:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8009c5a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009c5c:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	4a10      	ldr	r2, [pc, #64]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c66:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6c:	4a0d      	ldr	r2, [pc, #52]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009c74:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c78:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <HAL_RCC_DeInit+0x184>)
 8009c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c7e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_RCC_DeInit+0x190>)
 8009c82:	4a0c      	ldr	r2, [pc, #48]	; (8009cb4 <HAL_RCC_DeInit+0x194>)
 8009c84:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c86:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <HAL_RCC_DeInit+0x198>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe ff86 	bl	8008b9c <HAL_InitTick>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
  }
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40023800 	.word	0x40023800
 8009ca8:	04003010 	.word	0x04003010
 8009cac:	20003000 	.word	0x20003000
 8009cb0:	20000000 	.word	0x20000000
 8009cb4:	00f42400 	.word	0x00f42400
 8009cb8:	20000004 	.word	0x20000004

08009cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e042      	b.n	8009d54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7fe fdb0 	bl	8008848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2224      	movs	r2, #36	; 0x24
 8009cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f82b 	bl	8009d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	691a      	ldr	r2, [r3, #16]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d60:	b0c0      	sub	sp, #256	; 0x100
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	68d9      	ldr	r1, [r3, #12]
 8009d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	ea40 0301 	orr.w	r3, r0, r1
 8009d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009db4:	f021 010c 	bic.w	r1, r1, #12
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd6:	6999      	ldr	r1, [r3, #24]
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	ea40 0301 	orr.w	r3, r0, r1
 8009de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b8f      	ldr	r3, [pc, #572]	; (800a028 <UART_SetConfig+0x2cc>)
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d005      	beq.n	8009dfc <UART_SetConfig+0xa0>
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b8d      	ldr	r3, [pc, #564]	; (800a02c <UART_SetConfig+0x2d0>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d104      	bne.n	8009e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dfc:	f7ff fe7c 	bl	8009af8 <HAL_RCC_GetPCLK2Freq>
 8009e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e04:	e003      	b.n	8009e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e06:	f7ff fe63 	bl	8009ad0 <HAL_RCC_GetPCLK1Freq>
 8009e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e18:	f040 810c 	bne.w	800a034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e2e:	4622      	mov	r2, r4
 8009e30:	462b      	mov	r3, r5
 8009e32:	1891      	adds	r1, r2, r2
 8009e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e36:	415b      	adcs	r3, r3
 8009e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e3e:	4621      	mov	r1, r4
 8009e40:	eb12 0801 	adds.w	r8, r2, r1
 8009e44:	4629      	mov	r1, r5
 8009e46:	eb43 0901 	adc.w	r9, r3, r1
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e5e:	4690      	mov	r8, r2
 8009e60:	4699      	mov	r9, r3
 8009e62:	4623      	mov	r3, r4
 8009e64:	eb18 0303 	adds.w	r3, r8, r3
 8009e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	eb49 0303 	adc.w	r3, r9, r3
 8009e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	18db      	adds	r3, r3, r3
 8009e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e90:	4613      	mov	r3, r2
 8009e92:	eb42 0303 	adc.w	r3, r2, r3
 8009e96:	657b      	str	r3, [r7, #84]	; 0x54
 8009e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ea0:	f7fe f992 	bl	80081c8 <__aeabi_uldivmod>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4b61      	ldr	r3, [pc, #388]	; (800a030 <UART_SetConfig+0x2d4>)
 8009eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8009eae:	095b      	lsrs	r3, r3, #5
 8009eb0:	011c      	lsls	r4, r3, #4
 8009eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	1891      	adds	r1, r2, r2
 8009eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ecc:	415b      	adcs	r3, r3
 8009ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8009eda:	4649      	mov	r1, r9
 8009edc:	eb43 0b01 	adc.w	fp, r3, r1
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	f04f 0300 	mov.w	r3, #0
 8009ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ef4:	4692      	mov	sl, r2
 8009ef6:	469b      	mov	fp, r3
 8009ef8:	4643      	mov	r3, r8
 8009efa:	eb1a 0303 	adds.w	r3, sl, r3
 8009efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f02:	464b      	mov	r3, r9
 8009f04:	eb4b 0303 	adc.w	r3, fp, r3
 8009f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f20:	460b      	mov	r3, r1
 8009f22:	18db      	adds	r3, r3, r3
 8009f24:	643b      	str	r3, [r7, #64]	; 0x40
 8009f26:	4613      	mov	r3, r2
 8009f28:	eb42 0303 	adc.w	r3, r2, r3
 8009f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f36:	f7fe f947 	bl	80081c8 <__aeabi_uldivmod>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <UART_SetConfig+0x2d4>)
 8009f42:	fba3 2301 	umull	r2, r3, r3, r1
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	2264      	movs	r2, #100	; 0x64
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	1acb      	subs	r3, r1, r3
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f56:	4b36      	ldr	r3, [pc, #216]	; (800a030 <UART_SetConfig+0x2d4>)
 8009f58:	fba3 2302 	umull	r2, r3, r3, r2
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f64:	441c      	add	r4, r3
 8009f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f78:	4642      	mov	r2, r8
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	1891      	adds	r1, r2, r2
 8009f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f80:	415b      	adcs	r3, r3
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f88:	4641      	mov	r1, r8
 8009f8a:	1851      	adds	r1, r2, r1
 8009f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f8e:	4649      	mov	r1, r9
 8009f90:	414b      	adcs	r3, r1
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fa0:	4659      	mov	r1, fp
 8009fa2:	00cb      	lsls	r3, r1, #3
 8009fa4:	4651      	mov	r1, sl
 8009fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009faa:	4651      	mov	r1, sl
 8009fac:	00ca      	lsls	r2, r1, #3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	189b      	adds	r3, r3, r2
 8009fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	eb42 0303 	adc.w	r3, r2, r3
 8009fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fdc:	460b      	mov	r3, r1
 8009fde:	18db      	adds	r3, r3, r3
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	eb42 0303 	adc.w	r3, r2, r3
 8009fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ff2:	f7fe f8e9 	bl	80081c8 <__aeabi_uldivmod>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <UART_SetConfig+0x2d4>)
 8009ffc:	fba3 1302 	umull	r1, r3, r3, r2
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	2164      	movs	r1, #100	; 0x64
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	3332      	adds	r3, #50	; 0x32
 800a00e:	4a08      	ldr	r2, [pc, #32]	; (800a030 <UART_SetConfig+0x2d4>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	f003 0207 	and.w	r2, r3, #7
 800a01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4422      	add	r2, r4
 800a022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a024:	e106      	b.n	800a234 <UART_SetConfig+0x4d8>
 800a026:	bf00      	nop
 800a028:	40011000 	.word	0x40011000
 800a02c:	40011400 	.word	0x40011400
 800a030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a03e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	1891      	adds	r1, r2, r2
 800a04c:	6239      	str	r1, [r7, #32]
 800a04e:	415b      	adcs	r3, r3
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
 800a052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a056:	4641      	mov	r1, r8
 800a058:	1854      	adds	r4, r2, r1
 800a05a:	4649      	mov	r1, r9
 800a05c:	eb43 0501 	adc.w	r5, r3, r1
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	f04f 0300 	mov.w	r3, #0
 800a068:	00eb      	lsls	r3, r5, #3
 800a06a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a06e:	00e2      	lsls	r2, r4, #3
 800a070:	4614      	mov	r4, r2
 800a072:	461d      	mov	r5, r3
 800a074:	4643      	mov	r3, r8
 800a076:	18e3      	adds	r3, r4, r3
 800a078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a07c:	464b      	mov	r3, r9
 800a07e:	eb45 0303 	adc.w	r3, r5, r3
 800a082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	f04f 0300 	mov.w	r3, #0
 800a09e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	008b      	lsls	r3, r1, #2
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	008a      	lsls	r2, r1, #2
 800a0b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0b4:	f7fe f888 	bl	80081c8 <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4b60      	ldr	r3, [pc, #384]	; (800a240 <UART_SetConfig+0x4e4>)
 800a0be:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	011c      	lsls	r4, r3, #4
 800a0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0d8:	4642      	mov	r2, r8
 800a0da:	464b      	mov	r3, r9
 800a0dc:	1891      	adds	r1, r2, r2
 800a0de:	61b9      	str	r1, [r7, #24]
 800a0e0:	415b      	adcs	r3, r3
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	1851      	adds	r1, r2, r1
 800a0ec:	6139      	str	r1, [r7, #16]
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	414b      	adcs	r3, r1
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a100:	4659      	mov	r1, fp
 800a102:	00cb      	lsls	r3, r1, #3
 800a104:	4651      	mov	r1, sl
 800a106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a10a:	4651      	mov	r1, sl
 800a10c:	00ca      	lsls	r2, r1, #3
 800a10e:	4610      	mov	r0, r2
 800a110:	4619      	mov	r1, r3
 800a112:	4603      	mov	r3, r0
 800a114:	4642      	mov	r2, r8
 800a116:	189b      	adds	r3, r3, r2
 800a118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a11c:	464b      	mov	r3, r9
 800a11e:	460a      	mov	r2, r1
 800a120:	eb42 0303 	adc.w	r3, r2, r3
 800a124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	67bb      	str	r3, [r7, #120]	; 0x78
 800a132:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	f04f 0300 	mov.w	r3, #0
 800a13c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a140:	4649      	mov	r1, r9
 800a142:	008b      	lsls	r3, r1, #2
 800a144:	4641      	mov	r1, r8
 800a146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a14a:	4641      	mov	r1, r8
 800a14c:	008a      	lsls	r2, r1, #2
 800a14e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a152:	f7fe f839 	bl	80081c8 <__aeabi_uldivmod>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	4b38      	ldr	r3, [pc, #224]	; (800a240 <UART_SetConfig+0x4e4>)
 800a15e:	fba3 2301 	umull	r2, r3, r3, r1
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	2264      	movs	r2, #100	; 0x64
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	1acb      	subs	r3, r1, r3
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	3332      	adds	r3, #50	; 0x32
 800a170:	4a33      	ldr	r2, [pc, #204]	; (800a240 <UART_SetConfig+0x4e4>)
 800a172:	fba2 2303 	umull	r2, r3, r2, r3
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a17c:	441c      	add	r4, r3
 800a17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a182:	2200      	movs	r2, #0
 800a184:	673b      	str	r3, [r7, #112]	; 0x70
 800a186:	677a      	str	r2, [r7, #116]	; 0x74
 800a188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	1891      	adds	r1, r2, r2
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	415b      	adcs	r3, r3
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a19c:	4641      	mov	r1, r8
 800a19e:	1851      	adds	r1, r2, r1
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	00cb      	lsls	r3, r1, #3
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1be:	4651      	mov	r1, sl
 800a1c0:	00ca      	lsls	r2, r1, #3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	eb42 0303 	adc.w	r3, r2, r3
 800a1d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1e2:	667a      	str	r2, [r7, #100]	; 0x64
 800a1e4:	f04f 0200 	mov.w	r2, #0
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	008b      	lsls	r3, r1, #2
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	008a      	lsls	r2, r1, #2
 800a1fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a202:	f7fd ffe1 	bl	80081c8 <__aeabi_uldivmod>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <UART_SetConfig+0x4e4>)
 800a20c:	fba3 1302 	umull	r1, r3, r3, r2
 800a210:	095b      	lsrs	r3, r3, #5
 800a212:	2164      	movs	r1, #100	; 0x64
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	3332      	adds	r3, #50	; 0x32
 800a21e:	4a08      	ldr	r2, [pc, #32]	; (800a240 <UART_SetConfig+0x4e4>)
 800a220:	fba2 2303 	umull	r2, r3, r2, r3
 800a224:	095b      	lsrs	r3, r3, #5
 800a226:	f003 020f 	and.w	r2, r3, #15
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4422      	add	r2, r4
 800a232:	609a      	str	r2, [r3, #8]
}
 800a234:	bf00      	nop
 800a236:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a23a:	46bd      	mov	sp, r7
 800a23c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a240:	51eb851f 	.word	0x51eb851f

0800a244 <std>:
 800a244:	2300      	movs	r3, #0
 800a246:	b510      	push	{r4, lr}
 800a248:	4604      	mov	r4, r0
 800a24a:	e9c0 3300 	strd	r3, r3, [r0]
 800a24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a252:	6083      	str	r3, [r0, #8]
 800a254:	8181      	strh	r1, [r0, #12]
 800a256:	6643      	str	r3, [r0, #100]	; 0x64
 800a258:	81c2      	strh	r2, [r0, #14]
 800a25a:	6183      	str	r3, [r0, #24]
 800a25c:	4619      	mov	r1, r3
 800a25e:	2208      	movs	r2, #8
 800a260:	305c      	adds	r0, #92	; 0x5c
 800a262:	f000 f9e5 	bl	800a630 <memset>
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <std+0x58>)
 800a268:	6263      	str	r3, [r4, #36]	; 0x24
 800a26a:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <std+0x5c>)
 800a26c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <std+0x60>)
 800a270:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a272:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <std+0x64>)
 800a274:	6323      	str	r3, [r4, #48]	; 0x30
 800a276:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <std+0x68>)
 800a278:	6224      	str	r4, [r4, #32]
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d006      	beq.n	800a28c <std+0x48>
 800a27e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a282:	4294      	cmp	r4, r2
 800a284:	d002      	beq.n	800a28c <std+0x48>
 800a286:	33d0      	adds	r3, #208	; 0xd0
 800a288:	429c      	cmp	r4, r3
 800a28a:	d105      	bne.n	800a298 <std+0x54>
 800a28c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a294:	f000 ba44 	b.w	800a720 <__retarget_lock_init_recursive>
 800a298:	bd10      	pop	{r4, pc}
 800a29a:	bf00      	nop
 800a29c:	0800a481 	.word	0x0800a481
 800a2a0:	0800a4a3 	.word	0x0800a4a3
 800a2a4:	0800a4db 	.word	0x0800a4db
 800a2a8:	0800a4ff 	.word	0x0800a4ff
 800a2ac:	200000d8 	.word	0x200000d8

0800a2b0 <stdio_exit_handler>:
 800a2b0:	4a02      	ldr	r2, [pc, #8]	; (800a2bc <stdio_exit_handler+0xc>)
 800a2b2:	4903      	ldr	r1, [pc, #12]	; (800a2c0 <stdio_exit_handler+0x10>)
 800a2b4:	4803      	ldr	r0, [pc, #12]	; (800a2c4 <stdio_exit_handler+0x14>)
 800a2b6:	f000 b869 	b.w	800a38c <_fwalk_sglue>
 800a2ba:	bf00      	nop
 800a2bc:	2000000c 	.word	0x2000000c
 800a2c0:	0800aa25 	.word	0x0800aa25
 800a2c4:	20000018 	.word	0x20000018

0800a2c8 <cleanup_stdio>:
 800a2c8:	6841      	ldr	r1, [r0, #4]
 800a2ca:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <cleanup_stdio+0x34>)
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	b510      	push	{r4, lr}
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	d001      	beq.n	800a2d8 <cleanup_stdio+0x10>
 800a2d4:	f000 fba6 	bl	800aa24 <_fflush_r>
 800a2d8:	68a1      	ldr	r1, [r4, #8]
 800a2da:	4b09      	ldr	r3, [pc, #36]	; (800a300 <cleanup_stdio+0x38>)
 800a2dc:	4299      	cmp	r1, r3
 800a2de:	d002      	beq.n	800a2e6 <cleanup_stdio+0x1e>
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fb9f 	bl	800aa24 <_fflush_r>
 800a2e6:	68e1      	ldr	r1, [r4, #12]
 800a2e8:	4b06      	ldr	r3, [pc, #24]	; (800a304 <cleanup_stdio+0x3c>)
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	d004      	beq.n	800a2f8 <cleanup_stdio+0x30>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f4:	f000 bb96 	b.w	800aa24 <_fflush_r>
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	200000d8 	.word	0x200000d8
 800a300:	20000140 	.word	0x20000140
 800a304:	200001a8 	.word	0x200001a8

0800a308 <global_stdio_init.part.0>:
 800a308:	b510      	push	{r4, lr}
 800a30a:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <global_stdio_init.part.0+0x30>)
 800a30c:	4c0b      	ldr	r4, [pc, #44]	; (800a33c <global_stdio_init.part.0+0x34>)
 800a30e:	4a0c      	ldr	r2, [pc, #48]	; (800a340 <global_stdio_init.part.0+0x38>)
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	4620      	mov	r0, r4
 800a314:	2200      	movs	r2, #0
 800a316:	2104      	movs	r1, #4
 800a318:	f7ff ff94 	bl	800a244 <std>
 800a31c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a320:	2201      	movs	r2, #1
 800a322:	2109      	movs	r1, #9
 800a324:	f7ff ff8e 	bl	800a244 <std>
 800a328:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a32c:	2202      	movs	r2, #2
 800a32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a332:	2112      	movs	r1, #18
 800a334:	f7ff bf86 	b.w	800a244 <std>
 800a338:	20000210 	.word	0x20000210
 800a33c:	200000d8 	.word	0x200000d8
 800a340:	0800a2b1 	.word	0x0800a2b1

0800a344 <__sfp_lock_acquire>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__sfp_lock_acquire+0x8>)
 800a346:	f000 b9ec 	b.w	800a722 <__retarget_lock_acquire_recursive>
 800a34a:	bf00      	nop
 800a34c:	20000219 	.word	0x20000219

0800a350 <__sfp_lock_release>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__sfp_lock_release+0x8>)
 800a352:	f000 b9e7 	b.w	800a724 <__retarget_lock_release_recursive>
 800a356:	bf00      	nop
 800a358:	20000219 	.word	0x20000219

0800a35c <__sinit>:
 800a35c:	b510      	push	{r4, lr}
 800a35e:	4604      	mov	r4, r0
 800a360:	f7ff fff0 	bl	800a344 <__sfp_lock_acquire>
 800a364:	6a23      	ldr	r3, [r4, #32]
 800a366:	b11b      	cbz	r3, 800a370 <__sinit+0x14>
 800a368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36c:	f7ff bff0 	b.w	800a350 <__sfp_lock_release>
 800a370:	4b04      	ldr	r3, [pc, #16]	; (800a384 <__sinit+0x28>)
 800a372:	6223      	str	r3, [r4, #32]
 800a374:	4b04      	ldr	r3, [pc, #16]	; (800a388 <__sinit+0x2c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f5      	bne.n	800a368 <__sinit+0xc>
 800a37c:	f7ff ffc4 	bl	800a308 <global_stdio_init.part.0>
 800a380:	e7f2      	b.n	800a368 <__sinit+0xc>
 800a382:	bf00      	nop
 800a384:	0800a2c9 	.word	0x0800a2c9
 800a388:	20000210 	.word	0x20000210

0800a38c <_fwalk_sglue>:
 800a38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a390:	4607      	mov	r7, r0
 800a392:	4688      	mov	r8, r1
 800a394:	4614      	mov	r4, r2
 800a396:	2600      	movs	r6, #0
 800a398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a39c:	f1b9 0901 	subs.w	r9, r9, #1
 800a3a0:	d505      	bpl.n	800a3ae <_fwalk_sglue+0x22>
 800a3a2:	6824      	ldr	r4, [r4, #0]
 800a3a4:	2c00      	cmp	r4, #0
 800a3a6:	d1f7      	bne.n	800a398 <_fwalk_sglue+0xc>
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d907      	bls.n	800a3c4 <_fwalk_sglue+0x38>
 800a3b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	d003      	beq.n	800a3c4 <_fwalk_sglue+0x38>
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4638      	mov	r0, r7
 800a3c0:	47c0      	blx	r8
 800a3c2:	4306      	orrs	r6, r0
 800a3c4:	3568      	adds	r5, #104	; 0x68
 800a3c6:	e7e9      	b.n	800a39c <_fwalk_sglue+0x10>

0800a3c8 <_puts_r>:
 800a3c8:	6a03      	ldr	r3, [r0, #32]
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	6884      	ldr	r4, [r0, #8]
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	460e      	mov	r6, r1
 800a3d2:	b90b      	cbnz	r3, 800a3d8 <_puts_r+0x10>
 800a3d4:	f7ff ffc2 	bl	800a35c <__sinit>
 800a3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3da:	07db      	lsls	r3, r3, #31
 800a3dc:	d405      	bmi.n	800a3ea <_puts_r+0x22>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	0598      	lsls	r0, r3, #22
 800a3e2:	d402      	bmi.n	800a3ea <_puts_r+0x22>
 800a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e6:	f000 f99c 	bl	800a722 <__retarget_lock_acquire_recursive>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	0719      	lsls	r1, r3, #28
 800a3ee:	d513      	bpl.n	800a418 <_puts_r+0x50>
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	b18b      	cbz	r3, 800a418 <_puts_r+0x50>
 800a3f4:	3e01      	subs	r6, #1
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	b9e9      	cbnz	r1, 800a43e <_puts_r+0x76>
 800a402:	2b00      	cmp	r3, #0
 800a404:	da2e      	bge.n	800a464 <_puts_r+0x9c>
 800a406:	4622      	mov	r2, r4
 800a408:	210a      	movs	r1, #10
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 f87b 	bl	800a506 <__swbuf_r>
 800a410:	3001      	adds	r0, #1
 800a412:	d007      	beq.n	800a424 <_puts_r+0x5c>
 800a414:	250a      	movs	r5, #10
 800a416:	e007      	b.n	800a428 <_puts_r+0x60>
 800a418:	4621      	mov	r1, r4
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 f8b0 	bl	800a580 <__swsetup_r>
 800a420:	2800      	cmp	r0, #0
 800a422:	d0e7      	beq.n	800a3f4 <_puts_r+0x2c>
 800a424:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42a:	07da      	lsls	r2, r3, #31
 800a42c:	d405      	bmi.n	800a43a <_puts_r+0x72>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	059b      	lsls	r3, r3, #22
 800a432:	d402      	bmi.n	800a43a <_puts_r+0x72>
 800a434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a436:	f000 f975 	bl	800a724 <__retarget_lock_release_recursive>
 800a43a:	4628      	mov	r0, r5
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
 800a43e:	2b00      	cmp	r3, #0
 800a440:	da04      	bge.n	800a44c <_puts_r+0x84>
 800a442:	69a2      	ldr	r2, [r4, #24]
 800a444:	429a      	cmp	r2, r3
 800a446:	dc06      	bgt.n	800a456 <_puts_r+0x8e>
 800a448:	290a      	cmp	r1, #10
 800a44a:	d004      	beq.n	800a456 <_puts_r+0x8e>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	1c5a      	adds	r2, r3, #1
 800a450:	6022      	str	r2, [r4, #0]
 800a452:	7019      	strb	r1, [r3, #0]
 800a454:	e7cf      	b.n	800a3f6 <_puts_r+0x2e>
 800a456:	4622      	mov	r2, r4
 800a458:	4628      	mov	r0, r5
 800a45a:	f000 f854 	bl	800a506 <__swbuf_r>
 800a45e:	3001      	adds	r0, #1
 800a460:	d1c9      	bne.n	800a3f6 <_puts_r+0x2e>
 800a462:	e7df      	b.n	800a424 <_puts_r+0x5c>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	250a      	movs	r5, #10
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	6022      	str	r2, [r4, #0]
 800a46c:	701d      	strb	r5, [r3, #0]
 800a46e:	e7db      	b.n	800a428 <_puts_r+0x60>

0800a470 <puts>:
 800a470:	4b02      	ldr	r3, [pc, #8]	; (800a47c <puts+0xc>)
 800a472:	4601      	mov	r1, r0
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	f7ff bfa7 	b.w	800a3c8 <_puts_r>
 800a47a:	bf00      	nop
 800a47c:	20000064 	.word	0x20000064

0800a480 <__sread>:
 800a480:	b510      	push	{r4, lr}
 800a482:	460c      	mov	r4, r1
 800a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a488:	f000 f8fc 	bl	800a684 <_read_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	bfab      	itete	ge
 800a490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a492:	89a3      	ldrhlt	r3, [r4, #12]
 800a494:	181b      	addge	r3, r3, r0
 800a496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a49a:	bfac      	ite	ge
 800a49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a49e:	81a3      	strhlt	r3, [r4, #12]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <__swrite>:
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	461f      	mov	r7, r3
 800a4a8:	898b      	ldrh	r3, [r1, #12]
 800a4aa:	05db      	lsls	r3, r3, #23
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	d505      	bpl.n	800a4c0 <__swrite+0x1e>
 800a4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f000 f8d0 	bl	800a660 <_lseek_r>
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d6:	f000 b8e7 	b.w	800a6a8 <_write_r>

0800a4da <__sseek>:
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	460c      	mov	r4, r1
 800a4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e2:	f000 f8bd 	bl	800a660 <_lseek_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	bf15      	itete	ne
 800a4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4f6:	81a3      	strheq	r3, [r4, #12]
 800a4f8:	bf18      	it	ne
 800a4fa:	81a3      	strhne	r3, [r4, #12]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__sclose>:
 800a4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a502:	f000 b89d 	b.w	800a640 <_close_r>

0800a506 <__swbuf_r>:
 800a506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a508:	460e      	mov	r6, r1
 800a50a:	4614      	mov	r4, r2
 800a50c:	4605      	mov	r5, r0
 800a50e:	b118      	cbz	r0, 800a518 <__swbuf_r+0x12>
 800a510:	6a03      	ldr	r3, [r0, #32]
 800a512:	b90b      	cbnz	r3, 800a518 <__swbuf_r+0x12>
 800a514:	f7ff ff22 	bl	800a35c <__sinit>
 800a518:	69a3      	ldr	r3, [r4, #24]
 800a51a:	60a3      	str	r3, [r4, #8]
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	071a      	lsls	r2, r3, #28
 800a520:	d525      	bpl.n	800a56e <__swbuf_r+0x68>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	b31b      	cbz	r3, 800a56e <__swbuf_r+0x68>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	1a98      	subs	r0, r3, r2
 800a52c:	6963      	ldr	r3, [r4, #20]
 800a52e:	b2f6      	uxtb	r6, r6
 800a530:	4283      	cmp	r3, r0
 800a532:	4637      	mov	r7, r6
 800a534:	dc04      	bgt.n	800a540 <__swbuf_r+0x3a>
 800a536:	4621      	mov	r1, r4
 800a538:	4628      	mov	r0, r5
 800a53a:	f000 fa73 	bl	800aa24 <_fflush_r>
 800a53e:	b9e0      	cbnz	r0, 800a57a <__swbuf_r+0x74>
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	3b01      	subs	r3, #1
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	6022      	str	r2, [r4, #0]
 800a54c:	701e      	strb	r6, [r3, #0]
 800a54e:	6962      	ldr	r2, [r4, #20]
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	429a      	cmp	r2, r3
 800a554:	d004      	beq.n	800a560 <__swbuf_r+0x5a>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	07db      	lsls	r3, r3, #31
 800a55a:	d506      	bpl.n	800a56a <__swbuf_r+0x64>
 800a55c:	2e0a      	cmp	r6, #10
 800a55e:	d104      	bne.n	800a56a <__swbuf_r+0x64>
 800a560:	4621      	mov	r1, r4
 800a562:	4628      	mov	r0, r5
 800a564:	f000 fa5e 	bl	800aa24 <_fflush_r>
 800a568:	b938      	cbnz	r0, 800a57a <__swbuf_r+0x74>
 800a56a:	4638      	mov	r0, r7
 800a56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f000 f805 	bl	800a580 <__swsetup_r>
 800a576:	2800      	cmp	r0, #0
 800a578:	d0d5      	beq.n	800a526 <__swbuf_r+0x20>
 800a57a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a57e:	e7f4      	b.n	800a56a <__swbuf_r+0x64>

0800a580 <__swsetup_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <__swsetup_r+0xac>)
 800a584:	4605      	mov	r5, r0
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	460c      	mov	r4, r1
 800a58a:	b118      	cbz	r0, 800a594 <__swsetup_r+0x14>
 800a58c:	6a03      	ldr	r3, [r0, #32]
 800a58e:	b90b      	cbnz	r3, 800a594 <__swsetup_r+0x14>
 800a590:	f7ff fee4 	bl	800a35c <__sinit>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a59a:	0718      	lsls	r0, r3, #28
 800a59c:	d422      	bmi.n	800a5e4 <__swsetup_r+0x64>
 800a59e:	06d9      	lsls	r1, r3, #27
 800a5a0:	d407      	bmi.n	800a5b2 <__swsetup_r+0x32>
 800a5a2:	2309      	movs	r3, #9
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5b0:	e034      	b.n	800a61c <__swsetup_r+0x9c>
 800a5b2:	0758      	lsls	r0, r3, #29
 800a5b4:	d512      	bpl.n	800a5dc <__swsetup_r+0x5c>
 800a5b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5b8:	b141      	cbz	r1, 800a5cc <__swsetup_r+0x4c>
 800a5ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	d002      	beq.n	800a5c8 <__swsetup_r+0x48>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f8b0 	bl	800a728 <_free_r>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6363      	str	r3, [r4, #52]	; 0x34
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	6063      	str	r3, [r4, #4]
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f043 0308 	orr.w	r3, r3, #8
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	b94b      	cbnz	r3, 800a5fc <__swsetup_r+0x7c>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f2:	d003      	beq.n	800a5fc <__swsetup_r+0x7c>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fa62 	bl	800aac0 <__smakebuf_r>
 800a5fc:	89a0      	ldrh	r0, [r4, #12]
 800a5fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a602:	f010 0301 	ands.w	r3, r0, #1
 800a606:	d00a      	beq.n	800a61e <__swsetup_r+0x9e>
 800a608:	2300      	movs	r3, #0
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	6963      	ldr	r3, [r4, #20]
 800a60e:	425b      	negs	r3, r3
 800a610:	61a3      	str	r3, [r4, #24]
 800a612:	6923      	ldr	r3, [r4, #16]
 800a614:	b943      	cbnz	r3, 800a628 <__swsetup_r+0xa8>
 800a616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a61a:	d1c4      	bne.n	800a5a6 <__swsetup_r+0x26>
 800a61c:	bd38      	pop	{r3, r4, r5, pc}
 800a61e:	0781      	lsls	r1, r0, #30
 800a620:	bf58      	it	pl
 800a622:	6963      	ldrpl	r3, [r4, #20]
 800a624:	60a3      	str	r3, [r4, #8]
 800a626:	e7f4      	b.n	800a612 <__swsetup_r+0x92>
 800a628:	2000      	movs	r0, #0
 800a62a:	e7f7      	b.n	800a61c <__swsetup_r+0x9c>
 800a62c:	20000064 	.word	0x20000064

0800a630 <memset>:
 800a630:	4402      	add	r2, r0
 800a632:	4603      	mov	r3, r0
 800a634:	4293      	cmp	r3, r2
 800a636:	d100      	bne.n	800a63a <memset+0xa>
 800a638:	4770      	bx	lr
 800a63a:	f803 1b01 	strb.w	r1, [r3], #1
 800a63e:	e7f9      	b.n	800a634 <memset+0x4>

0800a640 <_close_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d06      	ldr	r5, [pc, #24]	; (800a65c <_close_r+0x1c>)
 800a644:	2300      	movs	r3, #0
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	602b      	str	r3, [r5, #0]
 800a64c:	f7fe f9a7 	bl	800899e <_close>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_close_r+0x1a>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_close_r+0x1a>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	20000214 	.word	0x20000214

0800a660 <_lseek_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_lseek_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7fe f9bc 	bl	80089ec <_lseek>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_lseek_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_lseek_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20000214 	.word	0x20000214

0800a684 <_read_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_read_r+0x20>)
 800a688:	4604      	mov	r4, r0
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	602a      	str	r2, [r5, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f7fe f94a 	bl	800892c <_read>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_read_r+0x1e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_read_r+0x1e>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000214 	.word	0x20000214

0800a6a8 <_write_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_write_r+0x20>)
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	4608      	mov	r0, r1
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	602a      	str	r2, [r5, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f7fe f955 	bl	8008966 <_write>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_write_r+0x1e>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_write_r+0x1e>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	20000214 	.word	0x20000214

0800a6cc <__errno>:
 800a6cc:	4b01      	ldr	r3, [pc, #4]	; (800a6d4 <__errno+0x8>)
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	20000064 	.word	0x20000064

0800a6d8 <__libc_init_array>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	4d0d      	ldr	r5, [pc, #52]	; (800a710 <__libc_init_array+0x38>)
 800a6dc:	4c0d      	ldr	r4, [pc, #52]	; (800a714 <__libc_init_array+0x3c>)
 800a6de:	1b64      	subs	r4, r4, r5
 800a6e0:	10a4      	asrs	r4, r4, #2
 800a6e2:	2600      	movs	r6, #0
 800a6e4:	42a6      	cmp	r6, r4
 800a6e6:	d109      	bne.n	800a6fc <__libc_init_array+0x24>
 800a6e8:	4d0b      	ldr	r5, [pc, #44]	; (800a718 <__libc_init_array+0x40>)
 800a6ea:	4c0c      	ldr	r4, [pc, #48]	; (800a71c <__libc_init_array+0x44>)
 800a6ec:	f000 fa56 	bl	800ab9c <_init>
 800a6f0:	1b64      	subs	r4, r4, r5
 800a6f2:	10a4      	asrs	r4, r4, #2
 800a6f4:	2600      	movs	r6, #0
 800a6f6:	42a6      	cmp	r6, r4
 800a6f8:	d105      	bne.n	800a706 <__libc_init_array+0x2e>
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
 800a6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a700:	4798      	blx	r3
 800a702:	3601      	adds	r6, #1
 800a704:	e7ee      	b.n	800a6e4 <__libc_init_array+0xc>
 800a706:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70a:	4798      	blx	r3
 800a70c:	3601      	adds	r6, #1
 800a70e:	e7f2      	b.n	800a6f6 <__libc_init_array+0x1e>
 800a710:	0800ace0 	.word	0x0800ace0
 800a714:	0800ace0 	.word	0x0800ace0
 800a718:	0800ace0 	.word	0x0800ace0
 800a71c:	0800ace4 	.word	0x0800ace4

0800a720 <__retarget_lock_init_recursive>:
 800a720:	4770      	bx	lr

0800a722 <__retarget_lock_acquire_recursive>:
 800a722:	4770      	bx	lr

0800a724 <__retarget_lock_release_recursive>:
 800a724:	4770      	bx	lr
	...

0800a728 <_free_r>:
 800a728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d044      	beq.n	800a7b8 <_free_r+0x90>
 800a72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a732:	9001      	str	r0, [sp, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f1a1 0404 	sub.w	r4, r1, #4
 800a73a:	bfb8      	it	lt
 800a73c:	18e4      	addlt	r4, r4, r3
 800a73e:	f000 f8df 	bl	800a900 <__malloc_lock>
 800a742:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <_free_r+0x94>)
 800a744:	9801      	ldr	r0, [sp, #4]
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	b933      	cbnz	r3, 800a758 <_free_r+0x30>
 800a74a:	6063      	str	r3, [r4, #4]
 800a74c:	6014      	str	r4, [r2, #0]
 800a74e:	b003      	add	sp, #12
 800a750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a754:	f000 b8da 	b.w	800a90c <__malloc_unlock>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d908      	bls.n	800a76e <_free_r+0x46>
 800a75c:	6825      	ldr	r5, [r4, #0]
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	428b      	cmp	r3, r1
 800a762:	bf01      	itttt	eq
 800a764:	6819      	ldreq	r1, [r3, #0]
 800a766:	685b      	ldreq	r3, [r3, #4]
 800a768:	1949      	addeq	r1, r1, r5
 800a76a:	6021      	streq	r1, [r4, #0]
 800a76c:	e7ed      	b.n	800a74a <_free_r+0x22>
 800a76e:	461a      	mov	r2, r3
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	b10b      	cbz	r3, 800a778 <_free_r+0x50>
 800a774:	42a3      	cmp	r3, r4
 800a776:	d9fa      	bls.n	800a76e <_free_r+0x46>
 800a778:	6811      	ldr	r1, [r2, #0]
 800a77a:	1855      	adds	r5, r2, r1
 800a77c:	42a5      	cmp	r5, r4
 800a77e:	d10b      	bne.n	800a798 <_free_r+0x70>
 800a780:	6824      	ldr	r4, [r4, #0]
 800a782:	4421      	add	r1, r4
 800a784:	1854      	adds	r4, r2, r1
 800a786:	42a3      	cmp	r3, r4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	d1e0      	bne.n	800a74e <_free_r+0x26>
 800a78c:	681c      	ldr	r4, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	6053      	str	r3, [r2, #4]
 800a792:	440c      	add	r4, r1
 800a794:	6014      	str	r4, [r2, #0]
 800a796:	e7da      	b.n	800a74e <_free_r+0x26>
 800a798:	d902      	bls.n	800a7a0 <_free_r+0x78>
 800a79a:	230c      	movs	r3, #12
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	e7d6      	b.n	800a74e <_free_r+0x26>
 800a7a0:	6825      	ldr	r5, [r4, #0]
 800a7a2:	1961      	adds	r1, r4, r5
 800a7a4:	428b      	cmp	r3, r1
 800a7a6:	bf04      	itt	eq
 800a7a8:	6819      	ldreq	r1, [r3, #0]
 800a7aa:	685b      	ldreq	r3, [r3, #4]
 800a7ac:	6063      	str	r3, [r4, #4]
 800a7ae:	bf04      	itt	eq
 800a7b0:	1949      	addeq	r1, r1, r5
 800a7b2:	6021      	streq	r1, [r4, #0]
 800a7b4:	6054      	str	r4, [r2, #4]
 800a7b6:	e7ca      	b.n	800a74e <_free_r+0x26>
 800a7b8:	b003      	add	sp, #12
 800a7ba:	bd30      	pop	{r4, r5, pc}
 800a7bc:	2000021c 	.word	0x2000021c

0800a7c0 <sbrk_aligned>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4e0e      	ldr	r6, [pc, #56]	; (800a7fc <sbrk_aligned+0x3c>)
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	6831      	ldr	r1, [r6, #0]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	b911      	cbnz	r1, 800a7d2 <sbrk_aligned+0x12>
 800a7cc:	f000 f9d6 	bl	800ab7c <_sbrk_r>
 800a7d0:	6030      	str	r0, [r6, #0]
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f9d1 	bl	800ab7c <_sbrk_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d00a      	beq.n	800a7f4 <sbrk_aligned+0x34>
 800a7de:	1cc4      	adds	r4, r0, #3
 800a7e0:	f024 0403 	bic.w	r4, r4, #3
 800a7e4:	42a0      	cmp	r0, r4
 800a7e6:	d007      	beq.n	800a7f8 <sbrk_aligned+0x38>
 800a7e8:	1a21      	subs	r1, r4, r0
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 f9c6 	bl	800ab7c <_sbrk_r>
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d101      	bne.n	800a7f8 <sbrk_aligned+0x38>
 800a7f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	20000220 	.word	0x20000220

0800a800 <_malloc_r>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	1ccd      	adds	r5, r1, #3
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	2d00      	cmp	r5, #0
 800a814:	4607      	mov	r7, r0
 800a816:	db01      	blt.n	800a81c <_malloc_r+0x1c>
 800a818:	42a9      	cmp	r1, r5
 800a81a:	d905      	bls.n	800a828 <_malloc_r+0x28>
 800a81c:	230c      	movs	r3, #12
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	2600      	movs	r6, #0
 800a822:	4630      	mov	r0, r6
 800a824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8fc <_malloc_r+0xfc>
 800a82c:	f000 f868 	bl	800a900 <__malloc_lock>
 800a830:	f8d8 3000 	ldr.w	r3, [r8]
 800a834:	461c      	mov	r4, r3
 800a836:	bb5c      	cbnz	r4, 800a890 <_malloc_r+0x90>
 800a838:	4629      	mov	r1, r5
 800a83a:	4638      	mov	r0, r7
 800a83c:	f7ff ffc0 	bl	800a7c0 <sbrk_aligned>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	4604      	mov	r4, r0
 800a844:	d155      	bne.n	800a8f2 <_malloc_r+0xf2>
 800a846:	f8d8 4000 	ldr.w	r4, [r8]
 800a84a:	4626      	mov	r6, r4
 800a84c:	2e00      	cmp	r6, #0
 800a84e:	d145      	bne.n	800a8dc <_malloc_r+0xdc>
 800a850:	2c00      	cmp	r4, #0
 800a852:	d048      	beq.n	800a8e6 <_malloc_r+0xe6>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	4631      	mov	r1, r6
 800a858:	4638      	mov	r0, r7
 800a85a:	eb04 0903 	add.w	r9, r4, r3
 800a85e:	f000 f98d 	bl	800ab7c <_sbrk_r>
 800a862:	4581      	cmp	r9, r0
 800a864:	d13f      	bne.n	800a8e6 <_malloc_r+0xe6>
 800a866:	6821      	ldr	r1, [r4, #0]
 800a868:	1a6d      	subs	r5, r5, r1
 800a86a:	4629      	mov	r1, r5
 800a86c:	4638      	mov	r0, r7
 800a86e:	f7ff ffa7 	bl	800a7c0 <sbrk_aligned>
 800a872:	3001      	adds	r0, #1
 800a874:	d037      	beq.n	800a8e6 <_malloc_r+0xe6>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	442b      	add	r3, r5
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	f8d8 3000 	ldr.w	r3, [r8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d038      	beq.n	800a8f6 <_malloc_r+0xf6>
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	42a2      	cmp	r2, r4
 800a888:	d12b      	bne.n	800a8e2 <_malloc_r+0xe2>
 800a88a:	2200      	movs	r2, #0
 800a88c:	605a      	str	r2, [r3, #4]
 800a88e:	e00f      	b.n	800a8b0 <_malloc_r+0xb0>
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	1b52      	subs	r2, r2, r5
 800a894:	d41f      	bmi.n	800a8d6 <_malloc_r+0xd6>
 800a896:	2a0b      	cmp	r2, #11
 800a898:	d917      	bls.n	800a8ca <_malloc_r+0xca>
 800a89a:	1961      	adds	r1, r4, r5
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	6025      	str	r5, [r4, #0]
 800a8a0:	bf18      	it	ne
 800a8a2:	6059      	strne	r1, [r3, #4]
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	bf08      	it	eq
 800a8a8:	f8c8 1000 	streq.w	r1, [r8]
 800a8ac:	5162      	str	r2, [r4, r5]
 800a8ae:	604b      	str	r3, [r1, #4]
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f104 060b 	add.w	r6, r4, #11
 800a8b6:	f000 f829 	bl	800a90c <__malloc_unlock>
 800a8ba:	f026 0607 	bic.w	r6, r6, #7
 800a8be:	1d23      	adds	r3, r4, #4
 800a8c0:	1af2      	subs	r2, r6, r3
 800a8c2:	d0ae      	beq.n	800a822 <_malloc_r+0x22>
 800a8c4:	1b9b      	subs	r3, r3, r6
 800a8c6:	50a3      	str	r3, [r4, r2]
 800a8c8:	e7ab      	b.n	800a822 <_malloc_r+0x22>
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	6862      	ldr	r2, [r4, #4]
 800a8ce:	d1dd      	bne.n	800a88c <_malloc_r+0x8c>
 800a8d0:	f8c8 2000 	str.w	r2, [r8]
 800a8d4:	e7ec      	b.n	800a8b0 <_malloc_r+0xb0>
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	6864      	ldr	r4, [r4, #4]
 800a8da:	e7ac      	b.n	800a836 <_malloc_r+0x36>
 800a8dc:	4634      	mov	r4, r6
 800a8de:	6876      	ldr	r6, [r6, #4]
 800a8e0:	e7b4      	b.n	800a84c <_malloc_r+0x4c>
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	e7cc      	b.n	800a880 <_malloc_r+0x80>
 800a8e6:	230c      	movs	r3, #12
 800a8e8:	603b      	str	r3, [r7, #0]
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f000 f80e 	bl	800a90c <__malloc_unlock>
 800a8f0:	e797      	b.n	800a822 <_malloc_r+0x22>
 800a8f2:	6025      	str	r5, [r4, #0]
 800a8f4:	e7dc      	b.n	800a8b0 <_malloc_r+0xb0>
 800a8f6:	605b      	str	r3, [r3, #4]
 800a8f8:	deff      	udf	#255	; 0xff
 800a8fa:	bf00      	nop
 800a8fc:	2000021c 	.word	0x2000021c

0800a900 <__malloc_lock>:
 800a900:	4801      	ldr	r0, [pc, #4]	; (800a908 <__malloc_lock+0x8>)
 800a902:	f7ff bf0e 	b.w	800a722 <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	20000218 	.word	0x20000218

0800a90c <__malloc_unlock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__malloc_unlock+0x8>)
 800a90e:	f7ff bf09 	b.w	800a724 <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	20000218 	.word	0x20000218

0800a918 <__sflush_r>:
 800a918:	898a      	ldrh	r2, [r1, #12]
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	0710      	lsls	r0, r2, #28
 800a922:	460c      	mov	r4, r1
 800a924:	d458      	bmi.n	800a9d8 <__sflush_r+0xc0>
 800a926:	684b      	ldr	r3, [r1, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc05      	bgt.n	800a938 <__sflush_r+0x20>
 800a92c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dc02      	bgt.n	800a938 <__sflush_r+0x20>
 800a932:	2000      	movs	r0, #0
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	d0f9      	beq.n	800a932 <__sflush_r+0x1a>
 800a93e:	2300      	movs	r3, #0
 800a940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a944:	682f      	ldr	r7, [r5, #0]
 800a946:	6a21      	ldr	r1, [r4, #32]
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	d032      	beq.n	800a9b2 <__sflush_r+0x9a>
 800a94c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	075a      	lsls	r2, r3, #29
 800a952:	d505      	bpl.n	800a960 <__sflush_r+0x48>
 800a954:	6863      	ldr	r3, [r4, #4]
 800a956:	1ac0      	subs	r0, r0, r3
 800a958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a95a:	b10b      	cbz	r3, 800a960 <__sflush_r+0x48>
 800a95c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a95e:	1ac0      	subs	r0, r0, r3
 800a960:	2300      	movs	r3, #0
 800a962:	4602      	mov	r2, r0
 800a964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a966:	6a21      	ldr	r1, [r4, #32]
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	d106      	bne.n	800a980 <__sflush_r+0x68>
 800a972:	6829      	ldr	r1, [r5, #0]
 800a974:	291d      	cmp	r1, #29
 800a976:	d82b      	bhi.n	800a9d0 <__sflush_r+0xb8>
 800a978:	4a29      	ldr	r2, [pc, #164]	; (800aa20 <__sflush_r+0x108>)
 800a97a:	410a      	asrs	r2, r1
 800a97c:	07d6      	lsls	r6, r2, #31
 800a97e:	d427      	bmi.n	800a9d0 <__sflush_r+0xb8>
 800a980:	2200      	movs	r2, #0
 800a982:	6062      	str	r2, [r4, #4]
 800a984:	04d9      	lsls	r1, r3, #19
 800a986:	6922      	ldr	r2, [r4, #16]
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	d504      	bpl.n	800a996 <__sflush_r+0x7e>
 800a98c:	1c42      	adds	r2, r0, #1
 800a98e:	d101      	bne.n	800a994 <__sflush_r+0x7c>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b903      	cbnz	r3, 800a996 <__sflush_r+0x7e>
 800a994:	6560      	str	r0, [r4, #84]	; 0x54
 800a996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a998:	602f      	str	r7, [r5, #0]
 800a99a:	2900      	cmp	r1, #0
 800a99c:	d0c9      	beq.n	800a932 <__sflush_r+0x1a>
 800a99e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	d002      	beq.n	800a9ac <__sflush_r+0x94>
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7ff febe 	bl	800a728 <_free_r>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	6360      	str	r0, [r4, #52]	; 0x34
 800a9b0:	e7c0      	b.n	800a934 <__sflush_r+0x1c>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c41      	adds	r1, r0, #1
 800a9ba:	d1c8      	bne.n	800a94e <__sflush_r+0x36>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0c5      	beq.n	800a94e <__sflush_r+0x36>
 800a9c2:	2b1d      	cmp	r3, #29
 800a9c4:	d001      	beq.n	800a9ca <__sflush_r+0xb2>
 800a9c6:	2b16      	cmp	r3, #22
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0xb6>
 800a9ca:	602f      	str	r7, [r5, #0]
 800a9cc:	e7b1      	b.n	800a932 <__sflush_r+0x1a>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7ad      	b.n	800a934 <__sflush_r+0x1c>
 800a9d8:	690f      	ldr	r7, [r1, #16]
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d0a9      	beq.n	800a932 <__sflush_r+0x1a>
 800a9de:	0793      	lsls	r3, r2, #30
 800a9e0:	680e      	ldr	r6, [r1, #0]
 800a9e2:	bf08      	it	eq
 800a9e4:	694b      	ldreq	r3, [r1, #20]
 800a9e6:	600f      	str	r7, [r1, #0]
 800a9e8:	bf18      	it	ne
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	eba6 0807 	sub.w	r8, r6, r7
 800a9f0:	608b      	str	r3, [r1, #8]
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	dd9c      	ble.n	800a932 <__sflush_r+0x1a>
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	463a      	mov	r2, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	2800      	cmp	r0, #0
 800aa06:	dc06      	bgt.n	800aa16 <__sflush_r+0xfe>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa14:	e78e      	b.n	800a934 <__sflush_r+0x1c>
 800aa16:	4407      	add	r7, r0
 800aa18:	eba8 0800 	sub.w	r8, r8, r0
 800aa1c:	e7e9      	b.n	800a9f2 <__sflush_r+0xda>
 800aa1e:	bf00      	nop
 800aa20:	dfbffffe 	.word	0xdfbffffe

0800aa24 <_fflush_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b913      	cbnz	r3, 800aa34 <_fflush_r+0x10>
 800aa2e:	2500      	movs	r5, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	b118      	cbz	r0, 800aa3e <_fflush_r+0x1a>
 800aa36:	6a03      	ldr	r3, [r0, #32]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_fflush_r+0x1a>
 800aa3a:	f7ff fc8f 	bl	800a35c <__sinit>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0f3      	beq.n	800aa2e <_fflush_r+0xa>
 800aa46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa48:	07d0      	lsls	r0, r2, #31
 800aa4a:	d404      	bmi.n	800aa56 <_fflush_r+0x32>
 800aa4c:	0599      	lsls	r1, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_fflush_r+0x32>
 800aa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa52:	f7ff fe66 	bl	800a722 <__retarget_lock_acquire_recursive>
 800aa56:	4628      	mov	r0, r5
 800aa58:	4621      	mov	r1, r4
 800aa5a:	f7ff ff5d 	bl	800a918 <__sflush_r>
 800aa5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa60:	07da      	lsls	r2, r3, #31
 800aa62:	4605      	mov	r5, r0
 800aa64:	d4e4      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	059b      	lsls	r3, r3, #22
 800aa6a:	d4e1      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6e:	f7ff fe59 	bl	800a724 <__retarget_lock_release_recursive>
 800aa72:	e7dd      	b.n	800aa30 <_fflush_r+0xc>

0800aa74 <__swhatbuf_r>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	460c      	mov	r4, r1
 800aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	b096      	sub	sp, #88	; 0x58
 800aa80:	4615      	mov	r5, r2
 800aa82:	461e      	mov	r6, r3
 800aa84:	da0d      	bge.n	800aaa2 <__swhatbuf_r+0x2e>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa8c:	f04f 0100 	mov.w	r1, #0
 800aa90:	bf0c      	ite	eq
 800aa92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa96:	2340      	movne	r3, #64	; 0x40
 800aa98:	2000      	movs	r0, #0
 800aa9a:	6031      	str	r1, [r6, #0]
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	b016      	add	sp, #88	; 0x58
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
 800aaa2:	466a      	mov	r2, sp
 800aaa4:	f000 f848 	bl	800ab38 <_fstat_r>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	dbec      	blt.n	800aa86 <__swhatbuf_r+0x12>
 800aaac:	9901      	ldr	r1, [sp, #4]
 800aaae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aab2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aab6:	4259      	negs	r1, r3
 800aab8:	4159      	adcs	r1, r3
 800aaba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aabe:	e7eb      	b.n	800aa98 <__swhatbuf_r+0x24>

0800aac0 <__smakebuf_r>:
 800aac0:	898b      	ldrh	r3, [r1, #12]
 800aac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aac4:	079d      	lsls	r5, r3, #30
 800aac6:	4606      	mov	r6, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	d507      	bpl.n	800aadc <__smakebuf_r+0x1c>
 800aacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	2301      	movs	r3, #1
 800aad6:	6163      	str	r3, [r4, #20]
 800aad8:	b002      	add	sp, #8
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	ab01      	add	r3, sp, #4
 800aade:	466a      	mov	r2, sp
 800aae0:	f7ff ffc8 	bl	800aa74 <__swhatbuf_r>
 800aae4:	9900      	ldr	r1, [sp, #0]
 800aae6:	4605      	mov	r5, r0
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fe89 	bl	800a800 <_malloc_r>
 800aaee:	b948      	cbnz	r0, 800ab04 <__smakebuf_r+0x44>
 800aaf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf4:	059a      	lsls	r2, r3, #22
 800aaf6:	d4ef      	bmi.n	800aad8 <__smakebuf_r+0x18>
 800aaf8:	f023 0303 	bic.w	r3, r3, #3
 800aafc:	f043 0302 	orr.w	r3, r3, #2
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	e7e3      	b.n	800aacc <__smakebuf_r+0xc>
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	6020      	str	r0, [r4, #0]
 800ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	9b00      	ldr	r3, [sp, #0]
 800ab10:	6163      	str	r3, [r4, #20]
 800ab12:	9b01      	ldr	r3, [sp, #4]
 800ab14:	6120      	str	r0, [r4, #16]
 800ab16:	b15b      	cbz	r3, 800ab30 <__smakebuf_r+0x70>
 800ab18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 f81d 	bl	800ab5c <_isatty_r>
 800ab22:	b128      	cbz	r0, 800ab30 <__smakebuf_r+0x70>
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f023 0303 	bic.w	r3, r3, #3
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	431d      	orrs	r5, r3
 800ab34:	81a5      	strh	r5, [r4, #12]
 800ab36:	e7cf      	b.n	800aad8 <__smakebuf_r+0x18>

0800ab38 <_fstat_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	; (800ab58 <_fstat_r+0x20>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f7fd ff36 	bl	80089b6 <_fstat>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d102      	bne.n	800ab54 <_fstat_r+0x1c>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b103      	cbz	r3, 800ab54 <_fstat_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}
 800ab56:	bf00      	nop
 800ab58:	20000214 	.word	0x20000214

0800ab5c <_isatty_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d06      	ldr	r5, [pc, #24]	; (800ab78 <_isatty_r+0x1c>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	f7fd ff35 	bl	80089d6 <_isatty>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_isatty_r+0x1a>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_isatty_r+0x1a>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20000214 	.word	0x20000214

0800ab7c <_sbrk_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d06      	ldr	r5, [pc, #24]	; (800ab98 <_sbrk_r+0x1c>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	602b      	str	r3, [r5, #0]
 800ab88:	f7fd ff3e 	bl	8008a08 <_sbrk>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_sbrk_r+0x1a>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_sbrk_r+0x1a>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000214 	.word	0x20000214

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
