
Blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800ad10  0800ad10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae98  0800ae98  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae98  0800ae98  0000ae98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aea0  0800aea0  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aea0  0800aea0  0000aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea4  0800aea4  0000aea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800aea8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .comment      000000a7  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001aea5  00000000  00000000  00010147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004dc6  00000000  00000000  0002afec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a70  00000000  00000000  0002fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000009e8  00000000  00000000  00030828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002088a  00000000  00000000  00031210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a153  00000000  00000000  00051a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6554  00000000  00000000  0005bbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000220c  00000000  00000000  00122144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000032a9  00000000  00000000  00124350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <deregister_tm_clones>:
 8008188:	4803      	ldr	r0, [pc, #12]	; (8008198 <deregister_tm_clones+0x10>)
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <deregister_tm_clones+0x14>)
 800818c:	4283      	cmp	r3, r0
 800818e:	d002      	beq.n	8008196 <deregister_tm_clones+0xe>
 8008190:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <deregister_tm_clones+0x18>)
 8008192:	b103      	cbz	r3, 8008196 <deregister_tm_clones+0xe>
 8008194:	4718      	bx	r3
 8008196:	4770      	bx	lr
 8008198:	20000070 	.word	0x20000070
 800819c:	20000070 	.word	0x20000070
 80081a0:	00000000 	.word	0x00000000

080081a4 <register_tm_clones>:
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <register_tm_clones+0x18>)
 80081a6:	4906      	ldr	r1, [pc, #24]	; (80081c0 <register_tm_clones+0x1c>)
 80081a8:	1a0b      	subs	r3, r1, r0
 80081aa:	0fd9      	lsrs	r1, r3, #31
 80081ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80081b0:	1049      	asrs	r1, r1, #1
 80081b2:	d002      	beq.n	80081ba <register_tm_clones+0x16>
 80081b4:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <register_tm_clones+0x20>)
 80081b6:	b103      	cbz	r3, 80081ba <register_tm_clones+0x16>
 80081b8:	4718      	bx	r3
 80081ba:	4770      	bx	lr
 80081bc:	20000070 	.word	0x20000070
 80081c0:	20000070 	.word	0x20000070
 80081c4:	00000000 	.word	0x00000000

080081c8 <__do_global_dtors_aux>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	4c06      	ldr	r4, [pc, #24]	; (80081e4 <__do_global_dtors_aux+0x1c>)
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	b943      	cbnz	r3, 80081e2 <__do_global_dtors_aux+0x1a>
 80081d0:	f7ff ffda 	bl	8008188 <deregister_tm_clones>
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <__do_global_dtors_aux+0x20>)
 80081d6:	b113      	cbz	r3, 80081de <__do_global_dtors_aux+0x16>
 80081d8:	4804      	ldr	r0, [pc, #16]	; (80081ec <__do_global_dtors_aux+0x24>)
 80081da:	f3af 8000 	nop.w
 80081de:	2301      	movs	r3, #1
 80081e0:	7023      	strb	r3, [r4, #0]
 80081e2:	bd10      	pop	{r4, pc}
 80081e4:	20000070 	.word	0x20000070
 80081e8:	00000000 	.word	0x00000000
 80081ec:	0800acf8 	.word	0x0800acf8

080081f0 <frame_dummy>:
 80081f0:	b508      	push	{r3, lr}
 80081f2:	4b04      	ldr	r3, [pc, #16]	; (8008204 <frame_dummy+0x14>)
 80081f4:	b11b      	cbz	r3, 80081fe <frame_dummy+0xe>
 80081f6:	4904      	ldr	r1, [pc, #16]	; (8008208 <frame_dummy+0x18>)
 80081f8:	4804      	ldr	r0, [pc, #16]	; (800820c <frame_dummy+0x1c>)
 80081fa:	f3af 8000 	nop.w
 80081fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008202:	e7cf      	b.n	80081a4 <register_tm_clones>
 8008204:	00000000 	.word	0x00000000
 8008208:	20000074 	.word	0x20000074
 800820c:	0800acf8 	.word	0x0800acf8

08008210 <__errno>:
 8008210:	4b01      	ldr	r3, [pc, #4]	; (8008218 <__errno+0x8>)
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000000 	.word	0x20000000

0800821c <__libc_init_array>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	4e0d      	ldr	r6, [pc, #52]	; (8008254 <__libc_init_array+0x38>)
 8008220:	4d0d      	ldr	r5, [pc, #52]	; (8008258 <__libc_init_array+0x3c>)
 8008222:	1b76      	subs	r6, r6, r5
 8008224:	10b6      	asrs	r6, r6, #2
 8008226:	d006      	beq.n	8008236 <__libc_init_array+0x1a>
 8008228:	2400      	movs	r4, #0
 800822a:	3401      	adds	r4, #1
 800822c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008230:	4798      	blx	r3
 8008232:	42a6      	cmp	r6, r4
 8008234:	d1f9      	bne.n	800822a <__libc_init_array+0xe>
 8008236:	4e09      	ldr	r6, [pc, #36]	; (800825c <__libc_init_array+0x40>)
 8008238:	4d09      	ldr	r5, [pc, #36]	; (8008260 <__libc_init_array+0x44>)
 800823a:	1b76      	subs	r6, r6, r5
 800823c:	f002 fd5c 	bl	800acf8 <_init>
 8008240:	10b6      	asrs	r6, r6, #2
 8008242:	d006      	beq.n	8008252 <__libc_init_array+0x36>
 8008244:	2400      	movs	r4, #0
 8008246:	3401      	adds	r4, #1
 8008248:	f855 3b04 	ldr.w	r3, [r5], #4
 800824c:	4798      	blx	r3
 800824e:	42a6      	cmp	r6, r4
 8008250:	d1f9      	bne.n	8008246 <__libc_init_array+0x2a>
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	0800aea0 	.word	0x0800aea0
 8008258:	0800aea0 	.word	0x0800aea0
 800825c:	0800aea4 	.word	0x0800aea4
 8008260:	0800aea0 	.word	0x0800aea0

08008264 <memset>:
 8008264:	b4f0      	push	{r4, r5, r6, r7}
 8008266:	0786      	lsls	r6, r0, #30
 8008268:	d046      	beq.n	80082f8 <memset+0x94>
 800826a:	1e54      	subs	r4, r2, #1
 800826c:	2a00      	cmp	r2, #0
 800826e:	d03c      	beq.n	80082ea <memset+0x86>
 8008270:	b2ca      	uxtb	r2, r1
 8008272:	4603      	mov	r3, r0
 8008274:	e002      	b.n	800827c <memset+0x18>
 8008276:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800827a:	d336      	bcc.n	80082ea <memset+0x86>
 800827c:	f803 2b01 	strb.w	r2, [r3], #1
 8008280:	079d      	lsls	r5, r3, #30
 8008282:	d1f8      	bne.n	8008276 <memset+0x12>
 8008284:	2c03      	cmp	r4, #3
 8008286:	d929      	bls.n	80082dc <memset+0x78>
 8008288:	b2cd      	uxtb	r5, r1
 800828a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800828e:	2c0f      	cmp	r4, #15
 8008290:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008294:	d933      	bls.n	80082fe <memset+0x9a>
 8008296:	f1a4 0610 	sub.w	r6, r4, #16
 800829a:	0936      	lsrs	r6, r6, #4
 800829c:	f103 0720 	add.w	r7, r3, #32
 80082a0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80082a4:	f103 0210 	add.w	r2, r3, #16
 80082a8:	e942 5504 	strd	r5, r5, [r2, #-16]
 80082ac:	e942 5502 	strd	r5, r5, [r2, #-8]
 80082b0:	3210      	adds	r2, #16
 80082b2:	42ba      	cmp	r2, r7
 80082b4:	d1f8      	bne.n	80082a8 <memset+0x44>
 80082b6:	1c72      	adds	r2, r6, #1
 80082b8:	f014 0f0c 	tst.w	r4, #12
 80082bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80082c0:	f004 060f 	and.w	r6, r4, #15
 80082c4:	d013      	beq.n	80082ee <memset+0x8a>
 80082c6:	1f33      	subs	r3, r6, #4
 80082c8:	f023 0303 	bic.w	r3, r3, #3
 80082cc:	3304      	adds	r3, #4
 80082ce:	4413      	add	r3, r2
 80082d0:	f842 5b04 	str.w	r5, [r2], #4
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d1fb      	bne.n	80082d0 <memset+0x6c>
 80082d8:	f006 0403 	and.w	r4, r6, #3
 80082dc:	b12c      	cbz	r4, 80082ea <memset+0x86>
 80082de:	b2c9      	uxtb	r1, r1
 80082e0:	441c      	add	r4, r3
 80082e2:	f803 1b01 	strb.w	r1, [r3], #1
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d1fb      	bne.n	80082e2 <memset+0x7e>
 80082ea:	bcf0      	pop	{r4, r5, r6, r7}
 80082ec:	4770      	bx	lr
 80082ee:	4634      	mov	r4, r6
 80082f0:	4613      	mov	r3, r2
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d1f3      	bne.n	80082de <memset+0x7a>
 80082f6:	e7f8      	b.n	80082ea <memset+0x86>
 80082f8:	4614      	mov	r4, r2
 80082fa:	4603      	mov	r3, r0
 80082fc:	e7c2      	b.n	8008284 <memset+0x20>
 80082fe:	461a      	mov	r2, r3
 8008300:	4626      	mov	r6, r4
 8008302:	e7e0      	b.n	80082c6 <memset+0x62>

08008304 <_puts_r>:
 8008304:	6983      	ldr	r3, [r0, #24]
 8008306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	4680      	mov	r8, r0
 800830c:	460e      	mov	r6, r1
 800830e:	b333      	cbz	r3, 800835e <_puts_r+0x5a>
 8008310:	6884      	ldr	r4, [r0, #8]
 8008312:	4b2f      	ldr	r3, [pc, #188]	; (80083d0 <_puts_r+0xcc>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d030      	beq.n	800837a <_puts_r+0x76>
 8008318:	4b2e      	ldr	r3, [pc, #184]	; (80083d4 <_puts_r+0xd0>)
 800831a:	429c      	cmp	r4, r3
 800831c:	d039      	beq.n	8008392 <_puts_r+0x8e>
 800831e:	4b2e      	ldr	r3, [pc, #184]	; (80083d8 <_puts_r+0xd4>)
 8008320:	429c      	cmp	r4, r3
 8008322:	bf08      	it	eq
 8008324:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	071b      	lsls	r3, r3, #28
 800832c:	d52a      	bpl.n	8008384 <_puts_r+0x80>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b343      	cbz	r3, 8008384 <_puts_r+0x80>
 8008332:	3e01      	subs	r6, #1
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 800833a:	3b01      	subs	r3, #1
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	b39d      	cbz	r5, 80083a8 <_puts_r+0xa4>
 8008340:	2b00      	cmp	r3, #0
 8008342:	da07      	bge.n	8008354 <_puts_r+0x50>
 8008344:	69a7      	ldr	r7, [r4, #24]
 8008346:	429f      	cmp	r7, r3
 8008348:	4622      	mov	r2, r4
 800834a:	4629      	mov	r1, r5
 800834c:	4640      	mov	r0, r8
 800834e:	dc23      	bgt.n	8008398 <_puts_r+0x94>
 8008350:	2d0a      	cmp	r5, #10
 8008352:	d021      	beq.n	8008398 <_puts_r+0x94>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	701d      	strb	r5, [r3, #0]
 800835c:	e7ea      	b.n	8008334 <_puts_r+0x30>
 800835e:	f000 fae5 	bl	800892c <__sinit>
 8008362:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008366:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1d1      	bne.n	8008312 <_puts_r+0xe>
 800836e:	4640      	mov	r0, r8
 8008370:	f000 fadc 	bl	800892c <__sinit>
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <_puts_r+0xcc>)
 8008376:	429c      	cmp	r4, r3
 8008378:	d1ce      	bne.n	8008318 <_puts_r+0x14>
 800837a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	071b      	lsls	r3, r3, #28
 8008382:	d4d4      	bmi.n	800832e <_puts_r+0x2a>
 8008384:	4621      	mov	r1, r4
 8008386:	4640      	mov	r0, r8
 8008388:	f000 f890 	bl	80084ac <__swsetup_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0d0      	beq.n	8008332 <_puts_r+0x2e>
 8008390:	e006      	b.n	80083a0 <_puts_r+0x9c>
 8008392:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008396:	e7c7      	b.n	8008328 <_puts_r+0x24>
 8008398:	f000 f828 	bl	80083ec <__swbuf_r>
 800839c:	3001      	adds	r0, #1
 800839e:	d1c9      	bne.n	8008334 <_puts_r+0x30>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da09      	bge.n	80083c0 <_puts_r+0xbc>
 80083ac:	4622      	mov	r2, r4
 80083ae:	4640      	mov	r0, r8
 80083b0:	210a      	movs	r1, #10
 80083b2:	f000 f81b 	bl	80083ec <__swbuf_r>
 80083b6:	3001      	adds	r0, #1
 80083b8:	d0f2      	beq.n	80083a0 <_puts_r+0x9c>
 80083ba:	200a      	movs	r0, #10
 80083bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	220a      	movs	r2, #10
 80083c4:	1c59      	adds	r1, r3, #1
 80083c6:	6021      	str	r1, [r4, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	4610      	mov	r0, r2
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d0:	0800ae60 	.word	0x0800ae60
 80083d4:	0800ae40 	.word	0x0800ae40
 80083d8:	0800ae20 	.word	0x0800ae20

080083dc <puts>:
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <puts+0xc>)
 80083de:	4601      	mov	r1, r0
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	f7ff bf8f 	b.w	8008304 <_puts_r>
 80083e6:	bf00      	nop
 80083e8:	20000000 	.word	0x20000000

080083ec <__swbuf_r>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	460d      	mov	r5, r1
 80083f0:	4614      	mov	r4, r2
 80083f2:	4606      	mov	r6, r0
 80083f4:	b108      	cbz	r0, 80083fa <__swbuf_r+0xe>
 80083f6:	6983      	ldr	r3, [r0, #24]
 80083f8:	b343      	cbz	r3, 800844c <__swbuf_r+0x60>
 80083fa:	4b25      	ldr	r3, [pc, #148]	; (8008490 <__swbuf_r+0xa4>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d02a      	beq.n	8008456 <__swbuf_r+0x6a>
 8008400:	4b24      	ldr	r3, [pc, #144]	; (8008494 <__swbuf_r+0xa8>)
 8008402:	429c      	cmp	r4, r3
 8008404:	d029      	beq.n	800845a <__swbuf_r+0x6e>
 8008406:	4b24      	ldr	r3, [pc, #144]	; (8008498 <__swbuf_r+0xac>)
 8008408:	429c      	cmp	r4, r3
 800840a:	bf08      	it	eq
 800840c:	68f4      	ldreq	r4, [r6, #12]
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	69a2      	ldr	r2, [r4, #24]
 8008412:	60a2      	str	r2, [r4, #8]
 8008414:	071a      	lsls	r2, r3, #28
 8008416:	d522      	bpl.n	800845e <__swbuf_r+0x72>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	b303      	cbz	r3, 800845e <__swbuf_r+0x72>
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	6961      	ldr	r1, [r4, #20]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	b2ed      	uxtb	r5, r5
 8008424:	4299      	cmp	r1, r3
 8008426:	462f      	mov	r7, r5
 8008428:	dd29      	ble.n	800847e <__swbuf_r+0x92>
 800842a:	3301      	adds	r3, #1
 800842c:	68a1      	ldr	r1, [r4, #8]
 800842e:	1c50      	adds	r0, r2, #1
 8008430:	3901      	subs	r1, #1
 8008432:	60a1      	str	r1, [r4, #8]
 8008434:	6020      	str	r0, [r4, #0]
 8008436:	7015      	strb	r5, [r2, #0]
 8008438:	6962      	ldr	r2, [r4, #20]
 800843a:	429a      	cmp	r2, r3
 800843c:	d016      	beq.n	800846c <__swbuf_r+0x80>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	07db      	lsls	r3, r3, #31
 8008442:	d501      	bpl.n	8008448 <__swbuf_r+0x5c>
 8008444:	2d0a      	cmp	r5, #10
 8008446:	d011      	beq.n	800846c <__swbuf_r+0x80>
 8008448:	4638      	mov	r0, r7
 800844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844c:	f000 fa6e 	bl	800892c <__sinit>
 8008450:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <__swbuf_r+0xa4>)
 8008452:	429c      	cmp	r4, r3
 8008454:	d1d4      	bne.n	8008400 <__swbuf_r+0x14>
 8008456:	6874      	ldr	r4, [r6, #4]
 8008458:	e7d9      	b.n	800840e <__swbuf_r+0x22>
 800845a:	68b4      	ldr	r4, [r6, #8]
 800845c:	e7d7      	b.n	800840e <__swbuf_r+0x22>
 800845e:	4621      	mov	r1, r4
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f823 	bl	80084ac <__swsetup_r>
 8008466:	b938      	cbnz	r0, 8008478 <__swbuf_r+0x8c>
 8008468:	6923      	ldr	r3, [r4, #16]
 800846a:	e7d7      	b.n	800841c <__swbuf_r+0x30>
 800846c:	4621      	mov	r1, r4
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f932 	bl	80086d8 <_fflush_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0e7      	beq.n	8008448 <__swbuf_r+0x5c>
 8008478:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800847c:	e7e4      	b.n	8008448 <__swbuf_r+0x5c>
 800847e:	4621      	mov	r1, r4
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f929 	bl	80086d8 <_fflush_r>
 8008486:	2800      	cmp	r0, #0
 8008488:	d1f6      	bne.n	8008478 <__swbuf_r+0x8c>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	2301      	movs	r3, #1
 800848e:	e7cd      	b.n	800842c <__swbuf_r+0x40>
 8008490:	0800ae60 	.word	0x0800ae60
 8008494:	0800ae40 	.word	0x0800ae40
 8008498:	0800ae20 	.word	0x0800ae20

0800849c <__swbuf>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <__swbuf+0xc>)
 800849e:	460a      	mov	r2, r1
 80084a0:	4601      	mov	r1, r0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f7ff bfa2 	b.w	80083ec <__swbuf_r>
 80084a8:	20000000 	.word	0x20000000

080084ac <__swsetup_r>:
 80084ac:	4b3b      	ldr	r3, [pc, #236]	; (800859c <__swsetup_r+0xf0>)
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	681d      	ldr	r5, [r3, #0]
 80084b2:	4606      	mov	r6, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	b10d      	cbz	r5, 80084bc <__swsetup_r+0x10>
 80084b8:	69ab      	ldr	r3, [r5, #24]
 80084ba:	b1db      	cbz	r3, 80084f4 <__swsetup_r+0x48>
 80084bc:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <__swsetup_r+0xf4>)
 80084be:	429c      	cmp	r4, r3
 80084c0:	d01e      	beq.n	8008500 <__swsetup_r+0x54>
 80084c2:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <__swsetup_r+0xf8>)
 80084c4:	429c      	cmp	r4, r3
 80084c6:	d04a      	beq.n	800855e <__swsetup_r+0xb2>
 80084c8:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <__swsetup_r+0xfc>)
 80084ca:	429c      	cmp	r4, r3
 80084cc:	bf08      	it	eq
 80084ce:	68ec      	ldreq	r4, [r5, #12]
 80084d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084d4:	b293      	uxth	r3, r2
 80084d6:	0719      	lsls	r1, r3, #28
 80084d8:	d518      	bpl.n	800850c <__swsetup_r+0x60>
 80084da:	6920      	ldr	r0, [r4, #16]
 80084dc:	b308      	cbz	r0, 8008522 <__swsetup_r+0x76>
 80084de:	f013 0201 	ands.w	r2, r3, #1
 80084e2:	d02c      	beq.n	800853e <__swsetup_r+0x92>
 80084e4:	6963      	ldr	r3, [r4, #20]
 80084e6:	2200      	movs	r2, #0
 80084e8:	425b      	negs	r3, r3
 80084ea:	61a3      	str	r3, [r4, #24]
 80084ec:	60a2      	str	r2, [r4, #8]
 80084ee:	b360      	cbz	r0, 800854a <__swsetup_r+0x9e>
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 fa19 	bl	800892c <__sinit>
 80084fa:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <__swsetup_r+0xf4>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d1e0      	bne.n	80084c2 <__swsetup_r+0x16>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008506:	b293      	uxth	r3, r2
 8008508:	0719      	lsls	r1, r3, #28
 800850a:	d4e6      	bmi.n	80084da <__swsetup_r+0x2e>
 800850c:	06dd      	lsls	r5, r3, #27
 800850e:	d53c      	bpl.n	800858a <__swsetup_r+0xde>
 8008510:	0758      	lsls	r0, r3, #29
 8008512:	d426      	bmi.n	8008562 <__swsetup_r+0xb6>
 8008514:	6920      	ldr	r0, [r4, #16]
 8008516:	f042 0308 	orr.w	r3, r2, #8
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	b29b      	uxth	r3, r3
 800851e:	2800      	cmp	r0, #0
 8008520:	d1dd      	bne.n	80084de <__swsetup_r+0x32>
 8008522:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8008526:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800852a:	d0d8      	beq.n	80084de <__swsetup_r+0x32>
 800852c:	4630      	mov	r0, r6
 800852e:	4621      	mov	r1, r4
 8008530:	f000 fa9a 	bl	8008a68 <__smakebuf_r>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	6920      	ldr	r0, [r4, #16]
 8008538:	f013 0201 	ands.w	r2, r3, #1
 800853c:	d1d2      	bne.n	80084e4 <__swsetup_r+0x38>
 800853e:	0799      	lsls	r1, r3, #30
 8008540:	bf58      	it	pl
 8008542:	6962      	ldrpl	r2, [r4, #20]
 8008544:	60a2      	str	r2, [r4, #8]
 8008546:	2800      	cmp	r0, #0
 8008548:	d1d2      	bne.n	80084f0 <__swsetup_r+0x44>
 800854a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854e:	061a      	lsls	r2, r3, #24
 8008550:	d5cf      	bpl.n	80084f2 <__swsetup_r+0x46>
 8008552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7b6      	b.n	80084d0 <__swsetup_r+0x24>
 8008562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008564:	b151      	cbz	r1, 800857c <__swsetup_r+0xd0>
 8008566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856a:	4299      	cmp	r1, r3
 800856c:	d004      	beq.n	8008578 <__swsetup_r+0xcc>
 800856e:	4630      	mov	r0, r6
 8008570:	f000 fac4 	bl	8008afc <_free_r>
 8008574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008578:	2300      	movs	r3, #0
 800857a:	6363      	str	r3, [r4, #52]	; 0x34
 800857c:	2300      	movs	r3, #0
 800857e:	6920      	ldr	r0, [r4, #16]
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8008586:	6020      	str	r0, [r4, #0]
 8008588:	e7c5      	b.n	8008516 <__swsetup_r+0x6a>
 800858a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800858e:	2309      	movs	r3, #9
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008596:	81a2      	strh	r2, [r4, #12]
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	bf00      	nop
 800859c:	20000000 	.word	0x20000000
 80085a0:	0800ae60 	.word	0x0800ae60
 80085a4:	0800ae40 	.word	0x0800ae40
 80085a8:	0800ae20 	.word	0x0800ae20

080085ac <__sflush_r>:
 80085ac:	898b      	ldrh	r3, [r1, #12]
 80085ae:	071a      	lsls	r2, r3, #28
 80085b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b4:	460c      	mov	r4, r1
 80085b6:	4680      	mov	r8, r0
 80085b8:	d441      	bmi.n	800863e <__sflush_r+0x92>
 80085ba:	684a      	ldr	r2, [r1, #4]
 80085bc:	2a00      	cmp	r2, #0
 80085be:	dd59      	ble.n	8008674 <__sflush_r+0xc8>
 80085c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c2:	2e00      	cmp	r6, #0
 80085c4:	d053      	beq.n	800866e <__sflush_r+0xc2>
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8d8 5000 	ldr.w	r5, [r8]
 80085cc:	6a21      	ldr	r1, [r4, #32]
 80085ce:	f8c8 2000 	str.w	r2, [r8]
 80085d2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 80085d6:	d151      	bne.n	800867c <__sflush_r+0xd0>
 80085d8:	2301      	movs	r3, #1
 80085da:	4640      	mov	r0, r8
 80085dc:	47b0      	blx	r6
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d05f      	beq.n	80086a2 <__sflush_r+0xf6>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085e6:	6a21      	ldr	r1, [r4, #32]
 80085e8:	075f      	lsls	r7, r3, #29
 80085ea:	d505      	bpl.n	80085f8 <__sflush_r+0x4c>
 80085ec:	6862      	ldr	r2, [r4, #4]
 80085ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085f0:	1a80      	subs	r0, r0, r2
 80085f2:	b10b      	cbz	r3, 80085f8 <__sflush_r+0x4c>
 80085f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085f6:	1ac0      	subs	r0, r0, r3
 80085f8:	4602      	mov	r2, r0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4640      	mov	r0, r8
 80085fe:	47b0      	blx	r6
 8008600:	1c46      	adds	r6, r0, #1
 8008602:	d145      	bne.n	8008690 <__sflush_r+0xe4>
 8008604:	f8d8 3000 	ldr.w	r3, [r8]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d055      	beq.n	80086bc <__sflush_r+0x110>
 8008610:	2b1d      	cmp	r3, #29
 8008612:	d001      	beq.n	8008618 <__sflush_r+0x6c>
 8008614:	2b16      	cmp	r3, #22
 8008616:	d15a      	bne.n	80086ce <__sflush_r+0x122>
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	2200      	movs	r2, #0
 800861c:	e9c4 3200 	strd	r3, r2, [r4]
 8008620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008622:	f8c8 5000 	str.w	r5, [r8]
 8008626:	b311      	cbz	r1, 800866e <__sflush_r+0xc2>
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d002      	beq.n	8008636 <__sflush_r+0x8a>
 8008630:	4640      	mov	r0, r8
 8008632:	f000 fa63 	bl	8008afc <_free_r>
 8008636:	2000      	movs	r0, #0
 8008638:	6360      	str	r0, [r4, #52]	; 0x34
 800863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863e:	690e      	ldr	r6, [r1, #16]
 8008640:	b1ae      	cbz	r6, 800866e <__sflush_r+0xc2>
 8008642:	680d      	ldr	r5, [r1, #0]
 8008644:	600e      	str	r6, [r1, #0]
 8008646:	0799      	lsls	r1, r3, #30
 8008648:	bf0c      	ite	eq
 800864a:	6963      	ldreq	r3, [r4, #20]
 800864c:	2300      	movne	r3, #0
 800864e:	1bad      	subs	r5, r5, r6
 8008650:	60a3      	str	r3, [r4, #8]
 8008652:	e00a      	b.n	800866a <__sflush_r+0xbe>
 8008654:	462b      	mov	r3, r5
 8008656:	4632      	mov	r2, r6
 8008658:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800865a:	6a21      	ldr	r1, [r4, #32]
 800865c:	4640      	mov	r0, r8
 800865e:	47b8      	blx	r7
 8008660:	2800      	cmp	r0, #0
 8008662:	eba5 0500 	sub.w	r5, r5, r0
 8008666:	4406      	add	r6, r0
 8008668:	dd0a      	ble.n	8008680 <__sflush_r+0xd4>
 800866a:	2d00      	cmp	r5, #0
 800866c:	dcf2      	bgt.n	8008654 <__sflush_r+0xa8>
 800866e:	2000      	movs	r0, #0
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008676:	2a00      	cmp	r2, #0
 8008678:	dca2      	bgt.n	80085c0 <__sflush_r+0x14>
 800867a:	e7f8      	b.n	800866e <__sflush_r+0xc2>
 800867c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800867e:	e7b3      	b.n	80085e8 <__sflush_r+0x3c>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	6922      	ldr	r2, [r4, #16]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	6062      	str	r2, [r4, #4]
 800869a:	04da      	lsls	r2, r3, #19
 800869c:	d5c0      	bpl.n	8008620 <__sflush_r+0x74>
 800869e:	6560      	str	r0, [r4, #84]	; 0x54
 80086a0:	e7be      	b.n	8008620 <__sflush_r+0x74>
 80086a2:	f8d8 3000 	ldr.w	r3, [r8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d09b      	beq.n	80085e2 <__sflush_r+0x36>
 80086aa:	2b1d      	cmp	r3, #29
 80086ac:	d00c      	beq.n	80086c8 <__sflush_r+0x11c>
 80086ae:	2b16      	cmp	r3, #22
 80086b0:	d00a      	beq.n	80086c8 <__sflush_r+0x11c>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b8:	81a3      	strh	r3, [r4, #12]
 80086ba:	e7d9      	b.n	8008670 <__sflush_r+0xc4>
 80086bc:	6921      	ldr	r1, [r4, #16]
 80086be:	e9c4 1300 	strd	r1, r3, [r4]
 80086c2:	04d3      	lsls	r3, r2, #19
 80086c4:	d5ac      	bpl.n	8008620 <__sflush_r+0x74>
 80086c6:	e7ea      	b.n	800869e <__sflush_r+0xf2>
 80086c8:	f8c8 5000 	str.w	r5, [r8]
 80086cc:	e7cf      	b.n	800866e <__sflush_r+0xc2>
 80086ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086d2:	81a2      	strh	r2, [r4, #12]
 80086d4:	e7cc      	b.n	8008670 <__sflush_r+0xc4>
 80086d6:	bf00      	nop

080086d8 <_fflush_r>:
 80086d8:	690b      	ldr	r3, [r1, #16]
 80086da:	b323      	cbz	r3, 8008726 <_fflush_r+0x4e>
 80086dc:	b510      	push	{r4, lr}
 80086de:	4604      	mov	r4, r0
 80086e0:	b082      	sub	sp, #8
 80086e2:	b108      	cbz	r0, 80086e8 <_fflush_r+0x10>
 80086e4:	6983      	ldr	r3, [r0, #24]
 80086e6:	b1bb      	cbz	r3, 8008718 <_fflush_r+0x40>
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <_fflush_r+0x54>)
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d012      	beq.n	8008714 <_fflush_r+0x3c>
 80086ee:	4b10      	ldr	r3, [pc, #64]	; (8008730 <_fflush_r+0x58>)
 80086f0:	4299      	cmp	r1, r3
 80086f2:	d016      	beq.n	8008722 <_fflush_r+0x4a>
 80086f4:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <_fflush_r+0x5c>)
 80086f6:	4299      	cmp	r1, r3
 80086f8:	bf08      	it	eq
 80086fa:	68e1      	ldreq	r1, [r4, #12]
 80086fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008700:	b12b      	cbz	r3, 800870e <_fflush_r+0x36>
 8008702:	4620      	mov	r0, r4
 8008704:	b002      	add	sp, #8
 8008706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800870a:	f7ff bf4f 	b.w	80085ac <__sflush_r>
 800870e:	2000      	movs	r0, #0
 8008710:	b002      	add	sp, #8
 8008712:	bd10      	pop	{r4, pc}
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	e7f1      	b.n	80086fc <_fflush_r+0x24>
 8008718:	9101      	str	r1, [sp, #4]
 800871a:	f000 f907 	bl	800892c <__sinit>
 800871e:	9901      	ldr	r1, [sp, #4]
 8008720:	e7e2      	b.n	80086e8 <_fflush_r+0x10>
 8008722:	68a1      	ldr	r1, [r4, #8]
 8008724:	e7ea      	b.n	80086fc <_fflush_r+0x24>
 8008726:	2000      	movs	r0, #0
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	0800ae60 	.word	0x0800ae60
 8008730:	0800ae40 	.word	0x0800ae40
 8008734:	0800ae20 	.word	0x0800ae20

08008738 <fflush>:
 8008738:	b120      	cbz	r0, 8008744 <fflush+0xc>
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <fflush+0x18>)
 800873c:	4601      	mov	r1, r0
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	f7ff bfca 	b.w	80086d8 <_fflush_r>
 8008744:	4b03      	ldr	r3, [pc, #12]	; (8008754 <fflush+0x1c>)
 8008746:	4904      	ldr	r1, [pc, #16]	; (8008758 <fflush+0x20>)
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	f000 b935 	b.w	80089b8 <_fwalk_reent>
 800874e:	bf00      	nop
 8008750:	20000000 	.word	0x20000000
 8008754:	0800ae1c 	.word	0x0800ae1c
 8008758:	080086d9 	.word	0x080086d9

0800875c <__fp_lock>:
 800875c:	2000      	movs	r0, #0
 800875e:	4770      	bx	lr

08008760 <_cleanup_r>:
 8008760:	4901      	ldr	r1, [pc, #4]	; (8008768 <_cleanup_r+0x8>)
 8008762:	f000 b929 	b.w	80089b8 <_fwalk_reent>
 8008766:	bf00      	nop
 8008768:	080086d9 	.word	0x080086d9

0800876c <__fp_unlock>:
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr

08008770 <__sfmoreglue>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	1e4a      	subs	r2, r1, #1
 8008774:	2568      	movs	r5, #104	; 0x68
 8008776:	fb05 f502 	mul.w	r5, r5, r2
 800877a:	460e      	mov	r6, r1
 800877c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008780:	f000 fa12 	bl	8008ba8 <_malloc_r>
 8008784:	4604      	mov	r4, r0
 8008786:	b140      	cbz	r0, 800879a <__sfmoreglue+0x2a>
 8008788:	2100      	movs	r1, #0
 800878a:	300c      	adds	r0, #12
 800878c:	6066      	str	r6, [r4, #4]
 800878e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008792:	6021      	str	r1, [r4, #0]
 8008794:	60a0      	str	r0, [r4, #8]
 8008796:	f7ff fd65 	bl	8008264 <memset>
 800879a:	4620      	mov	r0, r4
 800879c:	bd70      	pop	{r4, r5, r6, pc}
 800879e:	bf00      	nop

080087a0 <__sfp>:
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <__sfp+0x7c>)
 80087a2:	b570      	push	{r4, r5, r6, lr}
 80087a4:	681d      	ldr	r5, [r3, #0]
 80087a6:	69ab      	ldr	r3, [r5, #24]
 80087a8:	4606      	mov	r6, r0
 80087aa:	b343      	cbz	r3, 80087fe <__sfp+0x5e>
 80087ac:	3548      	adds	r5, #72	; 0x48
 80087ae:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	d505      	bpl.n	80087c2 <__sfp+0x22>
 80087b6:	e01e      	b.n	80087f6 <__sfp+0x56>
 80087b8:	3b01      	subs	r3, #1
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80087c0:	d019      	beq.n	80087f6 <__sfp+0x56>
 80087c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	d1f6      	bne.n	80087b8 <__sfp+0x18>
 80087ca:	2500      	movs	r5, #0
 80087cc:	4b14      	ldr	r3, [pc, #80]	; (8008820 <__sfp+0x80>)
 80087ce:	6665      	str	r5, [r4, #100]	; 0x64
 80087d0:	e9c4 5500 	strd	r5, r5, [r4]
 80087d4:	60a5      	str	r5, [r4, #8]
 80087d6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087da:	61a5      	str	r5, [r4, #24]
 80087dc:	4629      	mov	r1, r5
 80087de:	60e3      	str	r3, [r4, #12]
 80087e0:	2208      	movs	r2, #8
 80087e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087e6:	f7ff fd3d 	bl	8008264 <memset>
 80087ea:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087ee:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087f2:	4620      	mov	r0, r4
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	682c      	ldr	r4, [r5, #0]
 80087f8:	b12c      	cbz	r4, 8008806 <__sfp+0x66>
 80087fa:	4625      	mov	r5, r4
 80087fc:	e7d7      	b.n	80087ae <__sfp+0xe>
 80087fe:	4628      	mov	r0, r5
 8008800:	f000 f810 	bl	8008824 <__sinit.part.0>
 8008804:	e7d2      	b.n	80087ac <__sfp+0xc>
 8008806:	2104      	movs	r1, #4
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff ffb1 	bl	8008770 <__sfmoreglue>
 800880e:	4604      	mov	r4, r0
 8008810:	6028      	str	r0, [r5, #0]
 8008812:	2800      	cmp	r0, #0
 8008814:	d1f1      	bne.n	80087fa <__sfp+0x5a>
 8008816:	230c      	movs	r3, #12
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	e7ea      	b.n	80087f2 <__sfp+0x52>
 800881c:	0800ae1c 	.word	0x0800ae1c
 8008820:	ffff0001 	.word	0xffff0001

08008824 <__sinit.part.0>:
 8008824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	4b33      	ldr	r3, [pc, #204]	; (80088f8 <__sinit.part.0+0xd4>)
 800882a:	4934      	ldr	r1, [pc, #208]	; (80088fc <__sinit.part.0+0xd8>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	6281      	str	r1, [r0, #40]	; 0x28
 8008830:	4290      	cmp	r0, r2
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800883a:	6503      	str	r3, [r0, #80]	; 0x50
 800883c:	bf04      	itt	eq
 800883e:	2301      	moveq	r3, #1
 8008840:	6183      	streq	r3, [r0, #24]
 8008842:	4605      	mov	r5, r0
 8008844:	f7ff ffac 	bl	80087a0 <__sfp>
 8008848:	6068      	str	r0, [r5, #4]
 800884a:	4628      	mov	r0, r5
 800884c:	f7ff ffa8 	bl	80087a0 <__sfp>
 8008850:	60a8      	str	r0, [r5, #8]
 8008852:	4628      	mov	r0, r5
 8008854:	f7ff ffa4 	bl	80087a0 <__sfp>
 8008858:	686e      	ldr	r6, [r5, #4]
 800885a:	60e8      	str	r0, [r5, #12]
 800885c:	2400      	movs	r4, #0
 800885e:	2304      	movs	r3, #4
 8008860:	60f3      	str	r3, [r6, #12]
 8008862:	6674      	str	r4, [r6, #100]	; 0x64
 8008864:	e9c6 4400 	strd	r4, r4, [r6]
 8008868:	60b4      	str	r4, [r6, #8]
 800886a:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800886e:	61b4      	str	r4, [r6, #24]
 8008870:	4621      	mov	r1, r4
 8008872:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008876:	2208      	movs	r2, #8
 8008878:	f7ff fcf4 	bl	8008264 <memset>
 800887c:	f8df b088 	ldr.w	fp, [pc, #136]	; 8008908 <__sinit.part.0+0xe4>
 8008880:	68af      	ldr	r7, [r5, #8]
 8008882:	f8df a088 	ldr.w	sl, [pc, #136]	; 800890c <__sinit.part.0+0xe8>
 8008886:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008910 <__sinit.part.0+0xec>
 800888a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008914 <__sinit.part.0+0xf0>
 800888e:	4b1c      	ldr	r3, [pc, #112]	; (8008900 <__sinit.part.0+0xdc>)
 8008890:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8008894:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8008898:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 800889c:	4621      	mov	r1, r4
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	2208      	movs	r2, #8
 80088a2:	667c      	str	r4, [r7, #100]	; 0x64
 80088a4:	e9c7 4400 	strd	r4, r4, [r7]
 80088a8:	60bc      	str	r4, [r7, #8]
 80088aa:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80088ae:	61bc      	str	r4, [r7, #24]
 80088b0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80088b4:	f7ff fcd6 	bl	8008264 <memset>
 80088b8:	68ee      	ldr	r6, [r5, #12]
 80088ba:	4b12      	ldr	r3, [pc, #72]	; (8008904 <__sinit.part.0+0xe0>)
 80088bc:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80088c0:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 80088c4:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
 80088c8:	4621      	mov	r1, r4
 80088ca:	60f3      	str	r3, [r6, #12]
 80088cc:	6674      	str	r4, [r6, #100]	; 0x64
 80088ce:	e9c6 4400 	strd	r4, r4, [r6]
 80088d2:	60b4      	str	r4, [r6, #8]
 80088d4:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80088d8:	61b4      	str	r4, [r6, #24]
 80088da:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80088de:	2208      	movs	r2, #8
 80088e0:	f7ff fcc0 	bl	8008264 <memset>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80088ea:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80088ee:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80088f2:	61ab      	str	r3, [r5, #24]
 80088f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	0800ae1c 	.word	0x0800ae1c
 80088fc:	08008761 	.word	0x08008761
 8008900:	00010009 	.word	0x00010009
 8008904:	00020012 	.word	0x00020012
 8008908:	08008c95 	.word	0x08008c95
 800890c:	08008cbd 	.word	0x08008cbd
 8008910:	08008cfd 	.word	0x08008cfd
 8008914:	08008d1d 	.word	0x08008d1d

08008918 <_cleanup>:
 8008918:	4b02      	ldr	r3, [pc, #8]	; (8008924 <_cleanup+0xc>)
 800891a:	4903      	ldr	r1, [pc, #12]	; (8008928 <_cleanup+0x10>)
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f000 b84b 	b.w	80089b8 <_fwalk_reent>
 8008922:	bf00      	nop
 8008924:	0800ae1c 	.word	0x0800ae1c
 8008928:	080086d9 	.word	0x080086d9

0800892c <__sinit>:
 800892c:	6983      	ldr	r3, [r0, #24]
 800892e:	b903      	cbnz	r3, 8008932 <__sinit+0x6>
 8008930:	e778      	b.n	8008824 <__sinit.part.0>
 8008932:	4770      	bx	lr

08008934 <__sfp_lock_acquire>:
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__sfp_lock_release>:
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop

0800893c <__sinit_lock_acquire>:
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop

08008940 <__sinit_lock_release>:
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <__fp_lock_all>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <__fp_lock_all+0xc>)
 8008946:	4903      	ldr	r1, [pc, #12]	; (8008954 <__fp_lock_all+0x10>)
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 b80f 	b.w	800896c <_fwalk>
 800894e:	bf00      	nop
 8008950:	20000000 	.word	0x20000000
 8008954:	0800875d 	.word	0x0800875d

08008958 <__fp_unlock_all>:
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <__fp_unlock_all+0xc>)
 800895a:	4903      	ldr	r1, [pc, #12]	; (8008968 <__fp_unlock_all+0x10>)
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f000 b805 	b.w	800896c <_fwalk>
 8008962:	bf00      	nop
 8008964:	20000000 	.word	0x20000000
 8008968:	0800876d 	.word	0x0800876d

0800896c <_fwalk>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 8008974:	d01b      	beq.n	80089ae <_fwalk+0x42>
 8008976:	4688      	mov	r8, r1
 8008978:	2600      	movs	r6, #0
 800897a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800897e:	3d01      	subs	r5, #1
 8008980:	d40f      	bmi.n	80089a2 <_fwalk+0x36>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800898a:	d906      	bls.n	800899a <_fwalk+0x2e>
 800898c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008990:	3301      	adds	r3, #1
 8008992:	4620      	mov	r0, r4
 8008994:	d001      	beq.n	800899a <_fwalk+0x2e>
 8008996:	47c0      	blx	r8
 8008998:	4306      	orrs	r6, r0
 800899a:	1c6b      	adds	r3, r5, #1
 800899c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80089a0:	d1ef      	bne.n	8008982 <_fwalk+0x16>
 80089a2:	683f      	ldr	r7, [r7, #0]
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	d1e8      	bne.n	800897a <_fwalk+0xe>
 80089a8:	4630      	mov	r0, r6
 80089aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ae:	463e      	mov	r6, r7
 80089b0:	4630      	mov	r0, r6
 80089b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b6:	bf00      	nop

080089b8 <_fwalk_reent>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	f110 0748 	adds.w	r7, r0, #72	; 0x48
 80089c0:	d01f      	beq.n	8008a02 <_fwalk_reent+0x4a>
 80089c2:	4688      	mov	r8, r1
 80089c4:	4606      	mov	r6, r0
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 80089ce:	3d01      	subs	r5, #1
 80089d0:	d411      	bmi.n	80089f6 <_fwalk_reent+0x3e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80089da:	d908      	bls.n	80089ee <_fwalk_reent+0x36>
 80089dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80089e0:	3301      	adds	r3, #1
 80089e2:	4621      	mov	r1, r4
 80089e4:	4630      	mov	r0, r6
 80089e6:	d002      	beq.n	80089ee <_fwalk_reent+0x36>
 80089e8:	47c0      	blx	r8
 80089ea:	ea49 0900 	orr.w	r9, r9, r0
 80089ee:	1c6b      	adds	r3, r5, #1
 80089f0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80089f4:	d1ed      	bne.n	80089d2 <_fwalk_reent+0x1a>
 80089f6:	683f      	ldr	r7, [r7, #0]
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	d1e6      	bne.n	80089ca <_fwalk_reent+0x12>
 80089fc:	4648      	mov	r0, r9
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	46b9      	mov	r9, r7
 8008a04:	4648      	mov	r0, r9
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	bf00      	nop

08008a0c <__swhatbuf_r>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a14:	2900      	cmp	r1, #0
 8008a16:	b096      	sub	sp, #88	; 0x58
 8008a18:	4616      	mov	r6, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	db13      	blt.n	8008a46 <__swhatbuf_r+0x3a>
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f000 f9a8 	bl	8008d74 <_fstat_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	db0e      	blt.n	8008a46 <__swhatbuf_r+0x3a>
 8008a28:	9a01      	ldr	r2, [sp, #4]
 8008a2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a2e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008a32:	fab2 f282 	clz	r2, r2
 8008a36:	0952      	lsrs	r2, r2, #5
 8008a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	602a      	str	r2, [r5, #0]
 8008a40:	6033      	str	r3, [r6, #0]
 8008a42:	b016      	add	sp, #88	; 0x58
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	d504      	bpl.n	8008a5a <__swhatbuf_r+0x4e>
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	2000      	movs	r0, #0
 8008a54:	6033      	str	r3, [r6, #0]
 8008a56:	b016      	add	sp, #88	; 0x58
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	2000      	movs	r0, #0
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	b016      	add	sp, #88	; 0x58
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	bf00      	nop

08008a68 <__smakebuf_r>:
 8008a68:	898a      	ldrh	r2, [r1, #12]
 8008a6a:	0792      	lsls	r2, r2, #30
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	d506      	bpl.n	8008a7e <__smakebuf_r+0x16>
 8008a70:	f101 0247 	add.w	r2, r1, #71	; 0x47
 8008a74:	2101      	movs	r1, #1
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	e9c3 2104 	strd	r2, r1, [r3, #16]
 8008a7c:	4770      	bx	lr
 8008a7e:	b570      	push	{r4, r5, r6, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	ab01      	add	r3, sp, #4
 8008a84:	466a      	mov	r2, sp
 8008a86:	460c      	mov	r4, r1
 8008a88:	4606      	mov	r6, r0
 8008a8a:	f7ff ffbf 	bl	8008a0c <__swhatbuf_r>
 8008a8e:	9900      	ldr	r1, [sp, #0]
 8008a90:	4605      	mov	r5, r0
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 f888 	bl	8008ba8 <_malloc_r>
 8008a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9c:	b170      	cbz	r0, 8008abc <__smakebuf_r+0x54>
 8008a9e:	4916      	ldr	r1, [pc, #88]	; (8008af8 <__smakebuf_r+0x90>)
 8008aa0:	62b1      	str	r1, [r6, #40]	; 0x28
 8008aa2:	9a01      	ldr	r2, [sp, #4]
 8008aa4:	9900      	ldr	r1, [sp, #0]
 8008aa6:	6020      	str	r0, [r4, #0]
 8008aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8008ab2:	b98a      	cbnz	r2, 8008ad8 <__smakebuf_r+0x70>
 8008ab4:	432b      	orrs	r3, r5
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	b002      	add	sp, #8
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d4fb      	bmi.n	8008ab8 <__smakebuf_r+0x50>
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	2101      	movs	r1, #1
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8008ad6:	e7ef      	b.n	8008ab8 <__smakebuf_r+0x50>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ade:	f000 f95d 	bl	8008d9c <_isatty_r>
 8008ae2:	b910      	cbnz	r0, 8008aea <__smakebuf_r+0x82>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	e7e4      	b.n	8008ab4 <__smakebuf_r+0x4c>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	e7dd      	b.n	8008ab4 <__smakebuf_r+0x4c>
 8008af8:	08008761 	.word	0x08008761

08008afc <_free_r>:
 8008afc:	2900      	cmp	r1, #0
 8008afe:	d03c      	beq.n	8008b7a <_free_r+0x7e>
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b06:	1f0c      	subs	r4, r1, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bfb8      	it	lt
 8008b0c:	18e4      	addlt	r4, r4, r3
 8008b0e:	4605      	mov	r5, r0
 8008b10:	f000 f96c 	bl	8008dec <__malloc_lock>
 8008b14:	4b23      	ldr	r3, [pc, #140]	; (8008ba4 <_free_r+0xa8>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	b12a      	cbz	r2, 8008b26 <_free_r+0x2a>
 8008b1a:	42a2      	cmp	r2, r4
 8008b1c:	d90d      	bls.n	8008b3a <_free_r+0x3e>
 8008b1e:	6821      	ldr	r1, [r4, #0]
 8008b20:	1860      	adds	r0, r4, r1
 8008b22:	4282      	cmp	r2, r0
 8008b24:	d023      	beq.n	8008b6e <_free_r+0x72>
 8008b26:	6062      	str	r2, [r4, #4]
 8008b28:	4628      	mov	r0, r5
 8008b2a:	601c      	str	r4, [r3, #0]
 8008b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b30:	f000 b95e 	b.w	8008df0 <__malloc_unlock>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d803      	bhi.n	8008b40 <_free_r+0x44>
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6853      	ldr	r3, [r2, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f9      	bne.n	8008b34 <_free_r+0x38>
 8008b40:	6811      	ldr	r1, [r2, #0]
 8008b42:	1850      	adds	r0, r2, r1
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d019      	beq.n	8008b7c <_free_r+0x80>
 8008b48:	d824      	bhi.n	8008b94 <_free_r+0x98>
 8008b4a:	6821      	ldr	r1, [r4, #0]
 8008b4c:	1860      	adds	r0, r4, r1
 8008b4e:	4283      	cmp	r3, r0
 8008b50:	d006      	beq.n	8008b60 <_free_r+0x64>
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	6054      	str	r4, [r2, #4]
 8008b56:	4628      	mov	r0, r5
 8008b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5c:	f000 b948 	b.w	8008df0 <__malloc_unlock>
 8008b60:	e9d3 0300 	ldrd	r0, r3, [r3]
 8008b64:	4401      	add	r1, r0
 8008b66:	6063      	str	r3, [r4, #4]
 8008b68:	6021      	str	r1, [r4, #0]
 8008b6a:	6054      	str	r4, [r2, #4]
 8008b6c:	e7f3      	b.n	8008b56 <_free_r+0x5a>
 8008b6e:	e9d2 0200 	ldrd	r0, r2, [r2]
 8008b72:	4401      	add	r1, r0
 8008b74:	6062      	str	r2, [r4, #4]
 8008b76:	6021      	str	r1, [r4, #0]
 8008b78:	e7d6      	b.n	8008b28 <_free_r+0x2c>
 8008b7a:	4770      	bx	lr
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	4401      	add	r1, r0
 8008b80:	1850      	adds	r0, r2, r1
 8008b82:	4283      	cmp	r3, r0
 8008b84:	6011      	str	r1, [r2, #0]
 8008b86:	d1e6      	bne.n	8008b56 <_free_r+0x5a>
 8008b88:	e9d3 0300 	ldrd	r0, r3, [r3]
 8008b8c:	4401      	add	r1, r0
 8008b8e:	6053      	str	r3, [r2, #4]
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	e7e0      	b.n	8008b56 <_free_r+0x5a>
 8008b94:	230c      	movs	r3, #12
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b9e:	f000 b927 	b.w	8008df0 <__malloc_unlock>
 8008ba2:	bf00      	nop
 8008ba4:	2000008c 	.word	0x2000008c

08008ba8 <_malloc_r>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	1ccd      	adds	r5, r1, #3
 8008bac:	f025 0503 	bic.w	r5, r5, #3
 8008bb0:	3508      	adds	r5, #8
 8008bb2:	2d0c      	cmp	r5, #12
 8008bb4:	bf38      	it	cc
 8008bb6:	250c      	movcc	r5, #12
 8008bb8:	2d00      	cmp	r5, #0
 8008bba:	4606      	mov	r6, r0
 8008bbc:	db33      	blt.n	8008c26 <_malloc_r+0x7e>
 8008bbe:	42a9      	cmp	r1, r5
 8008bc0:	d831      	bhi.n	8008c26 <_malloc_r+0x7e>
 8008bc2:	4f2a      	ldr	r7, [pc, #168]	; (8008c6c <_malloc_r+0xc4>)
 8008bc4:	f000 f912 	bl	8008dec <__malloc_lock>
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	b152      	cbz	r2, 8008be2 <_malloc_r+0x3a>
 8008bcc:	6813      	ldr	r3, [r2, #0]
 8008bce:	1b5b      	subs	r3, r3, r5
 8008bd0:	d404      	bmi.n	8008bdc <_malloc_r+0x34>
 8008bd2:	e03f      	b.n	8008c54 <_malloc_r+0xac>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	1b5b      	subs	r3, r3, r5
 8008bd8:	d529      	bpl.n	8008c2e <_malloc_r+0x86>
 8008bda:	4622      	mov	r2, r4
 8008bdc:	6854      	ldr	r4, [r2, #4]
 8008bde:	2c00      	cmp	r4, #0
 8008be0:	d1f8      	bne.n	8008bd4 <_malloc_r+0x2c>
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d03b      	beq.n	8008c60 <_malloc_r+0xb8>
 8008be8:	4629      	mov	r1, r5
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 f840 	bl	8008c70 <_sbrk_r>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d028      	beq.n	8008c46 <_malloc_r+0x9e>
 8008bf4:	1cc4      	adds	r4, r0, #3
 8008bf6:	f024 0403 	bic.w	r4, r4, #3
 8008bfa:	42a0      	cmp	r0, r4
 8008bfc:	d005      	beq.n	8008c0a <_malloc_r+0x62>
 8008bfe:	1a21      	subs	r1, r4, r0
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f835 	bl	8008c70 <_sbrk_r>
 8008c06:	3001      	adds	r0, #1
 8008c08:	d01d      	beq.n	8008c46 <_malloc_r+0x9e>
 8008c0a:	6025      	str	r5, [r4, #0]
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f8ef 	bl	8008df0 <__malloc_unlock>
 8008c12:	f104 000b 	add.w	r0, r4, #11
 8008c16:	f020 0007 	bic.w	r0, r0, #7
 8008c1a:	1d23      	adds	r3, r4, #4
 8008c1c:	1ac2      	subs	r2, r0, r3
 8008c1e:	d001      	beq.n	8008c24 <_malloc_r+0x7c>
 8008c20:	1a1b      	subs	r3, r3, r0
 8008c22:	50a3      	str	r3, [r4, r2]
 8008c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c26:	220c      	movs	r2, #12
 8008c28:	6032      	str	r2, [r6, #0]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c2e:	2b0b      	cmp	r3, #11
 8008c30:	d805      	bhi.n	8008c3e <_malloc_r+0x96>
 8008c32:	42a2      	cmp	r2, r4
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	d011      	beq.n	8008c5c <_malloc_r+0xb4>
 8008c38:	6053      	str	r3, [r2, #4]
 8008c3a:	e7e7      	b.n	8008c0c <_malloc_r+0x64>
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	441c      	add	r4, r3
 8008c42:	6025      	str	r5, [r4, #0]
 8008c44:	e7e2      	b.n	8008c0c <_malloc_r+0x64>
 8008c46:	230c      	movs	r3, #12
 8008c48:	4630      	mov	r0, r6
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f000 f8d0 	bl	8008df0 <__malloc_unlock>
 8008c50:	2000      	movs	r0, #0
 8008c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c54:	2b0b      	cmp	r3, #11
 8008c56:	d8f1      	bhi.n	8008c3c <_malloc_r+0x94>
 8008c58:	6853      	ldr	r3, [r2, #4]
 8008c5a:	4614      	mov	r4, r2
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	e7d5      	b.n	8008c0c <_malloc_r+0x64>
 8008c60:	4630      	mov	r0, r6
 8008c62:	f000 f805 	bl	8008c70 <_sbrk_r>
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	e7be      	b.n	8008be8 <_malloc_r+0x40>
 8008c6a:	bf00      	nop
 8008c6c:	2000008c 	.word	0x2000008c

08008c70 <_sbrk_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4c07      	ldr	r4, [pc, #28]	; (8008c90 <_sbrk_r+0x20>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4605      	mov	r5, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	f000 fcee 	bl	800965c <_sbrk>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d000      	beq.n	8008c86 <_sbrk_r+0x16>
 8008c84:	bd38      	pop	{r3, r4, r5, pc}
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0fb      	beq.n	8008c84 <_sbrk_r+0x14>
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	200000e8 	.word	0x200000e8

08008c94 <__sread>:
 8008c94:	b510      	push	{r4, lr}
 8008c96:	460c      	mov	r4, r1
 8008c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9c:	f000 f8aa 	bl	8008df4 <_read_r>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	db03      	blt.n	8008cac <__sread+0x18>
 8008ca4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008ca6:	4403      	add	r3, r0
 8008ca8:	6563      	str	r3, [r4, #84]	; 0x54
 8008caa:	bd10      	pop	{r4, pc}
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	bf00      	nop

08008cb8 <__seofread>:
 8008cb8:	2000      	movs	r0, #0
 8008cba:	4770      	bx	lr

08008cbc <__swrite>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	05d3      	lsls	r3, r2, #23
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4605      	mov	r5, r0
 8008cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd2:	d409      	bmi.n	8008ce8 <__swrite+0x2c>
 8008cd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cd8:	81a2      	strh	r2, [r4, #12]
 8008cda:	463b      	mov	r3, r7
 8008cdc:	4632      	mov	r2, r6
 8008cde:	4628      	mov	r0, r5
 8008ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce4:	f000 b81e 	b.w	8008d24 <_write_r>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2302      	movs	r3, #2
 8008cec:	f000 f868 	bl	8008dc0 <_lseek_r>
 8008cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf8:	e7ec      	b.n	8008cd4 <__swrite+0x18>
 8008cfa:	bf00      	nop

08008cfc <__sseek>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	460c      	mov	r4, r1
 8008d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d04:	f000 f85c 	bl	8008dc0 <_lseek_r>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	1c42      	adds	r2, r0, #1
 8008d0c:	bf0e      	itee	eq
 8008d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d16:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	bd10      	pop	{r4, pc}

08008d1c <__sclose>:
 8008d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d20:	f000 b816 	b.w	8008d50 <_close_r>

08008d24 <_write_r>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	460d      	mov	r5, r1
 8008d28:	4c08      	ldr	r4, [pc, #32]	; (8008d4c <_write_r+0x28>)
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4628      	mov	r0, r5
 8008d32:	2300      	movs	r3, #0
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	f000 fc40 	bl	80095ba <_write>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d000      	beq.n	8008d40 <_write_r+0x1c>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0fb      	beq.n	8008d3e <_write_r+0x1a>
 8008d46:	6033      	str	r3, [r6, #0]
 8008d48:	bd70      	pop	{r4, r5, r6, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200000e8 	.word	0x200000e8

08008d50 <_close_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4c07      	ldr	r4, [pc, #28]	; (8008d70 <_close_r+0x20>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4605      	mov	r5, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	f000 fc49 	bl	80095f2 <_close>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d000      	beq.n	8008d66 <_close_r+0x16>
 8008d64:	bd38      	pop	{r3, r4, r5, pc}
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0fb      	beq.n	8008d64 <_close_r+0x14>
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200000e8 	.word	0x200000e8

08008d74 <_fstat_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	460b      	mov	r3, r1
 8008d78:	4c07      	ldr	r4, [pc, #28]	; (8008d98 <_fstat_r+0x24>)
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	2300      	movs	r3, #0
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	f000 fc41 	bl	800960a <_fstat>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d000      	beq.n	8008d8e <_fstat_r+0x1a>
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0fb      	beq.n	8008d8c <_fstat_r+0x18>
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	200000e8 	.word	0x200000e8

08008d9c <_isatty_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4c07      	ldr	r4, [pc, #28]	; (8008dbc <_isatty_r+0x20>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4605      	mov	r5, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	f000 fc3f 	bl	800962a <_isatty>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d000      	beq.n	8008db2 <_isatty_r+0x16>
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0fb      	beq.n	8008db0 <_isatty_r+0x14>
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	200000e8 	.word	0x200000e8

08008dc0 <_lseek_r>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	4c08      	ldr	r4, [pc, #32]	; (8008de8 <_lseek_r+0x28>)
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4606      	mov	r6, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4628      	mov	r0, r5
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	f000 fc35 	bl	8009640 <_lseek>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d000      	beq.n	8008ddc <_lseek_r+0x1c>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0fb      	beq.n	8008dda <_lseek_r+0x1a>
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	bf00      	nop
 8008de8:	200000e8 	.word	0x200000e8

08008dec <__malloc_lock>:
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop

08008df0 <__malloc_unlock>:
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop

08008df4 <_read_r>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	460d      	mov	r5, r1
 8008df8:	4c08      	ldr	r4, [pc, #32]	; (8008e1c <_read_r+0x28>)
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4628      	mov	r0, r5
 8008e02:	2300      	movs	r3, #0
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	f000 fbbb 	bl	8009580 <_read>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d000      	beq.n	8008e10 <_read_r+0x1c>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0fb      	beq.n	8008e0e <_read_r+0x1a>
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200000e8 	.word	0x200000e8

08008e20 <__aeabi_uldivmod>:
 8008e20:	b953      	cbnz	r3, 8008e38 <__aeabi_uldivmod+0x18>
 8008e22:	b94a      	cbnz	r2, 8008e38 <__aeabi_uldivmod+0x18>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	bf08      	it	eq
 8008e28:	2800      	cmpeq	r0, #0
 8008e2a:	bf1c      	itt	ne
 8008e2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008e30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008e34:	f000 b96e 	b.w	8009114 <__aeabi_idiv0>
 8008e38:	f1ad 0c08 	sub.w	ip, sp, #8
 8008e3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008e40:	f000 f806 	bl	8008e50 <__udivmoddi4>
 8008e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e4c:	b004      	add	sp, #16
 8008e4e:	4770      	bx	lr

08008e50 <__udivmoddi4>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	9d08      	ldr	r5, [sp, #32]
 8008e56:	4604      	mov	r4, r0
 8008e58:	468c      	mov	ip, r1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 8083 	bne.w	8008f66 <__udivmoddi4+0x116>
 8008e60:	428a      	cmp	r2, r1
 8008e62:	4617      	mov	r7, r2
 8008e64:	d947      	bls.n	8008ef6 <__udivmoddi4+0xa6>
 8008e66:	fab2 f282 	clz	r2, r2
 8008e6a:	b142      	cbz	r2, 8008e7e <__udivmoddi4+0x2e>
 8008e6c:	f1c2 0020 	rsb	r0, r2, #32
 8008e70:	fa24 f000 	lsr.w	r0, r4, r0
 8008e74:	4091      	lsls	r1, r2
 8008e76:	4097      	lsls	r7, r2
 8008e78:	ea40 0c01 	orr.w	ip, r0, r1
 8008e7c:	4094      	lsls	r4, r2
 8008e7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008e82:	0c23      	lsrs	r3, r4, #16
 8008e84:	fbbc f6f8 	udiv	r6, ip, r8
 8008e88:	fa1f fe87 	uxth.w	lr, r7
 8008e8c:	fb08 c116 	mls	r1, r8, r6, ip
 8008e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008e94:	fb06 f10e 	mul.w	r1, r6, lr
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d909      	bls.n	8008eb0 <__udivmoddi4+0x60>
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008ea2:	f080 8119 	bcs.w	80090d8 <__udivmoddi4+0x288>
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	f240 8116 	bls.w	80090d8 <__udivmoddi4+0x288>
 8008eac:	3e02      	subs	r6, #2
 8008eae:	443b      	add	r3, r7
 8008eb0:	1a5b      	subs	r3, r3, r1
 8008eb2:	b2a4      	uxth	r4, r4
 8008eb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8008eb8:	fb08 3310 	mls	r3, r8, r0, r3
 8008ebc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8008ec4:	45a6      	cmp	lr, r4
 8008ec6:	d909      	bls.n	8008edc <__udivmoddi4+0x8c>
 8008ec8:	193c      	adds	r4, r7, r4
 8008eca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ece:	f080 8105 	bcs.w	80090dc <__udivmoddi4+0x28c>
 8008ed2:	45a6      	cmp	lr, r4
 8008ed4:	f240 8102 	bls.w	80090dc <__udivmoddi4+0x28c>
 8008ed8:	3802      	subs	r0, #2
 8008eda:	443c      	add	r4, r7
 8008edc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008ee0:	eba4 040e 	sub.w	r4, r4, lr
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	b11d      	cbz	r5, 8008ef0 <__udivmoddi4+0xa0>
 8008ee8:	40d4      	lsrs	r4, r2
 8008eea:	2300      	movs	r3, #0
 8008eec:	e9c5 4300 	strd	r4, r3, [r5]
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	b902      	cbnz	r2, 8008efa <__udivmoddi4+0xaa>
 8008ef8:	deff      	udf	#255	; 0xff
 8008efa:	fab2 f282 	clz	r2, r2
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d150      	bne.n	8008fa4 <__udivmoddi4+0x154>
 8008f02:	1bcb      	subs	r3, r1, r7
 8008f04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f08:	fa1f f887 	uxth.w	r8, r7
 8008f0c:	2601      	movs	r6, #1
 8008f0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8008f12:	0c21      	lsrs	r1, r4, #16
 8008f14:	fb0e 331c 	mls	r3, lr, ip, r3
 8008f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f1c:	fb08 f30c 	mul.w	r3, r8, ip
 8008f20:	428b      	cmp	r3, r1
 8008f22:	d907      	bls.n	8008f34 <__udivmoddi4+0xe4>
 8008f24:	1879      	adds	r1, r7, r1
 8008f26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008f2a:	d202      	bcs.n	8008f32 <__udivmoddi4+0xe2>
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	f200 80e9 	bhi.w	8009104 <__udivmoddi4+0x2b4>
 8008f32:	4684      	mov	ip, r0
 8008f34:	1ac9      	subs	r1, r1, r3
 8008f36:	b2a3      	uxth	r3, r4
 8008f38:	fbb1 f0fe 	udiv	r0, r1, lr
 8008f3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8008f40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8008f44:	fb08 f800 	mul.w	r8, r8, r0
 8008f48:	45a0      	cmp	r8, r4
 8008f4a:	d907      	bls.n	8008f5c <__udivmoddi4+0x10c>
 8008f4c:	193c      	adds	r4, r7, r4
 8008f4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f52:	d202      	bcs.n	8008f5a <__udivmoddi4+0x10a>
 8008f54:	45a0      	cmp	r8, r4
 8008f56:	f200 80d9 	bhi.w	800910c <__udivmoddi4+0x2bc>
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	eba4 0408 	sub.w	r4, r4, r8
 8008f60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008f64:	e7bf      	b.n	8008ee6 <__udivmoddi4+0x96>
 8008f66:	428b      	cmp	r3, r1
 8008f68:	d909      	bls.n	8008f7e <__udivmoddi4+0x12e>
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	f000 80b1 	beq.w	80090d2 <__udivmoddi4+0x282>
 8008f70:	2600      	movs	r6, #0
 8008f72:	e9c5 0100 	strd	r0, r1, [r5]
 8008f76:	4630      	mov	r0, r6
 8008f78:	4631      	mov	r1, r6
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	fab3 f683 	clz	r6, r3
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d14a      	bne.n	800901c <__udivmoddi4+0x1cc>
 8008f86:	428b      	cmp	r3, r1
 8008f88:	d302      	bcc.n	8008f90 <__udivmoddi4+0x140>
 8008f8a:	4282      	cmp	r2, r0
 8008f8c:	f200 80b8 	bhi.w	8009100 <__udivmoddi4+0x2b0>
 8008f90:	1a84      	subs	r4, r0, r2
 8008f92:	eb61 0103 	sbc.w	r1, r1, r3
 8008f96:	2001      	movs	r0, #1
 8008f98:	468c      	mov	ip, r1
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	d0a8      	beq.n	8008ef0 <__udivmoddi4+0xa0>
 8008f9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8008fa2:	e7a5      	b.n	8008ef0 <__udivmoddi4+0xa0>
 8008fa4:	f1c2 0320 	rsb	r3, r2, #32
 8008fa8:	fa20 f603 	lsr.w	r6, r0, r3
 8008fac:	4097      	lsls	r7, r2
 8008fae:	fa01 f002 	lsl.w	r0, r1, r2
 8008fb2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008fb6:	40d9      	lsrs	r1, r3
 8008fb8:	4330      	orrs	r0, r6
 8008fba:	0c03      	lsrs	r3, r0, #16
 8008fbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8008fc0:	fa1f f887 	uxth.w	r8, r7
 8008fc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8008fc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008fcc:	fb06 f108 	mul.w	r1, r6, r8
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	fa04 f402 	lsl.w	r4, r4, r2
 8008fd6:	d909      	bls.n	8008fec <__udivmoddi4+0x19c>
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008fde:	f080 808d 	bcs.w	80090fc <__udivmoddi4+0x2ac>
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	f240 808a 	bls.w	80090fc <__udivmoddi4+0x2ac>
 8008fe8:	3e02      	subs	r6, #2
 8008fea:	443b      	add	r3, r7
 8008fec:	1a5b      	subs	r3, r3, r1
 8008fee:	b281      	uxth	r1, r0
 8008ff0:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ff4:	fb0e 3310 	mls	r3, lr, r0, r3
 8008ff8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ffc:	fb00 f308 	mul.w	r3, r0, r8
 8009000:	428b      	cmp	r3, r1
 8009002:	d907      	bls.n	8009014 <__udivmoddi4+0x1c4>
 8009004:	1879      	adds	r1, r7, r1
 8009006:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800900a:	d273      	bcs.n	80090f4 <__udivmoddi4+0x2a4>
 800900c:	428b      	cmp	r3, r1
 800900e:	d971      	bls.n	80090f4 <__udivmoddi4+0x2a4>
 8009010:	3802      	subs	r0, #2
 8009012:	4439      	add	r1, r7
 8009014:	1acb      	subs	r3, r1, r3
 8009016:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800901a:	e778      	b.n	8008f0e <__udivmoddi4+0xbe>
 800901c:	f1c6 0c20 	rsb	ip, r6, #32
 8009020:	fa03 f406 	lsl.w	r4, r3, r6
 8009024:	fa22 f30c 	lsr.w	r3, r2, ip
 8009028:	431c      	orrs	r4, r3
 800902a:	fa20 f70c 	lsr.w	r7, r0, ip
 800902e:	fa01 f306 	lsl.w	r3, r1, r6
 8009032:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8009036:	fa21 f10c 	lsr.w	r1, r1, ip
 800903a:	431f      	orrs	r7, r3
 800903c:	0c3b      	lsrs	r3, r7, #16
 800903e:	fbb1 f9fe 	udiv	r9, r1, lr
 8009042:	fa1f f884 	uxth.w	r8, r4
 8009046:	fb0e 1119 	mls	r1, lr, r9, r1
 800904a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800904e:	fb09 fa08 	mul.w	sl, r9, r8
 8009052:	458a      	cmp	sl, r1
 8009054:	fa02 f206 	lsl.w	r2, r2, r6
 8009058:	fa00 f306 	lsl.w	r3, r0, r6
 800905c:	d908      	bls.n	8009070 <__udivmoddi4+0x220>
 800905e:	1861      	adds	r1, r4, r1
 8009060:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8009064:	d248      	bcs.n	80090f8 <__udivmoddi4+0x2a8>
 8009066:	458a      	cmp	sl, r1
 8009068:	d946      	bls.n	80090f8 <__udivmoddi4+0x2a8>
 800906a:	f1a9 0902 	sub.w	r9, r9, #2
 800906e:	4421      	add	r1, r4
 8009070:	eba1 010a 	sub.w	r1, r1, sl
 8009074:	b2bf      	uxth	r7, r7
 8009076:	fbb1 f0fe 	udiv	r0, r1, lr
 800907a:	fb0e 1110 	mls	r1, lr, r0, r1
 800907e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009082:	fb00 f808 	mul.w	r8, r0, r8
 8009086:	45b8      	cmp	r8, r7
 8009088:	d907      	bls.n	800909a <__udivmoddi4+0x24a>
 800908a:	19e7      	adds	r7, r4, r7
 800908c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8009090:	d22e      	bcs.n	80090f0 <__udivmoddi4+0x2a0>
 8009092:	45b8      	cmp	r8, r7
 8009094:	d92c      	bls.n	80090f0 <__udivmoddi4+0x2a0>
 8009096:	3802      	subs	r0, #2
 8009098:	4427      	add	r7, r4
 800909a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800909e:	eba7 0708 	sub.w	r7, r7, r8
 80090a2:	fba0 8902 	umull	r8, r9, r0, r2
 80090a6:	454f      	cmp	r7, r9
 80090a8:	46c6      	mov	lr, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	d31a      	bcc.n	80090e4 <__udivmoddi4+0x294>
 80090ae:	d017      	beq.n	80090e0 <__udivmoddi4+0x290>
 80090b0:	b15d      	cbz	r5, 80090ca <__udivmoddi4+0x27a>
 80090b2:	ebb3 020e 	subs.w	r2, r3, lr
 80090b6:	eb67 0701 	sbc.w	r7, r7, r1
 80090ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80090be:	40f2      	lsrs	r2, r6
 80090c0:	ea4c 0202 	orr.w	r2, ip, r2
 80090c4:	40f7      	lsrs	r7, r6
 80090c6:	e9c5 2700 	strd	r2, r7, [r5]
 80090ca:	2600      	movs	r6, #0
 80090cc:	4631      	mov	r1, r6
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	462e      	mov	r6, r5
 80090d4:	4628      	mov	r0, r5
 80090d6:	e70b      	b.n	8008ef0 <__udivmoddi4+0xa0>
 80090d8:	4606      	mov	r6, r0
 80090da:	e6e9      	b.n	8008eb0 <__udivmoddi4+0x60>
 80090dc:	4618      	mov	r0, r3
 80090de:	e6fd      	b.n	8008edc <__udivmoddi4+0x8c>
 80090e0:	4543      	cmp	r3, r8
 80090e2:	d2e5      	bcs.n	80090b0 <__udivmoddi4+0x260>
 80090e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80090e8:	eb69 0104 	sbc.w	r1, r9, r4
 80090ec:	3801      	subs	r0, #1
 80090ee:	e7df      	b.n	80090b0 <__udivmoddi4+0x260>
 80090f0:	4608      	mov	r0, r1
 80090f2:	e7d2      	b.n	800909a <__udivmoddi4+0x24a>
 80090f4:	4660      	mov	r0, ip
 80090f6:	e78d      	b.n	8009014 <__udivmoddi4+0x1c4>
 80090f8:	4681      	mov	r9, r0
 80090fa:	e7b9      	b.n	8009070 <__udivmoddi4+0x220>
 80090fc:	4666      	mov	r6, ip
 80090fe:	e775      	b.n	8008fec <__udivmoddi4+0x19c>
 8009100:	4630      	mov	r0, r6
 8009102:	e74a      	b.n	8008f9a <__udivmoddi4+0x14a>
 8009104:	f1ac 0c02 	sub.w	ip, ip, #2
 8009108:	4439      	add	r1, r7
 800910a:	e713      	b.n	8008f34 <__udivmoddi4+0xe4>
 800910c:	3802      	subs	r0, #2
 800910e:	443c      	add	r4, r7
 8009110:	e724      	b.n	8008f5c <__udivmoddi4+0x10c>
 8009112:	bf00      	nop

08009114 <__aeabi_idiv0>:
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop

08009118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800911e:	f000 fb0f 	bl	8009740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009122:	f000 f85b 	bl	80091dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009126:	f000 f8ed 	bl	8009304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800912a:	f000 f8c1 	bl	80092b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialisation du WiFi
  WiFi_Status_t esp_init(const char *ssid, const char *password);

      //wifi_status= esp_init (WIFI_SSID, WIFI_PASSWORD);
      if (wifi_status == WiFi_OK) {
 800912e:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <main+0x94>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d126      	bne.n	8009184 <main+0x6c>
          printf("WiFi connecté avec succès.\n");
 8009136:	481e      	ldr	r0, [pc, #120]	; (80091b0 <main+0x98>)
 8009138:	f7ff f950 	bl	80083dc <puts>

          // Connexion au broker MQTT
          MQTT_Status_t MQTT_Connect(const char *broker_address, const char *client_id);

          //mqtt_status = MQTT_Connect(MQTT_BROKER_ADDRESS, MQTT_CLIENT_ID);
          if (mqtt_status == MQTT_OK) {
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <main+0x9c>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d11b      	bne.n	800917c <main+0x64>
              printf("Connexion MQTT réussie.\n");
 8009144:	481c      	ldr	r0, [pc, #112]	; (80091b8 <main+0xa0>)
 8009146:	f7ff f949 	bl	80083dc <puts>

              // Publication d'un message
              const char *message = "Hello MQTT!";
 800914a:	4b1c      	ldr	r3, [pc, #112]	; (80091bc <main+0xa4>)
 800914c:	607b      	str	r3, [r7, #4]
              MQTT_Status_t MQTT_Subscribe(const char *topic);

              //mqtt_status = MQTT_Publish(MQTT_TOPIC, message);
              if (mqtt_status == MQTT_OK) {
 800914e:	4b19      	ldr	r3, [pc, #100]	; (80091b4 <main+0x9c>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10e      	bne.n	8009174 <main+0x5c>
                  printf("Message publié avec succès.\n");
 8009156:	481a      	ldr	r0, [pc, #104]	; (80091c0 <main+0xa8>)
 8009158:	f7ff f940 	bl	80083dc <puts>

                  // Déconnexion du broker MQTT
                  MQTT_Status_t MQTT_Disconnect(void);

                 //mqtt_status = MQTT_Disconnect();
                  if (mqtt_status == MQTT_OK) {
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <main+0x9c>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <main+0x54>
                      printf("Déconnexion MQTT réussie.\n");
 8009164:	4817      	ldr	r0, [pc, #92]	; (80091c4 <main+0xac>)
 8009166:	f7ff f939 	bl	80083dc <puts>
 800916a:	e00e      	b.n	800918a <main+0x72>
                  } else {
                      printf("Échec de la déconnexion MQTT.\n");
 800916c:	4816      	ldr	r0, [pc, #88]	; (80091c8 <main+0xb0>)
 800916e:	f7ff f935 	bl	80083dc <puts>
 8009172:	e00a      	b.n	800918a <main+0x72>
                  }
              } else {
                  printf("Échec de la publication du message MQTT.\n");
 8009174:	4815      	ldr	r0, [pc, #84]	; (80091cc <main+0xb4>)
 8009176:	f7ff f931 	bl	80083dc <puts>
 800917a:	e006      	b.n	800918a <main+0x72>
              }
          } else {
              printf("Échec de la connexion MQTT.\n");
 800917c:	4814      	ldr	r0, [pc, #80]	; (80091d0 <main+0xb8>)
 800917e:	f7ff f92d 	bl	80083dc <puts>
 8009182:	e002      	b.n	800918a <main+0x72>
          }
      } else {
          printf("Erreur de connexion WiFi.\n");
 8009184:	4813      	ldr	r0, [pc, #76]	; (80091d4 <main+0xbc>)
 8009186:	f7ff f929 	bl	80083dc <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800918a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800918e:	4812      	ldr	r0, [pc, #72]	; (80091d8 <main+0xc0>)
 8009190:	f000 fe3d 	bl	8009e0e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8009194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009198:	f000 fb7a 	bl	8009890 <HAL_Delay>

    // Ajoutez une condition pour sauter à l'application 2 ici
    // par exemple, après un certain délai ou un événement spécifique
    HAL_Delay(5000); // délai de 10 secondes
 800919c:	f241 3088 	movw	r0, #5000	; 0x1388
 80091a0:	f000 fb76 	bl	8009890 <HAL_Delay>
    JumpToApplication2();
 80091a4:	f000 f92e 	bl	8009404 <JumpToApplication2>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80091a8:	e7ef      	b.n	800918a <main+0x72>
 80091aa:	bf00      	nop
 80091ac:	20000098 	.word	0x20000098
 80091b0:	0800ad10 	.word	0x0800ad10
 80091b4:	20000099 	.word	0x20000099
 80091b8:	0800ad30 	.word	0x0800ad30
 80091bc:	0800ad4c 	.word	0x0800ad4c
 80091c0:	0800ad58 	.word	0x0800ad58
 80091c4:	0800ad78 	.word	0x0800ad78
 80091c8:	0800ad94 	.word	0x0800ad94
 80091cc:	0800adb4 	.word	0x0800adb4
 80091d0:	0800ade0 	.word	0x0800ade0
 80091d4:	0800ae00 	.word	0x0800ae00
 80091d8:	40020c00 	.word	0x40020c00

080091dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b094      	sub	sp, #80	; 0x50
 80091e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091e2:	f107 0320 	add.w	r3, r7, #32
 80091e6:	2230      	movs	r2, #48	; 0x30
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff f83a 	bl	8008264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	609a      	str	r2, [r3, #8]
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009200:	2300      	movs	r3, #0
 8009202:	60bb      	str	r3, [r7, #8]
 8009204:	4b28      	ldr	r3, [pc, #160]	; (80092a8 <SystemClock_Config+0xcc>)
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <SystemClock_Config+0xcc>)
 800920a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920e:	6413      	str	r3, [r2, #64]	; 0x40
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <SystemClock_Config+0xcc>)
 8009212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800921c:	2300      	movs	r3, #0
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	4b22      	ldr	r3, [pc, #136]	; (80092ac <SystemClock_Config+0xd0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a21      	ldr	r2, [pc, #132]	; (80092ac <SystemClock_Config+0xd0>)
 8009226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <SystemClock_Config+0xd0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009238:	2301      	movs	r3, #1
 800923a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800923c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009242:	2302      	movs	r3, #2
 8009244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800924c:	2308      	movs	r3, #8
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8009254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009256:	2302      	movs	r3, #2
 8009258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800925a:	2307      	movs	r3, #7
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800925e:	f107 0320 	add.w	r3, r7, #32
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fdee 	bl	8009e44 <HAL_RCC_OscConfig>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800926e:	f000 f8e7 	bl	8009440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009272:	230f      	movs	r3, #15
 8009274:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009276:	2302      	movs	r3, #2
 8009278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800927e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800928a:	f107 030c 	add.w	r3, r7, #12
 800928e:	2105      	movs	r1, #5
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f84f 	bl	800a334 <HAL_RCC_ClockConfig>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800929c:	f000 f8d0 	bl	8009440 <Error_Handler>
  }
}
 80092a0:	bf00      	nop
 80092a2:	3750      	adds	r7, #80	; 0x50
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40023800 	.word	0x40023800
 80092ac:	40007000 	.word	0x40007000

080092b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092b6:	4a12      	ldr	r2, [pc, #72]	; (8009300 <MX_USART2_UART_Init+0x50>)
 80092b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80092c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80092ce:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092d6:	220c      	movs	r2, #12
 80092d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092da:	4b08      	ldr	r3, [pc, #32]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092dc:	2200      	movs	r2, #0
 80092de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80092e6:	4805      	ldr	r0, [pc, #20]	; (80092fc <MX_USART2_UART_Init+0x4c>)
 80092e8:	f001 faee 	bl	800a8c8 <HAL_UART_Init>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80092f2:	f000 f8a5 	bl	8009440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80092f6:	bf00      	nop
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	2000009c 	.word	0x2000009c
 8009300:	40004400 	.word	0x40004400

08009304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800930a:	f107 030c 	add.w	r3, r7, #12
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	609a      	str	r2, [r3, #8]
 8009316:	60da      	str	r2, [r3, #12]
 8009318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	4a1f      	ldr	r2, [pc, #124]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009328:	6313      	str	r3, [r2, #48]	; 0x30
 800932a:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <MX_GPIO_Init+0x9c>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	60bb      	str	r3, [r7, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009336:	2300      	movs	r3, #0
 8009338:	607b      	str	r3, [r7, #4]
 800933a:	4b19      	ldr	r3, [pc, #100]	; (80093a0 <MX_GPIO_Init+0x9c>)
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009340:	f043 0301 	orr.w	r3, r3, #1
 8009344:	6313      	str	r3, [r2, #48]	; 0x30
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009352:	2300      	movs	r3, #0
 8009354:	603b      	str	r3, [r7, #0]
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <MX_GPIO_Init+0x9c>)
 800935c:	f043 0308 	orr.w	r3, r3, #8
 8009360:	6313      	str	r3, [r2, #48]	; 0x30
 8009362:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <MX_GPIO_Init+0x9c>)
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800936e:	2200      	movs	r2, #0
 8009370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009374:	480b      	ldr	r0, [pc, #44]	; (80093a4 <MX_GPIO_Init+0xa0>)
 8009376:	f000 fd31 	bl	8009ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800937a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800937e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009380:	2301      	movs	r3, #1
 8009382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009388:	2300      	movs	r3, #0
 800938a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4619      	mov	r1, r3
 8009392:	4804      	ldr	r0, [pc, #16]	; (80093a4 <MX_GPIO_Init+0xa0>)
 8009394:	f000 fb86 	bl	8009aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009398:	bf00      	nop
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40023800 	.word	0x40023800
 80093a4:	40020c00 	.word	0x40020c00

080093a8 <deinitEverything>:

/* USER CODE BEGIN 4 */

void deinitEverything()
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_DISABLE();
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <deinitEverything+0x54>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	4a12      	ldr	r2, [pc, #72]	; (80093fc <deinitEverything+0x54>)
 80093b2:	f023 0304 	bic.w	r3, r3, #4
 80093b6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_DISABLE();
 80093b8:	4b10      	ldr	r3, [pc, #64]	; (80093fc <deinitEverything+0x54>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	4a0f      	ldr	r2, [pc, #60]	; (80093fc <deinitEverything+0x54>)
 80093be:	f023 0308 	bic.w	r3, r3, #8
 80093c2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <deinitEverything+0x54>)
 80093c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c8:	4a0c      	ldr	r2, [pc, #48]	; (80093fc <deinitEverything+0x54>)
 80093ca:	f023 0302 	bic.w	r3, r3, #2
 80093ce:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_DISABLE();
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <deinitEverything+0x54>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <deinitEverything+0x54>)
 80093d6:	f023 0301 	bic.w	r3, r3, #1
 80093da:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_RCC_DeInit();
 80093dc:	f001 f9a6 	bl	800a72c <HAL_RCC_DeInit>
    HAL_DeInit();
 80093e0:	f000 f9d0 	bl	8009784 <HAL_DeInit>
    SysTick->CTRL = 0;
 80093e4:	4b06      	ldr	r3, [pc, #24]	; (8009400 <deinitEverything+0x58>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 80093ea:	4b05      	ldr	r3, [pc, #20]	; (8009400 <deinitEverything+0x58>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80093f0:	4b03      	ldr	r3, [pc, #12]	; (8009400 <deinitEverything+0x58>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	609a      	str	r2, [r3, #8]
}
 80093f6:	bf00      	nop
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40023800 	.word	0x40023800
 8009400:	e000e010 	.word	0xe000e010

08009404 <JumpToApplication2>:

void JumpToApplication2(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
    uint32_t appAddress2 = 0x08084000;  // Adresse de démarrage de l'application 2 en Flash
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <JumpToApplication2+0x38>)
 800940c:	60fb      	str	r3, [r7, #12]
    typedef void (*pFunction)(void);
    pFunction JumpToApp2;
    uint32_t JumpAddress2 = *(__IO uint32_t*)(appAddress2 + 4);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3304      	adds	r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60bb      	str	r3, [r7, #8]
    JumpToApp2 = (pFunction)JumpAddress2;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800941a:	b672      	cpsid	i
}
 800941c:	bf00      	nop

    // Désactivation des interruptions
    __disable_irq();

    // Réinitialisation des périphériques
    deinitEverything();
 800941e:	f7ff ffc3 	bl	80093a8 <deinitEverything>

    // Réinitialisation du pointeur de pile
    __set_MSP(*(__IO uint32_t*)appAddress2);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f383 8808 	msr	MSP, r3
}
 800942e:	bf00      	nop

    // Saut vers l'application 2
    JumpToApp2();
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4798      	blx	r3
}
 8009434:	bf00      	nop
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	08084000 	.word	0x08084000

08009440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009444:	b672      	cpsid	i
}
 8009446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009448:	e7fe      	b.n	8009448 <Error_Handler+0x8>
	...

0800944c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009452:	2300      	movs	r3, #0
 8009454:	607b      	str	r3, [r7, #4]
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <HAL_MspInit+0x4c>)
 8009458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945a:	4a0f      	ldr	r2, [pc, #60]	; (8009498 <HAL_MspInit+0x4c>)
 800945c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009460:	6453      	str	r3, [r2, #68]	; 0x44
 8009462:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <HAL_MspInit+0x4c>)
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800946a:	607b      	str	r3, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800946e:	2300      	movs	r3, #0
 8009470:	603b      	str	r3, [r7, #0]
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <HAL_MspInit+0x4c>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	4a08      	ldr	r2, [pc, #32]	; (8009498 <HAL_MspInit+0x4c>)
 8009478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947c:	6413      	str	r3, [r2, #64]	; 0x40
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <HAL_MspInit+0x4c>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800948a:	2007      	movs	r0, #7
 800948c:	f000 fad6 	bl	8009a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40023800 	.word	0x40023800

0800949c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094a4:	f107 0314 	add.w	r3, r7, #20
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a19      	ldr	r2, [pc, #100]	; (8009520 <HAL_UART_MspInit+0x84>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d12b      	bne.n	8009516 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	4b18      	ldr	r3, [pc, #96]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	4a17      	ldr	r2, [pc, #92]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094cc:	6413      	str	r3, [r2, #64]	; 0x40
 80094ce:	4b15      	ldr	r3, [pc, #84]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	4b11      	ldr	r3, [pc, #68]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	4a10      	ldr	r2, [pc, #64]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	6313      	str	r3, [r2, #48]	; 0x30
 80094ea:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <HAL_UART_MspInit+0x88>)
 80094ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80094f6:	230c      	movs	r3, #12
 80094f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fa:	2302      	movs	r3, #2
 80094fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009502:	2303      	movs	r3, #3
 8009504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009506:	2307      	movs	r3, #7
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800950a:	f107 0314 	add.w	r3, r7, #20
 800950e:	4619      	mov	r1, r3
 8009510:	4805      	ldr	r0, [pc, #20]	; (8009528 <HAL_UART_MspInit+0x8c>)
 8009512:	f000 fac7 	bl	8009aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009516:	bf00      	nop
 8009518:	3728      	adds	r7, #40	; 0x28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40004400 	.word	0x40004400
 8009524:	40023800 	.word	0x40023800
 8009528:	40020000 	.word	0x40020000

0800952c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009530:	e7fe      	b.n	8009530 <NMI_Handler+0x4>

08009532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009532:	b480      	push	{r7}
 8009534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009536:	e7fe      	b.n	8009536 <HardFault_Handler+0x4>

08009538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800953c:	e7fe      	b.n	800953c <MemManage_Handler+0x4>

0800953e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800953e:	b480      	push	{r7}
 8009540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009542:	e7fe      	b.n	8009542 <BusFault_Handler+0x4>

08009544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009548:	e7fe      	b.n	8009548 <UsageFault_Handler+0x4>

0800954a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800954a:	b480      	push	{r7}
 800954c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800954e:	bf00      	nop
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800955c:	bf00      	nop
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009566:	b480      	push	{r7}
 8009568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800956a:	bf00      	nop
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009578:	f000 f96a 	bl	8009850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800957c:	bf00      	nop
 800957e:	bd80      	pop	{r7, pc}

08009580 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e00a      	b.n	80095a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009592:	f3af 8000 	nop.w
 8009596:	4601      	mov	r1, r0
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	60ba      	str	r2, [r7, #8]
 800959e:	b2ca      	uxtb	r2, r1
 80095a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3301      	adds	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	dbf0      	blt.n	8009592 <_read+0x12>
  }

  return len;
 80095b0:	687b      	ldr	r3, [r7, #4]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e009      	b.n	80095e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	60ba      	str	r2, [r7, #8]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	3301      	adds	r3, #1
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	dbf1      	blt.n	80095cc <_write+0x12>
  }
  return len;
 80095e8:	687b      	ldr	r3, [r7, #4]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <_close>:

int _close(int file)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800961a:	605a      	str	r2, [r3, #4]
  return 0;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <_isatty>:

int _isatty(int file)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009632:	2301      	movs	r3, #1
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009664:	4a14      	ldr	r2, [pc, #80]	; (80096b8 <_sbrk+0x5c>)
 8009666:	4b15      	ldr	r3, [pc, #84]	; (80096bc <_sbrk+0x60>)
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009670:	4b13      	ldr	r3, [pc, #76]	; (80096c0 <_sbrk+0x64>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <_sbrk+0x64>)
 800967a:	4a12      	ldr	r2, [pc, #72]	; (80096c4 <_sbrk+0x68>)
 800967c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <_sbrk+0x64>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4413      	add	r3, r2
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	429a      	cmp	r2, r3
 800968a:	d207      	bcs.n	800969c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800968c:	f7fe fdc0 	bl	8008210 <__errno>
 8009690:	4603      	mov	r3, r0
 8009692:	220c      	movs	r2, #12
 8009694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800969a:	e009      	b.n	80096b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800969c:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <_sbrk+0x64>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <_sbrk+0x64>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	4a05      	ldr	r2, [pc, #20]	; (80096c0 <_sbrk+0x64>)
 80096ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20020000 	.word	0x20020000
 80096bc:	00000400 	.word	0x00000400
 80096c0:	20000094 	.word	0x20000094
 80096c4:	200000f0 	.word	0x200000f0

080096c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80096cc:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <SystemInit+0x20>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <SystemInit+0x20>)
 80096d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80096ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80096f0:	f7ff ffea 	bl	80096c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80096f4:	480c      	ldr	r0, [pc, #48]	; (8009728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80096f6:	490d      	ldr	r1, [pc, #52]	; (800972c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80096f8:	4a0d      	ldr	r2, [pc, #52]	; (8009730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80096fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80096fc:	e002      	b.n	8009704 <LoopCopyDataInit>

080096fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80096fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009702:	3304      	adds	r3, #4

08009704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009708:	d3f9      	bcc.n	80096fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800970a:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800970c:	4c0a      	ldr	r4, [pc, #40]	; (8009738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800970e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009710:	e001      	b.n	8009716 <LoopFillZerobss>

08009712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009714:	3204      	adds	r2, #4

08009716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009718:	d3fb      	bcc.n	8009712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800971a:	f7fe fd7f 	bl	800821c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800971e:	f7ff fcfb 	bl	8009118 <main>
  bx  lr    
 8009722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800972c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8009730:	0800aea8 	.word	0x0800aea8
  ldr r2, =_sbss
 8009734:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8009738:	200000ec 	.word	0x200000ec

0800973c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800973c:	e7fe      	b.n	800973c <ADC_IRQHandler>
	...

08009740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009744:	4b0e      	ldr	r3, [pc, #56]	; (8009780 <HAL_Init+0x40>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a0d      	ldr	r2, [pc, #52]	; (8009780 <HAL_Init+0x40>)
 800974a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800974e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009750:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <HAL_Init+0x40>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a0a      	ldr	r2, [pc, #40]	; (8009780 <HAL_Init+0x40>)
 8009756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800975a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800975c:	4b08      	ldr	r3, [pc, #32]	; (8009780 <HAL_Init+0x40>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a07      	ldr	r2, [pc, #28]	; (8009780 <HAL_Init+0x40>)
 8009762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009768:	2003      	movs	r0, #3
 800976a:	f000 f967 	bl	8009a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800976e:	2000      	movs	r0, #0
 8009770:	f000 f83e 	bl	80097f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009774:	f7ff fe6a 	bl	800944c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40023c00 	.word	0x40023c00

08009784 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8009788:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <HAL_DeInit+0x4c>)
 800978a:	4a12      	ldr	r2, [pc, #72]	; (80097d4 <HAL_DeInit+0x50>)
 800978c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800978e:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <HAL_DeInit+0x4c>)
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8009794:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <HAL_DeInit+0x4c>)
 8009796:	4a10      	ldr	r2, [pc, #64]	; (80097d8 <HAL_DeInit+0x54>)
 8009798:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <HAL_DeInit+0x4c>)
 800979c:	2200      	movs	r2, #0
 800979e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <HAL_DeInit+0x4c>)
 80097a2:	4a0e      	ldr	r2, [pc, #56]	; (80097dc <HAL_DeInit+0x58>)
 80097a4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <HAL_DeInit+0x4c>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80097ac:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <HAL_DeInit+0x4c>)
 80097ae:	22c1      	movs	r2, #193	; 0xc1
 80097b0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80097b2:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <HAL_DeInit+0x4c>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <HAL_DeInit+0x4c>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <HAL_DeInit+0x4c>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80097c4:	f000 f80c 	bl	80097e0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	40023800 	.word	0x40023800
 80097d4:	f6fec9ff 	.word	0xf6fec9ff
 80097d8:	04777933 	.word	0x04777933
 80097dc:	226011ff 	.word	0x226011ff

080097e0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80097e4:	bf00      	nop
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80097f8:	4b12      	ldr	r3, [pc, #72]	; (8009844 <HAL_InitTick+0x54>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <HAL_InitTick+0x58>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	4619      	mov	r1, r3
 8009802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009806:	fbb3 f3f1 	udiv	r3, r3, r1
 800980a:	fbb2 f3f3 	udiv	r3, r2, r3
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f93b 	bl	8009a8a <HAL_SYSTICK_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e00e      	b.n	800983c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b0f      	cmp	r3, #15
 8009822:	d80a      	bhi.n	800983a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009824:	2200      	movs	r2, #0
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982c:	f000 f911 	bl	8009a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009830:	4a06      	ldr	r2, [pc, #24]	; (800984c <HAL_InitTick+0x5c>)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	e000      	b.n	800983c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000064 	.word	0x20000064
 8009848:	2000006c 	.word	0x2000006c
 800984c:	20000068 	.word	0x20000068

08009850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <HAL_IncTick+0x20>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <HAL_IncTick+0x24>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4413      	add	r3, r2
 8009860:	4a04      	ldr	r2, [pc, #16]	; (8009874 <HAL_IncTick+0x24>)
 8009862:	6013      	str	r3, [r2, #0]
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	2000006c 	.word	0x2000006c
 8009874:	200000e4 	.word	0x200000e4

08009878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return uwTick;
 800987c:	4b03      	ldr	r3, [pc, #12]	; (800988c <HAL_GetTick+0x14>)
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	200000e4 	.word	0x200000e4

08009890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009898:	f7ff ffee 	bl	8009878 <HAL_GetTick>
 800989c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a8:	d005      	beq.n	80098b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <HAL_Delay+0x44>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80098b6:	bf00      	nop
 80098b8:	f7ff ffde 	bl	8009878 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d8f7      	bhi.n	80098b8 <HAL_Delay+0x28>
  {
  }
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	2000006c 	.word	0x2000006c

080098d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80098e8:	4b0c      	ldr	r3, [pc, #48]	; (800991c <__NVIC_SetPriorityGrouping+0x44>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80098f4:	4013      	ands	r3, r2
 80098f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800990a:	4a04      	ldr	r2, [pc, #16]	; (800991c <__NVIC_SetPriorityGrouping+0x44>)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	60d3      	str	r3, [r2, #12]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	e000ed00 	.word	0xe000ed00

08009920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <__NVIC_GetPriorityGrouping+0x18>)
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	0a1b      	lsrs	r3, r3, #8
 800992a:	f003 0307 	and.w	r3, r3, #7
}
 800992e:	4618      	mov	r0, r3
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	e000ed00 	.word	0xe000ed00

0800993c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994c:	2b00      	cmp	r3, #0
 800994e:	db0a      	blt.n	8009966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	b2da      	uxtb	r2, r3
 8009954:	490c      	ldr	r1, [pc, #48]	; (8009988 <__NVIC_SetPriority+0x4c>)
 8009956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800995a:	0112      	lsls	r2, r2, #4
 800995c:	b2d2      	uxtb	r2, r2
 800995e:	440b      	add	r3, r1
 8009960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009964:	e00a      	b.n	800997c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4908      	ldr	r1, [pc, #32]	; (800998c <__NVIC_SetPriority+0x50>)
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	3b04      	subs	r3, #4
 8009974:	0112      	lsls	r2, r2, #4
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	440b      	add	r3, r1
 800997a:	761a      	strb	r2, [r3, #24]
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	e000e100 	.word	0xe000e100
 800998c:	e000ed00 	.word	0xe000ed00

08009990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	f1c3 0307 	rsb	r3, r3, #7
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	bf28      	it	cs
 80099ae:	2304      	movcs	r3, #4
 80099b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3304      	adds	r3, #4
 80099b6:	2b06      	cmp	r3, #6
 80099b8:	d902      	bls.n	80099c0 <NVIC_EncodePriority+0x30>
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	3b03      	subs	r3, #3
 80099be:	e000      	b.n	80099c2 <NVIC_EncodePriority+0x32>
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	43da      	mvns	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	401a      	ands	r2, r3
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	fa01 f303 	lsl.w	r3, r1, r3
 80099e2:	43d9      	mvns	r1, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099e8:	4313      	orrs	r3, r2
         );
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3724      	adds	r7, #36	; 0x24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a08:	d301      	bcc.n	8009a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e00f      	b.n	8009a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009a0e:	4a0a      	ldr	r2, [pc, #40]	; (8009a38 <SysTick_Config+0x40>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009a16:	210f      	movs	r1, #15
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a1c:	f7ff ff8e 	bl	800993c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009a20:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <SysTick_Config+0x40>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a26:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <SysTick_Config+0x40>)
 8009a28:	2207      	movs	r2, #7
 8009a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	e000e010 	.word	0xe000e010

08009a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ff47 	bl	80098d8 <__NVIC_SetPriorityGrouping>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b086      	sub	sp, #24
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	4603      	mov	r3, r0
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
 8009a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a64:	f7ff ff5c 	bl	8009920 <__NVIC_GetPriorityGrouping>
 8009a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f7ff ff8e 	bl	8009990 <NVIC_EncodePriority>
 8009a74:	4602      	mov	r2, r0
 8009a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff ff5d 	bl	800993c <__NVIC_SetPriority>
}
 8009a82:	bf00      	nop
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff ffb0 	bl	80099f8 <SysTick_Config>
 8009a98:	4603      	mov	r3, r0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b089      	sub	sp, #36	; 0x24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009aba:	2300      	movs	r3, #0
 8009abc:	61fb      	str	r3, [r7, #28]
 8009abe:	e16b      	b.n	8009d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	f040 815a 	bne.w	8009d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d005      	beq.n	8009af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d130      	bne.n	8009b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	2203      	movs	r2, #3
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	43db      	mvns	r3, r3
 8009b08:	69ba      	ldr	r2, [r7, #24]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	43db      	mvns	r3, r3
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	091b      	lsrs	r3, r3, #4
 8009b42:	f003 0201 	and.w	r2, r3, #1
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d017      	beq.n	8009b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	2203      	movs	r2, #3
 8009b70:	fa02 f303 	lsl.w	r3, r2, r3
 8009b74:	43db      	mvns	r3, r3
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d123      	bne.n	8009be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	08da      	lsrs	r2, r3, #3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3208      	adds	r2, #8
 8009ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	220f      	movs	r2, #15
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	08da      	lsrs	r2, r3, #3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3208      	adds	r2, #8
 8009be2:	69b9      	ldr	r1, [r7, #24]
 8009be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f003 0203 	and.w	r2, r3, #3
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80b4 	beq.w	8009d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	4b60      	ldr	r3, [pc, #384]	; (8009db0 <HAL_GPIO_Init+0x30c>)
 8009c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c32:	4a5f      	ldr	r2, [pc, #380]	; (8009db0 <HAL_GPIO_Init+0x30c>)
 8009c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c38:	6453      	str	r3, [r2, #68]	; 0x44
 8009c3a:	4b5d      	ldr	r3, [pc, #372]	; (8009db0 <HAL_GPIO_Init+0x30c>)
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c46:	4a5b      	ldr	r2, [pc, #364]	; (8009db4 <HAL_GPIO_Init+0x310>)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	220f      	movs	r2, #15
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	43db      	mvns	r3, r3
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	4013      	ands	r3, r2
 8009c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a52      	ldr	r2, [pc, #328]	; (8009db8 <HAL_GPIO_Init+0x314>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d02b      	beq.n	8009cca <HAL_GPIO_Init+0x226>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a51      	ldr	r2, [pc, #324]	; (8009dbc <HAL_GPIO_Init+0x318>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d025      	beq.n	8009cc6 <HAL_GPIO_Init+0x222>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a50      	ldr	r2, [pc, #320]	; (8009dc0 <HAL_GPIO_Init+0x31c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01f      	beq.n	8009cc2 <HAL_GPIO_Init+0x21e>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <HAL_GPIO_Init+0x320>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d019      	beq.n	8009cbe <HAL_GPIO_Init+0x21a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a4e      	ldr	r2, [pc, #312]	; (8009dc8 <HAL_GPIO_Init+0x324>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_GPIO_Init+0x216>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a4d      	ldr	r2, [pc, #308]	; (8009dcc <HAL_GPIO_Init+0x328>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d00d      	beq.n	8009cb6 <HAL_GPIO_Init+0x212>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a4c      	ldr	r2, [pc, #304]	; (8009dd0 <HAL_GPIO_Init+0x32c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d007      	beq.n	8009cb2 <HAL_GPIO_Init+0x20e>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a4b      	ldr	r2, [pc, #300]	; (8009dd4 <HAL_GPIO_Init+0x330>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d101      	bne.n	8009cae <HAL_GPIO_Init+0x20a>
 8009caa:	2307      	movs	r3, #7
 8009cac:	e00e      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cae:	2308      	movs	r3, #8
 8009cb0:	e00c      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cb2:	2306      	movs	r3, #6
 8009cb4:	e00a      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cb6:	2305      	movs	r3, #5
 8009cb8:	e008      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cba:	2304      	movs	r3, #4
 8009cbc:	e006      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e004      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e002      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <HAL_GPIO_Init+0x228>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	f002 0203 	and.w	r2, r2, #3
 8009cd2:	0092      	lsls	r2, r2, #2
 8009cd4:	4093      	lsls	r3, r2
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cdc:	4935      	ldr	r1, [pc, #212]	; (8009db4 <HAL_GPIO_Init+0x310>)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	089b      	lsrs	r3, r3, #2
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009cea:	4b3b      	ldr	r3, [pc, #236]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	43db      	mvns	r3, r3
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d0e:	4a32      	ldr	r2, [pc, #200]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d14:	4b30      	ldr	r3, [pc, #192]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	4013      	ands	r3, r2
 8009d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d38:	4a27      	ldr	r2, [pc, #156]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009d3e:	4b26      	ldr	r3, [pc, #152]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	43db      	mvns	r3, r3
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d62:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009d68:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	4013      	ands	r3, r2
 8009d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d8c:	4a12      	ldr	r2, [pc, #72]	; (8009dd8 <HAL_GPIO_Init+0x334>)
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	f67f ae90 	bls.w	8009ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	3724      	adds	r7, #36	; 0x24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40023800 	.word	0x40023800
 8009db4:	40013800 	.word	0x40013800
 8009db8:	40020000 	.word	0x40020000
 8009dbc:	40020400 	.word	0x40020400
 8009dc0:	40020800 	.word	0x40020800
 8009dc4:	40020c00 	.word	0x40020c00
 8009dc8:	40021000 	.word	0x40021000
 8009dcc:	40021400 	.word	0x40021400
 8009dd0:	40021800 	.word	0x40021800
 8009dd4:	40021c00 	.word	0x40021c00
 8009dd8:	40013c00 	.word	0x40013c00

08009ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	807b      	strh	r3, [r7, #2]
 8009de8:	4613      	mov	r3, r2
 8009dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dec:	787b      	ldrb	r3, [r7, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009df2:	887a      	ldrh	r2, [r7, #2]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009df8:	e003      	b.n	8009e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009dfa:	887b      	ldrh	r3, [r7, #2]
 8009dfc:	041a      	lsls	r2, r3, #16
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	619a      	str	r2, [r3, #24]
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e20:	887a      	ldrh	r2, [r7, #2]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4013      	ands	r3, r2
 8009e26:	041a      	lsls	r2, r3, #16
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	43d9      	mvns	r1, r3
 8009e2c:	887b      	ldrh	r3, [r7, #2]
 8009e2e:	400b      	ands	r3, r1
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	619a      	str	r2, [r3, #24]
}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e264      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d075      	beq.n	8009f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e62:	4ba3      	ldr	r3, [pc, #652]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 030c 	and.w	r3, r3, #12
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d00c      	beq.n	8009e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e6e:	4ba0      	ldr	r3, [pc, #640]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d112      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e7a:	4b9d      	ldr	r3, [pc, #628]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e86:	d10b      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e88:	4b99      	ldr	r3, [pc, #612]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d05b      	beq.n	8009f4c <HAL_RCC_OscConfig+0x108>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d157      	bne.n	8009f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e23f      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea8:	d106      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x74>
 8009eaa:	4b91      	ldr	r3, [pc, #580]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a90      	ldr	r2, [pc, #576]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e01d      	b.n	8009ef4 <HAL_RCC_OscConfig+0xb0>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ec0:	d10c      	bne.n	8009edc <HAL_RCC_OscConfig+0x98>
 8009ec2:	4b8b      	ldr	r3, [pc, #556]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a8a      	ldr	r2, [pc, #552]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	4b88      	ldr	r3, [pc, #544]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a87      	ldr	r2, [pc, #540]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	e00b      	b.n	8009ef4 <HAL_RCC_OscConfig+0xb0>
 8009edc:	4b84      	ldr	r3, [pc, #528]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a83      	ldr	r2, [pc, #524]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	4b81      	ldr	r3, [pc, #516]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a80      	ldr	r2, [pc, #512]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d013      	beq.n	8009f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009efc:	f7ff fcbc 	bl	8009878 <HAL_GetTick>
 8009f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f02:	e008      	b.n	8009f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f04:	f7ff fcb8 	bl	8009878 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b64      	cmp	r3, #100	; 0x64
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e204      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f16:	4b76      	ldr	r3, [pc, #472]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0f0      	beq.n	8009f04 <HAL_RCC_OscConfig+0xc0>
 8009f22:	e014      	b.n	8009f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f24:	f7ff fca8 	bl	8009878 <HAL_GetTick>
 8009f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f2c:	f7ff fca4 	bl	8009878 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b64      	cmp	r3, #100	; 0x64
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e1f0      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f3e:	4b6c      	ldr	r3, [pc, #432]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1f0      	bne.n	8009f2c <HAL_RCC_OscConfig+0xe8>
 8009f4a:	e000      	b.n	8009f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d063      	beq.n	800a022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f5a:	4b65      	ldr	r3, [pc, #404]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f003 030c 	and.w	r3, r3, #12
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00b      	beq.n	8009f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f66:	4b62      	ldr	r3, [pc, #392]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f6e:	2b08      	cmp	r3, #8
 8009f70:	d11c      	bne.n	8009fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f72:	4b5f      	ldr	r3, [pc, #380]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d116      	bne.n	8009fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f7e:	4b5c      	ldr	r3, [pc, #368]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <HAL_RCC_OscConfig+0x152>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d001      	beq.n	8009f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e1c4      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f96:	4b56      	ldr	r3, [pc, #344]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	4952      	ldr	r1, [pc, #328]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009faa:	e03a      	b.n	800a022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d020      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009fb4:	4b4f      	ldr	r3, [pc, #316]	; (800a0f4 <HAL_RCC_OscConfig+0x2b0>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fba:	f7ff fc5d 	bl	8009878 <HAL_GetTick>
 8009fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fc2:	f7ff fc59 	bl	8009878 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e1a5      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fd4:	4b46      	ldr	r3, [pc, #280]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0f0      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fe0:	4b43      	ldr	r3, [pc, #268]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	4940      	ldr	r1, [pc, #256]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	600b      	str	r3, [r1, #0]
 8009ff4:	e015      	b.n	800a022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ff6:	4b3f      	ldr	r3, [pc, #252]	; (800a0f4 <HAL_RCC_OscConfig+0x2b0>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffc:	f7ff fc3c 	bl	8009878 <HAL_GetTick>
 800a000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a004:	f7ff fc38 	bl	8009878 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e184      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a016:	4b36      	ldr	r3, [pc, #216]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f0      	bne.n	800a004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0308 	and.w	r3, r3, #8
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d030      	beq.n	800a090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d016      	beq.n	800a064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a036:	4b30      	ldr	r3, [pc, #192]	; (800a0f8 <HAL_RCC_OscConfig+0x2b4>)
 800a038:	2201      	movs	r2, #1
 800a03a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a03c:	f7ff fc1c 	bl	8009878 <HAL_GetTick>
 800a040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a042:	e008      	b.n	800a056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a044:	f7ff fc18 	bl	8009878 <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d901      	bls.n	800a056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e164      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0f0      	beq.n	800a044 <HAL_RCC_OscConfig+0x200>
 800a062:	e015      	b.n	800a090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a064:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <HAL_RCC_OscConfig+0x2b4>)
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a06a:	f7ff fc05 	bl	8009878 <HAL_GetTick>
 800a06e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a070:	e008      	b.n	800a084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a072:	f7ff fc01 	bl	8009878 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d901      	bls.n	800a084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e14d      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a084:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1f0      	bne.n	800a072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 80a0 	beq.w	800a1de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10f      	bne.n	800a0ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60bb      	str	r3, [r7, #8]
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	4a0e      	ldr	r2, [pc, #56]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <HAL_RCC_OscConfig+0x2ac>)
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	60bb      	str	r3, [r7, #8]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <HAL_RCC_OscConfig+0x2b8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d121      	bne.n	800a11e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0da:	4b08      	ldr	r3, [pc, #32]	; (800a0fc <HAL_RCC_OscConfig+0x2b8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a07      	ldr	r2, [pc, #28]	; (800a0fc <HAL_RCC_OscConfig+0x2b8>)
 800a0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0e6:	f7ff fbc7 	bl	8009878 <HAL_GetTick>
 800a0ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0ec:	e011      	b.n	800a112 <HAL_RCC_OscConfig+0x2ce>
 800a0ee:	bf00      	nop
 800a0f0:	40023800 	.word	0x40023800
 800a0f4:	42470000 	.word	0x42470000
 800a0f8:	42470e80 	.word	0x42470e80
 800a0fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a100:	f7ff fbba 	bl	8009878 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e106      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a112:	4b85      	ldr	r3, [pc, #532]	; (800a328 <HAL_RCC_OscConfig+0x4e4>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f0      	beq.n	800a100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d106      	bne.n	800a134 <HAL_RCC_OscConfig+0x2f0>
 800a126:	4b81      	ldr	r3, [pc, #516]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12a:	4a80      	ldr	r2, [pc, #512]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a12c:	f043 0301 	orr.w	r3, r3, #1
 800a130:	6713      	str	r3, [r2, #112]	; 0x70
 800a132:	e01c      	b.n	800a16e <HAL_RCC_OscConfig+0x32a>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	2b05      	cmp	r3, #5
 800a13a:	d10c      	bne.n	800a156 <HAL_RCC_OscConfig+0x312>
 800a13c:	4b7b      	ldr	r3, [pc, #492]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a140:	4a7a      	ldr	r2, [pc, #488]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a142:	f043 0304 	orr.w	r3, r3, #4
 800a146:	6713      	str	r3, [r2, #112]	; 0x70
 800a148:	4b78      	ldr	r3, [pc, #480]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14c:	4a77      	ldr	r2, [pc, #476]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	6713      	str	r3, [r2, #112]	; 0x70
 800a154:	e00b      	b.n	800a16e <HAL_RCC_OscConfig+0x32a>
 800a156:	4b75      	ldr	r3, [pc, #468]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	4a74      	ldr	r2, [pc, #464]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a15c:	f023 0301 	bic.w	r3, r3, #1
 800a160:	6713      	str	r3, [r2, #112]	; 0x70
 800a162:	4b72      	ldr	r3, [pc, #456]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	4a71      	ldr	r2, [pc, #452]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a168:	f023 0304 	bic.w	r3, r3, #4
 800a16c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d015      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a176:	f7ff fb7f 	bl	8009878 <HAL_GetTick>
 800a17a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a17c:	e00a      	b.n	800a194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a17e:	f7ff fb7b 	bl	8009878 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e0c5      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a194:	4b65      	ldr	r3, [pc, #404]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0ee      	beq.n	800a17e <HAL_RCC_OscConfig+0x33a>
 800a1a0:	e014      	b.n	800a1cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1a2:	f7ff fb69 	bl	8009878 <HAL_GetTick>
 800a1a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1a8:	e00a      	b.n	800a1c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1aa:	f7ff fb65 	bl	8009878 <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d901      	bls.n	800a1c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e0af      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1c0:	4b5a      	ldr	r3, [pc, #360]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1ee      	bne.n	800a1aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d105      	bne.n	800a1de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1d2:	4b56      	ldr	r3, [pc, #344]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	4a55      	ldr	r2, [pc, #340]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a1d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 809b 	beq.w	800a31e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1e8:	4b50      	ldr	r3, [pc, #320]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	f003 030c 	and.w	r3, r3, #12
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d05c      	beq.n	800a2ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d141      	bne.n	800a280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1fc:	4b4c      	ldr	r3, [pc, #304]	; (800a330 <HAL_RCC_OscConfig+0x4ec>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a202:	f7ff fb39 	bl	8009878 <HAL_GetTick>
 800a206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a20a:	f7ff fb35 	bl	8009878 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e081      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a21c:	4b43      	ldr	r3, [pc, #268]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f0      	bne.n	800a20a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	019b      	lsls	r3, r3, #6
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	3b01      	subs	r3, #1
 800a242:	041b      	lsls	r3, r3, #16
 800a244:	431a      	orrs	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	4937      	ldr	r1, [pc, #220]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a252:	4b37      	ldr	r3, [pc, #220]	; (800a330 <HAL_RCC_OscConfig+0x4ec>)
 800a254:	2201      	movs	r2, #1
 800a256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a258:	f7ff fb0e 	bl	8009878 <HAL_GetTick>
 800a25c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a25e:	e008      	b.n	800a272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a260:	f7ff fb0a 	bl	8009878 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e056      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a272:	4b2e      	ldr	r3, [pc, #184]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0x41c>
 800a27e:	e04e      	b.n	800a31e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a280:	4b2b      	ldr	r3, [pc, #172]	; (800a330 <HAL_RCC_OscConfig+0x4ec>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a286:	f7ff faf7 	bl	8009878 <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a28c:	e008      	b.n	800a2a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a28e:	f7ff faf3 	bl	8009878 <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d901      	bls.n	800a2a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e03f      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2a0:	4b22      	ldr	r3, [pc, #136]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f0      	bne.n	800a28e <HAL_RCC_OscConfig+0x44a>
 800a2ac:	e037      	b.n	800a31e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e032      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a2ba:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <HAL_RCC_OscConfig+0x4e8>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d028      	beq.n	800a31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d121      	bne.n	800a31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d11a      	bne.n	800a31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d111      	bne.n	800a31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	3b01      	subs	r3, #1
 800a304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a306:	429a      	cmp	r2, r3
 800a308:	d107      	bne.n	800a31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a316:	429a      	cmp	r2, r3
 800a318:	d001      	beq.n	800a31e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40007000 	.word	0x40007000
 800a32c:	40023800 	.word	0x40023800
 800a330:	42470060 	.word	0x42470060

0800a334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e0cc      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a348:	4b68      	ldr	r3, [pc, #416]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0307 	and.w	r3, r3, #7
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d90c      	bls.n	800a370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a356:	4b65      	ldr	r3, [pc, #404]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a35e:	4b63      	ldr	r3, [pc, #396]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d001      	beq.n	800a370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e0b8      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0302 	and.w	r3, r3, #2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d020      	beq.n	800a3be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a388:	4b59      	ldr	r3, [pc, #356]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	4a58      	ldr	r2, [pc, #352]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a38e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a3a0:	4b53      	ldr	r3, [pc, #332]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	4a52      	ldr	r2, [pc, #328]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a3aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3ac:	4b50      	ldr	r3, [pc, #320]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	494d      	ldr	r1, [pc, #308]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d044      	beq.n	800a454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d107      	bne.n	800a3e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3d2:	4b47      	ldr	r3, [pc, #284]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d119      	bne.n	800a412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e07f      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d003      	beq.n	800a3f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d107      	bne.n	800a402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3f2:	4b3f      	ldr	r3, [pc, #252]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e06f      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a402:	4b3b      	ldr	r3, [pc, #236]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e067      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a412:	4b37      	ldr	r3, [pc, #220]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f023 0203 	bic.w	r2, r3, #3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	4934      	ldr	r1, [pc, #208]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a420:	4313      	orrs	r3, r2
 800a422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a424:	f7ff fa28 	bl	8009878 <HAL_GetTick>
 800a428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a42a:	e00a      	b.n	800a442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a42c:	f7ff fa24 	bl	8009878 <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	f241 3288 	movw	r2, #5000	; 0x1388
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e04f      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a442:	4b2b      	ldr	r3, [pc, #172]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f003 020c 	and.w	r2, r3, #12
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	429a      	cmp	r2, r3
 800a452:	d1eb      	bne.n	800a42c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a454:	4b25      	ldr	r3, [pc, #148]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d20c      	bcs.n	800a47c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a462:	4b22      	ldr	r3, [pc, #136]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a46a:	4b20      	ldr	r3, [pc, #128]	; (800a4ec <HAL_RCC_ClockConfig+0x1b8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d001      	beq.n	800a47c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e032      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d008      	beq.n	800a49a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a488:	4b19      	ldr	r3, [pc, #100]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	4916      	ldr	r1, [pc, #88]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a496:	4313      	orrs	r3, r2
 800a498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a4a6:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	490e      	ldr	r1, [pc, #56]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a4ba:	f000 f821 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	091b      	lsrs	r3, r3, #4
 800a4c6:	f003 030f 	and.w	r3, r3, #15
 800a4ca:	490a      	ldr	r1, [pc, #40]	; (800a4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a4cc:	5ccb      	ldrb	r3, [r1, r3]
 800a4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d2:	4a09      	ldr	r2, [pc, #36]	; (800a4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a4d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <HAL_RCC_ClockConfig+0x1c8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff f988 	bl	80097f0 <HAL_InitTick>

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	40023c00 	.word	0x40023c00
 800a4f0:	40023800 	.word	0x40023800
 800a4f4:	0800ae80 	.word	0x0800ae80
 800a4f8:	20000064 	.word	0x20000064
 800a4fc:	20000068 	.word	0x20000068

0800a500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	607b      	str	r3, [r7, #4]
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	2300      	movs	r3, #0
 800a512:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a518:	4b67      	ldr	r3, [pc, #412]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 030c 	and.w	r3, r3, #12
 800a520:	2b08      	cmp	r3, #8
 800a522:	d00d      	beq.n	800a540 <HAL_RCC_GetSysClockFreq+0x40>
 800a524:	2b08      	cmp	r3, #8
 800a526:	f200 80bd 	bhi.w	800a6a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_RCC_GetSysClockFreq+0x34>
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d003      	beq.n	800a53a <HAL_RCC_GetSysClockFreq+0x3a>
 800a532:	e0b7      	b.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a534:	4b61      	ldr	r3, [pc, #388]	; (800a6bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a536:	60bb      	str	r3, [r7, #8]
       break;
 800a538:	e0b7      	b.n	800a6aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a53a:	4b61      	ldr	r3, [pc, #388]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a53c:	60bb      	str	r3, [r7, #8]
      break;
 800a53e:	e0b4      	b.n	800a6aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a540:	4b5d      	ldr	r3, [pc, #372]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a54a:	4b5b      	ldr	r3, [pc, #364]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d04d      	beq.n	800a5f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a556:	4b58      	ldr	r3, [pc, #352]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	099b      	lsrs	r3, r3, #6
 800a55c:	461a      	mov	r2, r3
 800a55e:	f04f 0300 	mov.w	r3, #0
 800a562:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a566:	f04f 0100 	mov.w	r1, #0
 800a56a:	ea02 0800 	and.w	r8, r2, r0
 800a56e:	ea03 0901 	and.w	r9, r3, r1
 800a572:	4640      	mov	r0, r8
 800a574:	4649      	mov	r1, r9
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	014b      	lsls	r3, r1, #5
 800a580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a584:	0142      	lsls	r2, r0, #5
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	ebb0 0008 	subs.w	r0, r0, r8
 800a58e:	eb61 0109 	sbc.w	r1, r1, r9
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	f04f 0300 	mov.w	r3, #0
 800a59a:	018b      	lsls	r3, r1, #6
 800a59c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a5a0:	0182      	lsls	r2, r0, #6
 800a5a2:	1a12      	subs	r2, r2, r0
 800a5a4:	eb63 0301 	sbc.w	r3, r3, r1
 800a5a8:	f04f 0000 	mov.w	r0, #0
 800a5ac:	f04f 0100 	mov.w	r1, #0
 800a5b0:	00d9      	lsls	r1, r3, #3
 800a5b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5b6:	00d0      	lsls	r0, r2, #3
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	eb12 0208 	adds.w	r2, r2, r8
 800a5c0:	eb43 0309 	adc.w	r3, r3, r9
 800a5c4:	f04f 0000 	mov.w	r0, #0
 800a5c8:	f04f 0100 	mov.w	r1, #0
 800a5cc:	0259      	lsls	r1, r3, #9
 800a5ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a5d2:	0250      	lsls	r0, r2, #9
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4610      	mov	r0, r2
 800a5da:	4619      	mov	r1, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	f7fe fc1c 	bl	8008e20 <__aeabi_uldivmod>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e04a      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5f2:	4b31      	ldr	r3, [pc, #196]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	099b      	lsrs	r3, r3, #6
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	f04f 0300 	mov.w	r3, #0
 800a5fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a602:	f04f 0100 	mov.w	r1, #0
 800a606:	ea02 0400 	and.w	r4, r2, r0
 800a60a:	ea03 0501 	and.w	r5, r3, r1
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	014b      	lsls	r3, r1, #5
 800a61c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a620:	0142      	lsls	r2, r0, #5
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	1b00      	subs	r0, r0, r4
 800a628:	eb61 0105 	sbc.w	r1, r1, r5
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	018b      	lsls	r3, r1, #6
 800a636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a63a:	0182      	lsls	r2, r0, #6
 800a63c:	1a12      	subs	r2, r2, r0
 800a63e:	eb63 0301 	sbc.w	r3, r3, r1
 800a642:	f04f 0000 	mov.w	r0, #0
 800a646:	f04f 0100 	mov.w	r1, #0
 800a64a:	00d9      	lsls	r1, r3, #3
 800a64c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a650:	00d0      	lsls	r0, r2, #3
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	1912      	adds	r2, r2, r4
 800a658:	eb45 0303 	adc.w	r3, r5, r3
 800a65c:	f04f 0000 	mov.w	r0, #0
 800a660:	f04f 0100 	mov.w	r1, #0
 800a664:	0299      	lsls	r1, r3, #10
 800a666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a66a:	0290      	lsls	r0, r2, #10
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4610      	mov	r0, r2
 800a672:	4619      	mov	r1, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	461a      	mov	r2, r3
 800a678:	f04f 0300 	mov.w	r3, #0
 800a67c:	f7fe fbd0 	bl	8008e20 <__aeabi_uldivmod>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4613      	mov	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a688:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	0c1b      	lsrs	r3, r3, #16
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	3301      	adds	r3, #1
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a0:	60bb      	str	r3, [r7, #8]
      break;
 800a6a2:	e002      	b.n	800a6aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a6a6:	60bb      	str	r3, [r7, #8]
      break;
 800a6a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a6b6:	bf00      	nop
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	00f42400 	.word	0x00f42400
 800a6c0:	007a1200 	.word	0x007a1200

0800a6c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6c8:	4b03      	ldr	r3, [pc, #12]	; (800a6d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20000064 	.word	0x20000064

0800a6dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a6e0:	f7ff fff0 	bl	800a6c4 <HAL_RCC_GetHCLKFreq>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	0a9b      	lsrs	r3, r3, #10
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	4903      	ldr	r1, [pc, #12]	; (800a700 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6f2:	5ccb      	ldrb	r3, [r1, r3]
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40023800 	.word	0x40023800
 800a700:	0800ae90 	.word	0x0800ae90

0800a704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a708:	f7ff ffdc 	bl	800a6c4 <HAL_RCC_GetHCLKFreq>
 800a70c:	4602      	mov	r2, r0
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	0b5b      	lsrs	r3, r3, #13
 800a714:	f003 0307 	and.w	r3, r3, #7
 800a718:	4903      	ldr	r1, [pc, #12]	; (800a728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a71a:	5ccb      	ldrb	r3, [r1, r3]
 800a71c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a720:	4618      	mov	r0, r3
 800a722:	bd80      	pop	{r7, pc}
 800a724:	40023800 	.word	0x40023800
 800a728:	0800ae90 	.word	0x0800ae90

0800a72c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a732:	f7ff f8a1 	bl	8009878 <HAL_GetTick>
 800a736:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a738:	4b5d      	ldr	r3, [pc, #372]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a5c      	ldr	r2, [pc, #368]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a744:	e008      	b.n	800a758 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a746:	f7ff f897 	bl	8009878 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b02      	cmp	r3, #2
 800a752:	d901      	bls.n	800a758 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800a754:	2303      	movs	r3, #3
 800a756:	e0a7      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a758:	4b55      	ldr	r3, [pc, #340]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0f0      	beq.n	800a746 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800a764:	4b52      	ldr	r3, [pc, #328]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a51      	ldr	r2, [pc, #324]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a770:	f7ff f882 	bl	8009878 <HAL_GetTick>
 800a774:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800a776:	4b4e      	ldr	r3, [pc, #312]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800a77c:	e00a      	b.n	800a794 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a77e:	f7ff f87b 	bl	8009878 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	f241 3288 	movw	r2, #5000	; 0x1388
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d901      	bls.n	800a794 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e089      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800a794:	4b46      	ldr	r3, [pc, #280]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 030c 	and.w	r3, r3, #12
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1ee      	bne.n	800a77e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a7a0:	f7ff f86a 	bl	8009878 <HAL_GetTick>
 800a7a4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800a7a6:	4b42      	ldr	r3, [pc, #264]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a41      	ldr	r2, [pc, #260]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7ac:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800a7b0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7b4:	f7ff f860 	bl	8009878 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b64      	cmp	r3, #100	; 0x64
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e070      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a7c6:	4b3a      	ldr	r3, [pc, #232]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f0      	bne.n	800a7b4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a7d2:	f7ff f851 	bl	8009878 <HAL_GetTick>
 800a7d6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a7d8:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a34      	ldr	r2, [pc, #208]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7e2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a7e4:	e008      	b.n	800a7f8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e6:	f7ff f847 	bl	8009878 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e057      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a7f8:	4b2d      	ldr	r3, [pc, #180]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f0      	bne.n	800a7e6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800a804:	f7ff f838 	bl	8009878 <HAL_GetTick>
 800a808:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800a80a:	4b29      	ldr	r3, [pc, #164]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a28      	ldr	r2, [pc, #160]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a814:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800a816:	e008      	b.n	800a82a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a818:	f7ff f82e 	bl	8009878 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e03e      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800a82a:	4b21      	ldr	r3, [pc, #132]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f0      	bne.n	800a818 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800a836:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a838:	4a1e      	ldr	r2, [pc, #120]	; (800a8b4 <HAL_RCC_DeInit+0x188>)
 800a83a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800a83c:	4b1c      	ldr	r3, [pc, #112]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a83e:	4a1e      	ldr	r2, [pc, #120]	; (800a8b8 <HAL_RCC_DeInit+0x18c>)
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800a844:	4b1a      	ldr	r3, [pc, #104]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	4a19      	ldr	r2, [pc, #100]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a84a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a84e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	4a16      	ldr	r2, [pc, #88]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a85a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800a85c:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	4a13      	ldr	r2, [pc, #76]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a862:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800a866:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800a868:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a86e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a872:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800a874:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a878:	4a0d      	ldr	r2, [pc, #52]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a87a:	f023 0301 	bic.w	r3, r3, #1
 800a87e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800a880:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a884:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <HAL_RCC_DeInit+0x184>)
 800a886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a88a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800a88c:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <HAL_RCC_DeInit+0x190>)
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <HAL_RCC_DeInit+0x194>)
 800a890:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800a892:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <HAL_RCC_DeInit+0x198>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe ffaa 	bl	80097f0 <HAL_InitTick>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
  }
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	40023800 	.word	0x40023800
 800a8b4:	04003010 	.word	0x04003010
 800a8b8:	20003000 	.word	0x20003000
 800a8bc:	20000064 	.word	0x20000064
 800a8c0:	00f42400 	.word	0x00f42400
 800a8c4:	20000068 	.word	0x20000068

0800a8c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e042      	b.n	800a960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fe fdd4 	bl	800949c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	; 0x24
 800a8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a90a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f82b 	bl	800a968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	695a      	ldr	r2, [r3, #20]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	b09f      	sub	sp, #124	; 0x7c
 800a96e:	af00      	add	r7, sp, #0
 800a970:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97e:	68d9      	ldr	r1, [r3, #12]
 800a980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	ea40 0301 	orr.w	r3, r0, r1
 800a988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	431a      	orrs	r2, r3
 800a994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	431a      	orrs	r2, r3
 800a99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9ac:	f021 010c 	bic.w	r1, r1, #12
 800a9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9b6:	430b      	orrs	r3, r1
 800a9b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c6:	6999      	ldr	r1, [r3, #24]
 800a9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	ea40 0301 	orr.w	r3, r0, r1
 800a9d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4bc5      	ldr	r3, [pc, #788]	; (800acec <UART_SetConfig+0x384>)
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d004      	beq.n	800a9e6 <UART_SetConfig+0x7e>
 800a9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	4bc3      	ldr	r3, [pc, #780]	; (800acf0 <UART_SetConfig+0x388>)
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d103      	bne.n	800a9ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9e6:	f7ff fe8d 	bl	800a704 <HAL_RCC_GetPCLK2Freq>
 800a9ea:	6778      	str	r0, [r7, #116]	; 0x74
 800a9ec:	e002      	b.n	800a9f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9ee:	f7ff fe75 	bl	800a6dc <HAL_RCC_GetPCLK1Freq>
 800a9f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9fc:	f040 80b6 	bne.w	800ab6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa02:	461c      	mov	r4, r3
 800aa04:	f04f 0500 	mov.w	r5, #0
 800aa08:	4622      	mov	r2, r4
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	1891      	adds	r1, r2, r2
 800aa0e:	6439      	str	r1, [r7, #64]	; 0x40
 800aa10:	415b      	adcs	r3, r3
 800aa12:	647b      	str	r3, [r7, #68]	; 0x44
 800aa14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa18:	1912      	adds	r2, r2, r4
 800aa1a:	eb45 0303 	adc.w	r3, r5, r3
 800aa1e:	f04f 0000 	mov.w	r0, #0
 800aa22:	f04f 0100 	mov.w	r1, #0
 800aa26:	00d9      	lsls	r1, r3, #3
 800aa28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa2c:	00d0      	lsls	r0, r2, #3
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	1911      	adds	r1, r2, r4
 800aa34:	6639      	str	r1, [r7, #96]	; 0x60
 800aa36:	416b      	adcs	r3, r5
 800aa38:	667b      	str	r3, [r7, #100]	; 0x64
 800aa3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	1891      	adds	r1, r2, r2
 800aa46:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa48:	415b      	adcs	r3, r3
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa54:	f7fe f9e4 	bl	8008e20 <__aeabi_uldivmod>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4ba5      	ldr	r3, [pc, #660]	; (800acf4 <UART_SetConfig+0x38c>)
 800aa5e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa62:	095b      	lsrs	r3, r3, #5
 800aa64:	011e      	lsls	r6, r3, #4
 800aa66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa68:	461c      	mov	r4, r3
 800aa6a:	f04f 0500 	mov.w	r5, #0
 800aa6e:	4622      	mov	r2, r4
 800aa70:	462b      	mov	r3, r5
 800aa72:	1891      	adds	r1, r2, r2
 800aa74:	6339      	str	r1, [r7, #48]	; 0x30
 800aa76:	415b      	adcs	r3, r3
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa7e:	1912      	adds	r2, r2, r4
 800aa80:	eb45 0303 	adc.w	r3, r5, r3
 800aa84:	f04f 0000 	mov.w	r0, #0
 800aa88:	f04f 0100 	mov.w	r1, #0
 800aa8c:	00d9      	lsls	r1, r3, #3
 800aa8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa92:	00d0      	lsls	r0, r2, #3
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	1911      	adds	r1, r2, r4
 800aa9a:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa9c:	416b      	adcs	r3, r5
 800aa9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f04f 0300 	mov.w	r3, #0
 800aaaa:	1891      	adds	r1, r2, r2
 800aaac:	62b9      	str	r1, [r7, #40]	; 0x28
 800aaae:	415b      	adcs	r3, r3
 800aab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aab6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aaba:	f7fe f9b1 	bl	8008e20 <__aeabi_uldivmod>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4b8c      	ldr	r3, [pc, #560]	; (800acf4 <UART_SetConfig+0x38c>)
 800aac4:	fba3 1302 	umull	r1, r3, r3, r2
 800aac8:	095b      	lsrs	r3, r3, #5
 800aaca:	2164      	movs	r1, #100	; 0x64
 800aacc:	fb01 f303 	mul.w	r3, r1, r3
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	3332      	adds	r3, #50	; 0x32
 800aad6:	4a87      	ldr	r2, [pc, #540]	; (800acf4 <UART_SetConfig+0x38c>)
 800aad8:	fba2 2303 	umull	r2, r3, r2, r3
 800aadc:	095b      	lsrs	r3, r3, #5
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aae4:	441e      	add	r6, r3
 800aae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aae8:	4618      	mov	r0, r3
 800aaea:	f04f 0100 	mov.w	r1, #0
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	1894      	adds	r4, r2, r2
 800aaf4:	623c      	str	r4, [r7, #32]
 800aaf6:	415b      	adcs	r3, r3
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
 800aafa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aafe:	1812      	adds	r2, r2, r0
 800ab00:	eb41 0303 	adc.w	r3, r1, r3
 800ab04:	f04f 0400 	mov.w	r4, #0
 800ab08:	f04f 0500 	mov.w	r5, #0
 800ab0c:	00dd      	lsls	r5, r3, #3
 800ab0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab12:	00d4      	lsls	r4, r2, #3
 800ab14:	4622      	mov	r2, r4
 800ab16:	462b      	mov	r3, r5
 800ab18:	1814      	adds	r4, r2, r0
 800ab1a:	653c      	str	r4, [r7, #80]	; 0x50
 800ab1c:	414b      	adcs	r3, r1
 800ab1e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	461a      	mov	r2, r3
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	1891      	adds	r1, r2, r2
 800ab2c:	61b9      	str	r1, [r7, #24]
 800ab2e:	415b      	adcs	r3, r3
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ab3a:	f7fe f971 	bl	8008e20 <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4b6c      	ldr	r3, [pc, #432]	; (800acf4 <UART_SetConfig+0x38c>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2164      	movs	r1, #100	; 0x64
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	3332      	adds	r3, #50	; 0x32
 800ab56:	4a67      	ldr	r2, [pc, #412]	; (800acf4 <UART_SetConfig+0x38c>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	f003 0207 	and.w	r2, r3, #7
 800ab62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4432      	add	r2, r6
 800ab68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab6a:	e0b9      	b.n	800ace0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab6e:	461c      	mov	r4, r3
 800ab70:	f04f 0500 	mov.w	r5, #0
 800ab74:	4622      	mov	r2, r4
 800ab76:	462b      	mov	r3, r5
 800ab78:	1891      	adds	r1, r2, r2
 800ab7a:	6139      	str	r1, [r7, #16]
 800ab7c:	415b      	adcs	r3, r3
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab84:	1912      	adds	r2, r2, r4
 800ab86:	eb45 0303 	adc.w	r3, r5, r3
 800ab8a:	f04f 0000 	mov.w	r0, #0
 800ab8e:	f04f 0100 	mov.w	r1, #0
 800ab92:	00d9      	lsls	r1, r3, #3
 800ab94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab98:	00d0      	lsls	r0, r2, #3
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	eb12 0804 	adds.w	r8, r2, r4
 800aba2:	eb43 0905 	adc.w	r9, r3, r5
 800aba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4618      	mov	r0, r3
 800abac:	f04f 0100 	mov.w	r1, #0
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	f04f 0300 	mov.w	r3, #0
 800abb8:	008b      	lsls	r3, r1, #2
 800abba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800abbe:	0082      	lsls	r2, r0, #2
 800abc0:	4640      	mov	r0, r8
 800abc2:	4649      	mov	r1, r9
 800abc4:	f7fe f92c 	bl	8008e20 <__aeabi_uldivmod>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4b49      	ldr	r3, [pc, #292]	; (800acf4 <UART_SetConfig+0x38c>)
 800abce:	fba3 2302 	umull	r2, r3, r3, r2
 800abd2:	095b      	lsrs	r3, r3, #5
 800abd4:	011e      	lsls	r6, r3, #4
 800abd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abd8:	4618      	mov	r0, r3
 800abda:	f04f 0100 	mov.w	r1, #0
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	1894      	adds	r4, r2, r2
 800abe4:	60bc      	str	r4, [r7, #8]
 800abe6:	415b      	adcs	r3, r3
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abee:	1812      	adds	r2, r2, r0
 800abf0:	eb41 0303 	adc.w	r3, r1, r3
 800abf4:	f04f 0400 	mov.w	r4, #0
 800abf8:	f04f 0500 	mov.w	r5, #0
 800abfc:	00dd      	lsls	r5, r3, #3
 800abfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac02:	00d4      	lsls	r4, r2, #3
 800ac04:	4622      	mov	r2, r4
 800ac06:	462b      	mov	r3, r5
 800ac08:	1814      	adds	r4, r2, r0
 800ac0a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ac0c:	414b      	adcs	r3, r1
 800ac0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f04f 0100 	mov.w	r1, #0
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	f04f 0300 	mov.w	r3, #0
 800ac22:	008b      	lsls	r3, r1, #2
 800ac24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac28:	0082      	lsls	r2, r0, #2
 800ac2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ac2e:	f7fe f8f7 	bl	8008e20 <__aeabi_uldivmod>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <UART_SetConfig+0x38c>)
 800ac38:	fba3 1302 	umull	r1, r3, r3, r2
 800ac3c:	095b      	lsrs	r3, r3, #5
 800ac3e:	2164      	movs	r1, #100	; 0x64
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	3332      	adds	r3, #50	; 0x32
 800ac4a:	4a2a      	ldr	r2, [pc, #168]	; (800acf4 <UART_SetConfig+0x38c>)
 800ac4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac50:	095b      	lsrs	r3, r3, #5
 800ac52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac56:	441e      	add	r6, r3
 800ac58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f04f 0100 	mov.w	r1, #0
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	1894      	adds	r4, r2, r2
 800ac66:	603c      	str	r4, [r7, #0]
 800ac68:	415b      	adcs	r3, r3
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac70:	1812      	adds	r2, r2, r0
 800ac72:	eb41 0303 	adc.w	r3, r1, r3
 800ac76:	f04f 0400 	mov.w	r4, #0
 800ac7a:	f04f 0500 	mov.w	r5, #0
 800ac7e:	00dd      	lsls	r5, r3, #3
 800ac80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac84:	00d4      	lsls	r4, r2, #3
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	eb12 0a00 	adds.w	sl, r2, r0
 800ac8e:	eb43 0b01 	adc.w	fp, r3, r1
 800ac92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f04f 0100 	mov.w	r1, #0
 800ac9c:	f04f 0200 	mov.w	r2, #0
 800aca0:	f04f 0300 	mov.w	r3, #0
 800aca4:	008b      	lsls	r3, r1, #2
 800aca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acaa:	0082      	lsls	r2, r0, #2
 800acac:	4650      	mov	r0, sl
 800acae:	4659      	mov	r1, fp
 800acb0:	f7fe f8b6 	bl	8008e20 <__aeabi_uldivmod>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4b0e      	ldr	r3, [pc, #56]	; (800acf4 <UART_SetConfig+0x38c>)
 800acba:	fba3 1302 	umull	r1, r3, r3, r2
 800acbe:	095b      	lsrs	r3, r3, #5
 800acc0:	2164      	movs	r1, #100	; 0x64
 800acc2:	fb01 f303 	mul.w	r3, r1, r3
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	011b      	lsls	r3, r3, #4
 800acca:	3332      	adds	r3, #50	; 0x32
 800accc:	4a09      	ldr	r2, [pc, #36]	; (800acf4 <UART_SetConfig+0x38c>)
 800acce:	fba2 2303 	umull	r2, r3, r2, r3
 800acd2:	095b      	lsrs	r3, r3, #5
 800acd4:	f003 020f 	and.w	r2, r3, #15
 800acd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4432      	add	r2, r6
 800acde:	609a      	str	r2, [r3, #8]
}
 800ace0:	bf00      	nop
 800ace2:	377c      	adds	r7, #124	; 0x7c
 800ace4:	46bd      	mov	sp, r7
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acea:	bf00      	nop
 800acec:	40011000 	.word	0x40011000
 800acf0:	40011400 	.word	0x40011400
 800acf4:	51eb851f 	.word	0x51eb851f

0800acf8 <_init>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	bf00      	nop
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr

0800ad04 <_fini>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	bf00      	nop
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr
